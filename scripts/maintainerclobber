#! /bin/sh
#	$Id: maintainerclobber,v 1.5 2009/09/28 06:56:52 fang Exp $

# emulates a "make maintainerclean" and more
# run this script from the top_srcdir (root)
# "maintainer-clean" should invoke "make distclean"
# Any .tar.* distribution tarballs will not be deleted by this script.  

usage () {
cat << EOF
$0: script to remove all files not tracked by git, like a maintainerclean.
Alternatively, look at 'git status' to find untracked files and clean them.

usage: $0 [options]
options:
	-h : print usage and exit
	-k : keep .gitignore files, even if they are generated
	-n : dry-run print files that would be removed without removing
	-v : verbose mode
EOF
}

args=`getopt "hknv" $*`
test $? = 0 || { usage; exit 2; }
set -- $args

keep_gitignore=0
verbose=0
dry_run=0

for i
do
case "$i"
in
	-h) usage; exit ;;
	-k) keep_gitignore=1 ; shift ;;
	-n) dry_run=1 ; shift ;;
	-v) verbose=1 ; shift ;;
	--) shift; break ;;
esac
done

# Nah, allow this script to be run from anywhere
# test -f configure.ac || { echo "You must run this script from the top source directory." ; exit 1 ;}

if test $keep_gitignore = 1
then
	filt_gitignore="grep -v -e \.gitignore"
else
	filt_gitignore=cat
fi

# read the .gitignore files to determine what to delete
git_clobber () {
# traverse flat list of subdirs
srcdirs=`find . -type d`
for d in $srcdirs
do
case $d in
./.git*) ;;  # skip
*)
	p=$d
	echo "-------- clobbering in $p"
	pushd $p > /dev/null 2>&1
	if test -f .gitignore
	then
		# only remove things that belong to this directory
		clean=`grep . .gitignore | sed 's|^\./||' | grep -v '/' | $filt_gitignore`
		# in case command line is too long
		for f in $clean
		do
			test "$verbose" != 1 || echo "rm -rf $f"
			test "$dry_run" = 1 || rm -rf $f
		done
	fi
	popd > /dev/null 2>&1 ;;
esac
done
echo "-------- done clobbering `pwd`"
test $keep_gitignore != 1 || echo "All .gitignore files were kept."
}

git_clobber

# to see what's left:
# ls -R

echo "Run \"bootstrap\" to regenerate maintainer files."

