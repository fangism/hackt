"ChangeLog"

# NOTE: the latest CVS tag must appear in the first 10 lines of this ChangeLog.
# This version tag is used in building "main/version.cc".

2006-01-29	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-76-2-fixdump-04:
	  Now propagating expr_dump_context argument through all
		instance_management_base::dump, for better control over dump.
	  Enabled sequential scope dumping for all user-defined definitions.
		Tons of test outputs updated accordingly.  
	  TODO: now can enable create test-cases in remaining test dirs.  


	* HACKT-00-01-04-main-00-76-2-fixdump-03:
	  Minor change to printing references to induction variables, 
		dumps now show them with '$' instead of scope names, 
		which is more meaningful and readable.  
	  Bunch of tests dumps updated accordingly.  
	  TODO: definition-local sequential instance management dumps.  


2006-01-28	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-76-2-fixdump-02:
	  Reworked dump method to be more customizable in class hierarchies, 
		particularly in instance collections and namespaces.
	  Fixed longstanding bug with failing to print namespaces of 
		canonical names, in particular for the alloc-dump tests.  
	  Renamed Object/cflat_context to Object/global_entry_context, 
		but also provided alias typedef header.  
	  TODO: for pre-unrolled definitions, add sequential scope dumps.  
	  TODO: enable datatype create/alloc tests, and write more.
	  Then one more revision to go clean-up.  


2006-01-27	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-76-2-fixdump-01:
	  This branch was initiated for the sole purpose of cleaning up 
		the dump routines in the defininition/namespace/instance
		hierarchy once and for all (at least until another major
		rewrite).  Most revisions will revolve around the
		use of the entity::dump_flags structure.  
	  This first revision didn't change any behavior, but added some
		fields to dump_flags in preparation for changes.  


2006-01-26	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-76.2:
	  By popular demand, support for user-defined datatype instances
		has been enabled.  Code additions in canonical_types
		(specializations), state_manager, user_def_datatype.
		This has NOT been thoroughly tested yet.  
		NOTE: this resulted in enlargine the binary size for
		data_definition classes by 8B, because of the
		footprint_manager's minimum size.  
		Tons of unroll/create tests have been updated accordingly.  
	  Added skeleton main/chpsim.{h,cc} for getting started.  
	  main/*.h headers inclusion protection macros prepended with __HAC
	  Enumerations in Object/traits/type_tag_enum.h were prefixed
		with TYPE_.  (still may not be clear where they come from.
	  TOOO: test-cases for user-defined datatypes.  
	  TODO: channel instance support.


	* HACKT-00-01-04-main-00-76.1:
	  Grammar addition to allow definition bodies inside datatype
		and channel definitions.  
	  Also added type-restrictions in parser_context::add_instance()
		and some query methods to fundamental_type_reference's
		class hieararchy.  
	  TODO: test-cases.


2006-01-25	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-76-merged-PRS-04-03:
	  Merge of -PRS-04 branch, which adds cflat support for PRS macros.  


2006-01-25	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-74-PRS-04-03:
	  Added support for passn and passp macros.  
	  Added minimal test cases.  
	  Branch is ready to merge for prime time. 


2006-01-24	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-75.3:
	  Port-style connections fixed (in loop context), by calling
		simpler helper function instead of constructing an
		auxiliary reference.  Bug fixed by removing offending code.  
	  Added new test cases to verify this: parser/flow/loop-ports-*.hac.


	* HACKT-00-01-04-main-00-75.2:
	  *Really* fixes bug with member-reference lookup.
		Modified meta_instance_reference functions to conditionally
		perform lookup to translate local to actual instance 
		collection.  Member references don't need the additional
		lookup, already done by helper function.  


	* HACKT-00-01-04-main-00-75.1:
	  Fixes bug with member instance-reference lookup. 
		Unroll code was inadvertently looking up an already 
		lookup member reference with the base class's static
		helper function.  Refactoring the common code fixed 
		the problem.
	  Lots of debug code sprinkled about.
	  New test cases added (parser/flow) that now work, but didn't before.  


2006-01-23	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-75:
	  Cumulative minor bug fixes from -00-74.x.


	* HACKT-00-01-04-main-00-74.6:
	  Fixed comment-lexing bug, stupid typo... 
		chalk up another bug found for Clint Kelly.


	* HACKT-00-01-04-main-00-74.5:
	  Improved error message on bad definition reference.
		A few tests updated.


	* HACKT-00-01-04-main-00-74.4:
	  Compilation failures should not result in empty object file, 
		fixed in main/main_funcs.cc: check_file_writeable().


	* HACKT-00-01-04-main-00-74.3:
	  Line-number was off by 1, after multiline C-comment because 
		OPENCOMMENT ate the newline, discovered by Clint Kelly.  Fixed.


	* HACKT-00-01-04-main-00-74.2:
	  Fixed file_manager's cyclic file inclusion false-positive bug, 
		tripped by Clint Kelly, case: lexer/import-015-*.hac
		Added additional line-number info on return path 
		from lexer exceptions.  Updated some test stderr's.  


	* HACKT-00-01-04-main-00-74.1:
	  Useful error message on bad operator in AST's, 
		logical_expr::check_meta_expr().
		Bug tripped by Cilnt Kelly, case: parser/basic/oper-01.hac


2006-01-23	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-74-PRS-04-02:
	  PRS macros' arguments may not be empty, fixed in grammar.
	  PRS unrecognized macro error message issued.  
	  PRS::macro_definition_entry main prototype updated to take
		vector<local node IDs>.
	  We have our first working macro, "echo"!
	  Added initial test-cases in prs/echo-*.hac.


	* HACKT-00-01-04-main-00-74-PRS-04-01:
	  Significant progress towards implementing user-defined PRS macros.  
	  Wrote PRS::macro (pre-unroll) and 
		PRS::footprint_macro (unroll-resolved) classes.  
		Implemented macro::unroll(), seems to work.  
	  Added macro_pool to PRS::footprint, resulting in larger 
		binaries for process_definitions and definition footprints.  
		(Tests updated accordingly)
	  Preliminary draft: PRS::macro_registry for macro class definitions.  
	  Extended cflat_visitor to cover PRS::footprint_macro.
	  Added primary tool enumeration to cflat_options.  
		This enumeration will be used to determine the
		major mode of operation in cflat.  
	  main/compile module: added more -f flags.  
	  main/main_funcs: added debug flag to save_module_debug.  


2006-01-22	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-74:
	  Makefile.am: split up libhackt.la, factored out AST objects
		into libhacktast.la.
	  Object/*.{h,tcc}: include protection macro #ifndef ...
		for all headers now prefixed with __HAC for consistency, 
		convention, and to minimize collision.


	* HACKT-00-01-04-main-00-73-merged-prsim-00-34:
	  Branch merge.
	  Initial prsim code: expression allocation and command interface.
	  Initial support for PRS macros and attributes. 
	  This branch also includes important library fixes and improvements.  
	  Significant configurability improvement for portability.  


2006-01-22	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-34:
	  Just portability and compatibility checks.
	  Ready to merge to main.


	* HACKT-00-01-04-main-00-72-prsim-00-33-merged-PRS-03-02:
	  Merged in sibling branch: -PRS-03-02.
		This early merge was deemed necessary because many essential
		fixes and improvements were only on the prsim branch.
		Most importantly the rewrite of cflat visitation
		is needed to support PRS.  
	  TODO: support Clint's requests for PRS extensions.  
	  Status: prsim incomplete:
		expression allocation complete, but not optimized.
		a good start of the command-line interface.
		PRS extensions:
			Initial syntax and object support for macros
				and attributes only.
			need to support primary tool mode, 
			possibly added to cflat_options.  
			Add macro support in the cflat_visitor hierarchy.
	  PRS activity is planned for after the merge to main trunk, 
		then splitting off to -PRS-04.



2006-01-21	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-32:
	  Finished and (basic) tested member_meta_instance_reference::
		lookup_globally_allocated_index().  Was easy, the footprint*
		was available from the footprint frame!
	  Reverted -00-28's revisions to unroll_context (cleaned).
	  TODO: write some prsim script tests...
	  Status: need to merge in sibling branch -PRS-03 revisions, 
		this branch now in semi-stable state to do so.  


	* HACKT-00-01-04-main-00-72-prsim-00-31:
	  Clean-up only, from -00-28 revisions on.


	* HACKT-00-01-04-main-00-72-prsim-00-30:
	  Another minor lexer fix: regarding line-numbers of import
		directives in the parse-tree.  A few test-cases updated.  
	  TODO: clean-up #if code in AST/import_root.* and lexer/hackt-lex.ll.


	* HACKT-00-01-04-main-00-72-prsim-00-29:
	  Quick emergency bug-fix (reported by Clint Kelly):
		Lexer was dying on assertion failure with w.r.t.
		registry sizes and stack sizes.  (They need not be correlated.)
		file_position struct was given a string name (path to file)
		field for convenience.  Much cleaner now.  
	  Some minor POSIX-related fixes, and yacc-related (libbogus) fixes.  
	  TODO: line numbers reported are incorrect, fix using new
		test case example.  
	  TODO: back to TODO list from -prsim-00-28.  


2006-01-21	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-28:
	  Currently, prsim instance member lookup is in transition.
	  AST::id_expr::check_meta_reference() calls 
		the base-definition's lookup_nonparameter_member()
		to lookup private subinstances of any type.  
	  entity::definitions: added get_scopespace(), 
		all typedefs forward the request to the scopespace to 
		the canonical type's definition, 
		implemented lookup_nonparameter_member(). 
	  Added scopespace::__lookup_member(): non-virtual lookup of id_map.
	  Tons of restructuring in {simple,member}_meta_instance_reference
		and simple_meta_instance_reference_implementation<> policy:
		factored out common code, added new useful method functions
		for performing lookups of globally allocated information.  
		Renamed old unroll_generic_scalar_reference to
			unroll_scalar_substructure_reference, and
			redefined unroll_generic_scalar_reference
			to return a pointer to the alias' base type.  
	  instance_alias_info<Tag>: instance_index member pushed to
		substructure_parent_type.
	  sim/prsim/Reference.cc: Switched to new incomplete code
		over old incorrect code (that's progress).  
	  TODO: finish writing member_meta_instance_reference::
		lookup_globally_allocated_index, using type footprint.  
	  TODO: clean up Object/ref/*.{h,tcc} files, after we re-wrote
		a bunch of stuff and left obsolete code commented out.  
	  TODO: clean up instance_index switches in instance_alias_info...
	  TODO: no longer need unroll_context::lookup_private_members, 
		revert those revisions.  
	  TODO: merge in -PRS-03 sibling branch, then merge to trunk.  


2006-01-19	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-PRS-03-02:
	  Factored out repetitive code in lang/PRS::pull_* into common base
		class (pull_base) for maintainability.  
	  Added object structure for attributes in pull-up/dn production rules.
		This resulted in larger rule binary objects (4+ B).
		Tests cases' outputs have been updated accordingly.  
	  Implemented most of type-checking of macros and attributes
		expressions and instance-references.  
		Had to add some new check functions to a few AST classes.  
	  Some minor enhancements to util library (util/ChangeLog).


	* HACKT-00-01-04-main-00-72-PRS-03-01:
	  Spawned this concurrent branch for Clint, who's requested some
		extensions to the PRS language.  
	  AST/PRS.{h,cc}: added macro and attribute classes.  
		Check methods are not written yet.  
		Added optional attribute_list to PRS::rule.  
		Added macro class as an alternative PRS::body_item.
	  Grammar updated to add macros and attributes to PRS.
		macro : ID '(' inst-refs... ')'
		attribute : ID '=' expr_list
		attribute_list : '[' attribute ';' ... ']'
	  prs_expr : are now limited to relative (local) instance references
		only, so no ::-prefixed absolute_id's.  
	  TODO: write some check functionality.  


2006-01-18	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-27:
	  Documentation, clarification, and renaming, clean-up, 
		and planning revision only.  
	  Cleaned up #if 0 code from previous revision.  
	  Wrote issues section in template chapter of language spec.  
		Discusses a proposal for how member lookup should work
		w.r.t. template parameters.  
	  renamed member functions "lookup_object_here" to "lookup_member",
		to make it clear what we're intending to do.  
	  TODO: rewrite definition hierarchy's lookup_member function:
		defer real work to scopespace's lookup_member
		by virtualizing a new get_scopespace() mem-fun.
		Typedefs will implement this by forwarding to canonical defs.  
		Remember to omit template_formals.  


	* HACKT-00-01-04-main-00-72-prsim-00-26:
	  Can now "get node" in prsim.  
	  parser::context: added is_publicly_viewable to enable looking
		up of private members, useful for tools that are
		read-only w.r.t. precompiled module.  
		Also added a ctor with const module&, no more need to 
			const_cast<> for read-only modules.  
	  Refactored definition_base::lookup_port_formal_*(...):
		just use one virtual function to get a port_formal_manager*
		if definition-type has one, else default to NULL.
		Results in less repetitive code (do this more often).  
	  This also fixed a bug where template typedefs wouldn't forward
		lookups to their canonical definition scopes.
		Added new test-cases in parser/typedef/.  (018 demos this)
	  Used excl_ptr<FILE, FILE_tag> for the first time in prsim/Reference.cc
	  TODO: known deficiency only looking up public ports
		in prsim:get, will be quick to fix.  
	  TODO: implement definition_base::lookup_instance_member.
	  TODO: clean up little #if 0 mess in Object/def/definition*.{h,cc}.
	  Updated TODO list file.  


	* HACKT-00-01-04-main-00-72-prsim-00-25:
	  Minor patches to make sure package distchecks and everything builds 
		on the other tested platforms
		(actively using ppc-apple-darwin): i386-freebsd-g++-3.4.0, 
		and i686-linux-gnu-g++-3.4.3.


2006-01-17	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-24:
	  No signficant source changes other than accommodating
		MAJOR util library cleanups.
	  See util/ChangeLog for details.


	* HACKT-00-01-04-main-00-72-prsim-00-23:
	  Wrote most of sim/prsim/Reference.cc, including parsing
		and type-checking, just need the final lookup...
	  ... after this brief interruption to dizzy-up the 
		util/memory pointer classes with deallocation policies.  


2006-01-16	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-22:
	  Maintainence revision only, been lacking some distcheck 
		discipline as of last few revisions.  Now distcheck clean.  
	  This revision also features configure-checked compiler flags.


	* HACKT-00-01-04-main-00-72-prsim-00-21:
	  Most of AST/exprs' type-checking member functions have been updated
		to take a *const* parse_context& argument instead of
		a non-const reference.  This move helps guarantee that 
		when we check an instance reference from another module
		using the context, that we don't modify the module.
		To make it easy to identify this patch, these
		trivial modifications are the only ones in this revision.  


	* HACKT-00-01-04-main-00-72-prsim-00-20:
	  Instance-reference parser working, after a Makefile.am fix
		and renaming old lexers' at_eof() to PREFIX_at_eof().  
	  instref_parse: remembered to set reference argument yylval
		before returning an accepted input.  
	  Instated yyerror magic for instref_parse.
		Really need to factor out this boilerplate code in future.
	  TODO: sim/prsim/Reference.cc needs to call AST function
		but after constructing a proper lookup context, 
		from the host module.  


	* HACKT-00-01-04-main-00-72-prsim-00-19:
	  util library readline fix  and configuration enhancements only.  


2006-01-15	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-18:
	  Added bunch more core commands to prsim, and placeholders for more.
	  Tore my own hair out trying to get multiple-lexers to compile
		and link into libbogus without symbol collision but gave up.  
		Issue: flex-generated source doesn't include user header
		files early enough to be able to #define-rename all 
		relevant yy-symbols.  (generated parsers were OK)
	  Consequence: each lexer-parser pair is now compiled into
		its own convenience library.  
	  NOTE: lexer/instref-lex-options.h looks much different
		from its original hackt counterpart...
	  TODO: much later, resolve this lexer/parser fiasco
		once-and-for-all with REAL tools.  
	  Hacked by good enough for now, not going to waste more time.


2006-01-15	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-17-merged-temp-04:
	  Branch merge.
	  Summary: instref parser added, parser-generation updates
		to facilitate multiple-parsers, new and improved
		prsim command registration interface.  
		Also some util library enhancements and configuration checks.  


2006-01-15	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-16-temp-04:
	  Implemented AST-generation for the instref parser.
	  Re-implemented command infrastructure for prsim.  
		Commands are now registered through categories
		and using class-registration interface.  


2006-01-14	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-16-temp-03:
	  Makefile.am: pulled libhacktparsers.la out from libhackt.la, 
		now linked in separately, to avoid unnecessary duplication.  
		Duplicated rules for the instref-parse parser, 
		using hackt-parse as a template.  
	  Now compiles the instance-reference parser (instref).
		Needed work to avoid symbol collisions between 
		different parsers.
	  Silly modifications to hackt shell.  
	  parser/*-parse-options.h:
		conditionally define YYPARSE_PARAM when NOT in libbogus.
	  parser/*-union.h:
		macros to rename the union lookup functions
		to avoid symbol collisions.  


	* HACKT-00-01-04-main-00-72-prsim-00-16-temp-02:
	  This branch was created in honor of the frequent power outages
		in our office building.  Committed a bunch of local files.
	  Cross checked sources against g++4.  
	  Intend to get command-line parser up.  


2006-01-13	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-16:
	  Makefile.am reorganization: split-off everything pertaining to
		the util/ directory into util/Makefile.inc (new).  
	  lexer/parser-generation: replaced the lexyacc-prefix.awk
		pipe with a generated #define substitution file
		parser/hackt-prefix.h, created from 
		util/lang/lexyacc/lexyacc-prefix-generator.awk.
		This the first step in simplifying the parser generator
		and mangler toolchain.  


2006-01-12	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-15:
	  configurability maintainence only.
	  Added more configuration checks to util library, with help of 
		autoconf checks.  
	  Preparing for command-line parser additions, but may require
		another overhaul of lexer/parser build system.  


2006-01-11	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-14:
	  Added basic command-line interpreter support for prsim, 
		only basic commands so far, core functionality yet to come.  
	  New files: sim/prsim/Command.{h,cc}
	  Also util library additions in this revision.  


2006-01-10	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-13:
	  Added dot visualization mode for prsim, will be useful for debugging
		and checking optimizations.  Just add -fdump-dot-struct
		to hackt prsim to produce dot-format (stdout).
	  Beautiful!


	* HACKT-00-01-04-main-00-72-prsim-00-12:
	  More prsim expr-allocation testing:
		Added structural integrity check (State::check_structure).
		Replaced some magic numbers (valid/invalid indices)
			with meaningful enumerations.  See "sim/common.h".
	  Fixed parenthesization bug in ExprAlloc::link_node_to_root_expr.  
	  Added five test cases dumping expression allocation
		in test/parser/prs.
	  TODO: dump graphical (dot) representation of expressions.  


2006-01-09	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-11:
	  Updated output formatting for prsim expression allocation dump.
	  Added test support for expr-allocation dump comparison.  


2006-01-04	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-10:
	  I was bored, so I had a little fun with autoconf.
	  Added misc/ directory for fun.  


2006-01-03	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-09:
	  PRSIM expression allocation partially debugged for a few simple
		test cases.  Debugging code retained.  
	  Fixed convenience library link-ordering.
	  Added prsim module.
	  SIM::PRSIM::Expr,Node have to use vectors of children/fanout
		instead of valarray, because valarray's realloc doesn't
		copy old values.  :(  Consider new library template class?
	  Added main/options_modifier.{h,tcc} -- reusable simple
		getopt options registry, inheritable by modules.  
		(Factored out of cflat module)
	  Added main/simple_options.{h,tcc} -- simple commonly used
		options parsing for simple commands.  
	  TODO: test suite and test cases for expression allocation.  


2006-01-02	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-08:
	  Initial draft of Expr-allocation code, in sim/prsim/ExprAlloc.{h,cc}.
		Code is untested, need to test, of course!
	  Removed some deprecated ctors in cflat_context and derived classes.  
	  Moved entity::PRS enumerations into "Object/lang/PRS_enum.h".


2005-12-30	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-07:
	  Deprecated (and commented-out) the old cflat_prs methods
		and conforming to using a cflat_visitor.  
	  TODO: do the same with cflat_alias instance hierarchy
	  TODO: use cflat_visitor to allocate simulation expression structs.  


2005-12-23	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-06:
	  Completed transforming cflat routines into cflat_prs_printer
		visitor methods.  (Testing passed.)
	  Can now build upon this to perform other traversals.  
	  TODO: phase out unused code for cflat_prs.  


2005-12-22	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-05:
	  Re-organized some Object/lang/PRS* code a little in preparation
		for adding functionality via a visitor for performing
		tree traversal operations.  
	  Moved some utility classes into their own header files.  
	  Added some utility classes in util library (headers).  
	  TODO: factor out bunch of arguments into cflat/print context
		and re-implement cflat with visitor as a demonstration.  


2005-12-15	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-04:
	  More prsim state and structure implementation Expr, Node, 
		State, etc... a lot of comments on things.  
	  TODO: write walkers for all our useful structures, starting with
		PRS rules and expressions.  


2005-12-14	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-03:
	  More sim/prsim classes added.  
	  Factored out some repetitive code using list_vector's as 
		indexable pools into index_pool<vector< > >.
	  Some memory-management classes added to util library.  


2005-12-13	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-prsim-00-02:
	  Drafted sim/prsim/{Node,Expr}.{h,cc} structs based on the old ones.  
	  Makefile.am: added installcheck-local target.


	* HACKT-00-01-04-main-00-72-prsim-00-01:
	  This branch is for the development of the old prsim, 
		with no new fancy features.  Its purpose is to provide
		an example of how to use the general simulation framework.  
	  Updated module class, providing a temporary footprint
		importer class that undoes import upon destruction.  
	  Added a few short READMEs.  
	  Also added help to Makefile.am.  
	  TODO: interface module to simulation framework for 
		allocating prs nodes and expressions.  
	  TODO: define simulation *state* for each simulator (checkpointable).  
	  TODO: flesh out more details of TODO.


2005-12-12	David Fang		<fangism@users.sourceforge.net>

	* HACKT-00-01-04-main-00-72-merged-rename-00-06:
	  Trunk merge: We've moved! Renamed files, eliminating traces of art.  


2005-12-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-71-rename-00-06:
	  Documentation update only.  
	  This branch is now complete save for unintentionally
		forgotten replacements.  


	* ARTXX-00-01-04-main-00-71-rename-00-05:
	  Moved Object/art_object_fwd.h -> Object/object_fwd.h, 
		and all references hitherto.  
	  Miscellaneous comment updates, and file cross-references.  


	* ARTXX-00-01-04-main-00-71-rename-00-04:
	  No source revision, only test cases were renamed to .hac.
		See ../test/ChangeLog.


2005-12-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-71-rename-00-03:
	  Failed attempt to configure-generate headers_deps.make.
		Kept some notes about it.
	  Updated scripts/automake_include.awk to ignore junk.  
	  Restored parallel-make, which was broken since main-00-69,
		by a NOTPARALLEL directive in the Makefile.am.  
		Fixed by commenting out and rewriting a few dependencies.  
		We'll see if any builds break in the near future.  


2005-12-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-71-rename-00-02:
	  Renamed nearly all AST source and header files without
		"art_parser" in the file name.  Had to get this over with.  
	  TODO: documentation, test files, file extensions.


	* ARTXX-00-01-04-main-00-71-rename-00-01:
	  The purpose of this branch is to rename everything 
		from ART to HAC, more importantly, to remove all 
		names and references to "art" or "ART" because of 
		potential name clashes with other packages.  
	  This first revision renamed the ART namespace to HAC.  
	  TODO: AST files, documentation, test files, file extensions.


2005-12-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-71:
	  Header check dependency generation scripts updated.
		No files rooted at / are included in the dep files.  
	  Bunch of util library pointer class additions, 
		see util/ChangeLog.  
	  Starting to play around with readline and editline.  
	  HACKT shell works with/out rl/el, and is capable of 
		running system commands by prefixing with '!'.  
		Just like my favorite editor, vi.  
	  TODO: load this baby with some commands!


2005-12-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-70:
	  No source change, just revision bump. 
	  Some Makefile.am configurability improvements, 
		able to disable header checking.  


2005-11-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-69:
	  Improved configuration for byacc support.
	  This revision has been validated against byaccj-1.1 (Java-extended),
		bison-1.35, 1.875, 2.0.
	  Makefile.am: clean-ups and re-casing parser cases.
	  Added parser/patch_byacc.awk to fix-up the output
		produced by byacc.  
	  Makefile.am: corrected additional generated source dependencies.
		Unparallelized some non-atomic targets.  
	  lexer/purify_flex.awk: minor fix in member substitution.  


	* ARTXX-00-01-04-main-00-68-merged-parser-04-06:
	  Merged -parser-04 branch.
		Featuring re-entrant lexer and parser, and working imports.  
		Supports yacc, bison-1.35 -2.0, flex 2.5.4 -2.5.31.
	  Too tired to summarize the details, read below.


2005-11-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-66-parser-04-06:
	  Finally wrote the recursive lex/parse file importing in
		lexer/hackt-lex.ll, which calls hackt_parse.  
		Has been tested re-entry safe!
		No memory is leaked to tokens as each level of parsing
		unwinds during an error!
	  Added import_root AST object to hold the parse trees of
		nested visited files, which will be traversed
		at check_build time.  
		During error, file name will be printed during stack
		unwinding.  The stack trace of the inner most file
		will follow that of the first inclusion from importing.  
	  Added file_name_stack to parse_context, 
		later, track file names with this in objects.  
	  lexer/purify_flex.awk: factored out common substitutions
		into a few function calls for prototypes and calls, 
		potentially re-usable for future source stream-hacking.
	  Checked against yacc, bison-2.0.
	  Checked against flex-2.5.31! which was rather painful...
		Had to add another handful of entries to 
		lexer/purify_flex.awk and members to struct flex::lexer_state.
	  Branch is near end.  


2005-11-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-66-parser-04-05:
	  So the previous revision's flex hacks were far from complete...
		This revision brings tons more awk hacks to mangle the
		flex-generated scanner into a reentrant scanner.  
		lexer/purify_flex.awk is horrendous-looking now...
		no time to beautify it.  
	  yyparse() prototype extended to take a FILE* 'infile' argument, 
		which is used to construct the lexer state.  
	  awk scripts now generate more comments in hacked output.  
	  yyfreestacks() and yyerror() extended with _lexer_state
		argument for end-of-file diagnostics.  
	  Also cross checked against bison-2.0 so far.  
	  TODO: enable recursive parsing/lexing in import.  
		and re-enable lexer test with importing.  


	* ARTXX-00-01-04-main-00-66-parser-04-04:
	  Added more crazy awk scripts and hackery to make the flex-generated
		scanner re-entrant, which is a lot harder than purifying
		the yacc-parser!!!
	  Introduced "lexer/flex_lexer_state.h" containing
		the struct flex::lexer_state which contains all the stateful
		information used by the flex-generated scanner (non-C++).  
	  lexer/purify_flex.awk: strips out all the global state 
		variable declarations in the lexer, and replaces
		all of the references to these globals with 
		state-object member references.  Holy awk, Batman!
	  parser/purify_flex.awk: plants a declaration of the lexer-state
		local to yyparse().  
	  The parser is now responsible for holding the lexer state
		flex::lexer _lexer_state, and passing it to yylex(...).  
	  So far, this revision only checked flex against yacc, 
		next revision will check/hack bisons as well.  
	  Currently, file importing is disabled, so all 11 import tests
		in the test/lexer directory fail for this revision.
		We will fix and finish the file importing mechanism
		in the next revision(s).  


2005-11-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-66-parser-04-03:
	  New friends added to make yacc-generated parser re-entrant:
		parser/purify_yacc.awk -- moves globals to local
		parser/yygrowstack_yacc_hack.awk -- rewrites the 
			declaration and calls to yygrowstack with
			additional parameters instead of referencing globals.  
	  Next: Having lexer call parser for importing.  
		Anticipate some changes in error output, file stacks
		will be upside-down.  


	* ARTXX-00-01-04-main-00-66-parser-04-02:
	  Modified the yyparse prototypes to take the YYSTYPE& yylval
		as an argument passed by the caller.  
		Verified against yacc, bison-1.35, bison-2.0.  
	  Makefile.am: slightly more elaborate procedure to generate
		.cc parsers.  
	  Bison-generated parser is now pure and re-entrant, while
		yacc's still uses global variables...
	  Next revision will attempt to hack yacc further.  


	* ARTXX-00-01-04-main-00-66-parser-04-01-merged-main-00-67:
	  Started this branch before some fixes on the main line.  
	  This first revision merges the bison-1.35 fixes from -00-67
		and sprinkles a few comments hither and thither.
	  The intent of this branch is to make import work
		(for real this time), at least with bison, 
		which produces re-entrant parser.  Yacc will take some
		more hacking...


2005-11-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-67:
	  Last revision had inadvertently broken support for bison-1.35, 
		this revision addresses those problems, and also
		makes the bison-generated parser pure (re-entrant).
		Re-entrant yacc-parsing will come later...
	  parser/hackt-parse.yy is now configure-generated from
		parser/hackt-parser.yy.in because the %pure-parser directive
		is rejected by traditional yacc.  
	  We now manually override the yylex prototype by defining
		YY_DECL with a YYSTYPE* argument (for &yylval).  
		The inline utility routines in the lexer (.ll)
		now take a YYSTYPE& argument.  
	  Added more preprocessor defines to parser/hackt-parser-options.h
		and lexer/hackt-lex-options.h.  


2005-11-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-66-merged-parser-03-10:
	  Merged in -parser-03 branch, featuring:
	  Tons of configuration improvements.
	  Parser and lexer enhanced with file import capabilities, 
		which just includes files with an implicit #pragma once.
	  Visited files are skipped, cyclic dependencies
		are detected and rejected.  
	  Parser error reporting now include full file stack.  
	  Command-line option to add search paths is -I, just like cpp/gcc.  
	  Includes a few tests of the import feature, but is not considered
		thoroughly tested.  
	  parse_test module synchronized with compile module.
	  Includes minor library improvements.  


2005-11-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65-parser-03-10:
	  Using consistent file_status enumerations for diagnostics, 
		added util/file_status.h.
	  Wrapped parse_test's command-line parsing around the compile
		module's command-parser.  Now it benefits from all
		of compile's options and their modifiers, 
		namely include paths from this branch.  
	  lexer::file_manager and yyin_manager now detect and reject
		cyclic file references.  Otherwise precompiled headers
		will not work with cycles.  Dependency graph may only
		be directed acylic.  
	  branch status: nearly complete, possibly ready for merge.


	* ARTXX-00-01-04-main-00-65-parser-03-09:
	  Fixed previous bug regarding nested file line numbers.  
	  Fixed bad file name bug by using std::string in file_manager's
		file name stack.  Never use const char*, 
		not even for quick and dirty.  
	  Parser no longer handles file-opening, moved to lexer!
		Rationale: parser would scan tokens after import
		statements, but before actually opening file, 
		so line numbers would be totally off in nested files.  
		(May still be a way to do it in the parser, 
		a brief attempt at embedded actions in the grammar failed.)
	  Lexer is now imbued with ability to change file streams, 
		imitating parsing of an import directive {IMPORT}.
		Learned that yywrap is called *before* EOF is reached
		in string and comment modes/states.  
	  Extended both yacc- and bison- union-type.awk scripts
		to handle cases where there is no type associated with
		a symbol, either because the symbol has no type, 
		or is a placeholder for an embedded action.  


2005-11-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65-parser-03-08:
	  All errors are now reported with the file stack.  
		All lexer/parser tests updated accordingly (bison/yacc).  
	  KNOWN BUG with line reporting with nested files, working on it...
	  Added mechanism for resetting file_manager in the event of
		a lexer/parser exception for proper cleanup.  
	  lexer/hackt-lex.ll: added missing quote escape sequences.  


	* ARTXX-00-01-04-main-00-65-parser-03-07:
	  lexer::file_position_stack and lexer::file_manager now report 
		whether an included file was ignored because it was already 
		registered (visited).  yyin_manager and parser use this 
		information to determine course of action.  
	  TODO: dump include file stack in the event of an error.  
		In general, make the error reporting more precise.  
	  TODO: -M for make dependencies (possibly other suboptions).  
	  TODO: commit USE_CURRENT_FILE_STACK in AST/art_parser_terminal.h, 
		and commit CURRENT in lexer/hackt-lex.ll.


	* ARTXX-00-01-04-main-00-65-parser-03-06:
	  Only partial functionality of including/importing other files.  
	  Added lexer::yyin_manager helper class for balancing file stack.
	  Implemented more of lexer::file_manager methods.  
	  Updated yywrap in lexer/hackt-lex.ll.
	  Still needs extensive testing (and completion).  
	  Initial compile options and modifiers to compile module.  
	  parser/hackt-parse.yy: partial implementation of 
		opening files, but needs more checking.  


2005-11-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65-parser-03-05:
	  Makefile.am: clean-up and making some dependencies omre precise.  
	  main/version.cc: more configuration information added:
		build/host and various CXXFLAGS used in compilation.  
	  main/compile.cc: working towards function include path searching, 
		not there yet...


2005-11-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65-parser-03-04:
	  Configure/Makefile changes only: cxx_version.h, 
		lexer/lex_version.h, and parser/yacc_version.h are now
		generated at configure-time.  


	* ARTXX-00-01-04-main-00-65-parser-03-03:
	  Added more configuration header dependencies in Makefile.am.  
	  Added initial files for managing file inclusion and path
		searching for included files.  (not complete yet)
	  Minor fix in token_quoted_string::what().
	  lexer/hac_lex.*: removed unused off (offset) field.
	  Added import "file"; skeletal support to hackt lexer and parser.  
		Parser error outputs all shifted by one state.  
		Tests have been updated.  
	  TODO: open referenced files using include paths.  


2005-11-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65-parser-03-02:
	  Added more configuration detection headers for use with 
		main/version.cc.  Now includes CXX, LEX, YACC versions.  
	  Next: lexer file stack, possibly include search paths...
		NOTE: may have to update parser test outputs.  


	* ARTXX-00-01-04-main-00-65-parser-03-01:
	  Parser related activity.  
	  There has been a request for #include feature, so that will
		be one goal for this branch.
	  In this revision:
		renamed all lexer/parser files art++ -> hackt.
	  Minor fix in an awk script to remove hard-coded name.  


2005-11-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-65:
	  No source change, just Makefile adjustment to fix problem where
		test scripts would depend on . being in user's path.  
		Thanks to Arvind Kumar for reporting.  


	* ARTXX-00-01-04-main-00-64-merged-cflat-03-02:
	  Merged major cflat functionality from -cflat-03 branch.  
	  A good time to announce a pre-release.  


2005-11-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-63-cflat-03-02:
	  Added a TON of cflat modes, having reverse-engineered most
		cflat formats from the original program.  
	  Added real command-line parsing to the cflat subprogram:
		now able to pass in a preset mode and apply any number
		of individual flag modifiers for customization.  
	  Implemented wire-mode alias printing in footprint::cflat_aliases
		and part of substructure_alias_base<false>::__cflat_aliases, 
		in which all aliases are accumulated in a cache
		and printed in the end in aggregate form: wire (a,b,c...);
		Made use of alias_string_cache, which from previous branch.  
	  Various cflat modes not rigorously tested, and many old CAST
		features (like attrib, spec,...) not yet supported.  
		Will update as we learn more from testing.  
	  Usage for hackt cflat is pretty verbose.  
	  Ready for production, merge to trunk.  
	  TODO: documentation: tutorial on hackt::cflat, after merge.


2005-11-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-63-cflat-03-01:
	  Added hackt subprogram 'version'.  
	  Added placeholder hackt subprogram 'shell'.  
	  TODO: add more cflat modes, namely lvs, connect, etc...


2005-11-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-63-merged-cflat-02-05:
	  Merged in bug-fix branch -cflat-02, revision -05.  
	  hackt cflat prsim is ready for prime time!


2005-11-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-62-cflat-02-05:
	  Cleaned up obsolete code, committed switches.  
	  Added process cflat prsim tests.  
	  Target met for the branch, closing after verification.  


2005-11-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-62-cflat-02-04:
	  BUG FIXED: cases connect/122-127.in
		Completely re-worked cflatting of aliases, with new idea.
	  Obsolete: Object/common/alias_string_set.{h,cc}
		no longer used, so we're trimming the fat.  
	  Deprecated (and switched out) the old cflat_connect methods
		in global_entry and state_manager.
		(renamed old cflat to cflat_prs)
	  New cflat_aliases routines added to footprint and instance 
		hierarchy.  footprint::cflat_aliases() walks every
		instance and subinstance in the hierarchy recursively, 
		using the result of an allocated state_manager to 
		print aliases to canonical names.  
	  Added class_trait: print_cflat_leaf, true only for bools, 
		because cflat tools only deal with bools (nodes).  
	  As a result of new cflat-aliases, some tests were updated, 
		some with trivially reorder aliases, a few with
		added missing aliases from before, oops!
	  TODO: clean house: delete obsoleted and unused code.  
		Remove alias_string_set.*.
		Commit devel_switches.h.  
		Hand-verify and enable parser/process cflat tests. 


2005-10-31	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-62-cflat-02-03:
	  New idea: instead of computing hierarchical cflat alias, 
		just traverse the top-level footprint hierarchically to
		guarantee visiting each bool alias *exactly* once.  DUH!
		TODO: this, next.
	  Attempted to create and use global_entry parent back-references, 
		but failed miserably.  What wasted effort.  
		Just made a small mess of the code.  


2005-10-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-62-cflat-02-02:
	  Introduced alias_string_cache, constructed during cflat
		once per alias set, per footprint.  Not only is this
		a minor optimization, but it will be necessary to rework
		cflat to fix some known bugs, slated for fixing this branch.  
		Currently enabled by compile switch in Object/devel_switches.h.
	  Next: using completely different cflat strategy, considering
		new structure or traversal.  Might need hash_set to uniquify.  


	* ARTXX-00-01-04-main-00-62-cflat-02-01:
	  This branch for fixing a known bug in cflat.  
		Address test cases connect/122-126.in.  
	  No code revision with this tag.
	  Added bunch of alloc and cflat tests in parser/connect dir.  


2005-10-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-62-merged-flow-01-08:
	  Merged -flow-01 branch:
	  Summary: flow control (loops and conditionals) work in
		sequentially unrolled scopes.  


2005-10-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-flow-01-08:
	  Added a few lines of (disabled) debug code.
	  Discovered cflat bug in cases flow/031, connect/122-126.
		Missing aliases to private subinstances.
		All other compile phases through alloc are correct, however.  
	  Bunch of test cases added.  
	  Closing this branch early to focus on critical cflat bug.  
		TODO: connect prs tests! to check for correct aliases


2005-10-29	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-flow-01-07:
	  First batch of tests and fixes involving conditional scopes.  
	  index_collection (inst_stmt pointer collections)
		have been augmented to include predicate flag, 
		indicating whether or not statement was inside some conditional
		scope.  Consequentially, object binary sizes have grown
		by one byte per instantiation_statement pointer.  
		Tests have been updated accordingly.  
	  parser::context now tracks whether or not context is in 
		conditional scope.  
	  scopespace::add_instance() when checking for static index overlap,
		disregard all predicated instantiations for now.  


2005-10-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-flow-01-06:
	  Added code for conditional instance management bodies (untested).
	  Implemented missing pbool_expr::unroll_resolve_value methods, 
		how was this missing before and unnoticed?
	  Fixed some minor dump indentation.  
	  TODO: test cases for conditional scopes, nesting, crazy stuff...


2005-10-27	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-flow-01-05:
	  No code revision: just new batch of test cases.  


	* ARTXX-00-01-04-main-00-61-flow-01-04:
	  Trivially implemented unroll/create_unique for loop-scopes.
	  Passes basic test cases so far in parser/flow.  
	  TODO: crazy test cases, move loops inside definitions...


2005-10-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-flow-01-03:
	  Finished loop_instantiation::check_build().
	  Created class context::loop_scope_frame.
	  entity::param_value_collection::may_be_initialized():
		add || is_loop_variable, which counts as initialized.
	  TODO: make flow/000.in test case work.


	* ARTXX-00-01-04-main-00-61-flow-01-02:
	  More cleaning up, using helper classes to balance parser::context
		manipulations, classes context::*_frame.  
	  TODO: finish loop_instantiation::check_build() next.  


	* ARTXX-00-01-04-main-00-61-flow-01-01:
	  Branch for flow control in sequential scopes: 
		loops and conditionals.  
	  Moved PRS::meta_loop_base class into unroll/meta_loop_base.h, 
		for re-use with loop-scopes.  
	  parse_context's current_open definition now managed by
		parser::context::definition_frame<DefType> template
		to automatically balance context frame.  
	  Started parser::loop_instantiation::check_build().
	  Started entity::loop_scope class method definitions.  
	  Eliminated parser::context::master_instance_list member,
		using current_sequential_scope instead (much cleaner!).  
	  TODO: Balance sequential scope with context member class.
	  TODO: clean up recent switches.  
	  NOTE: first test in parser/flow not complete yet, expect 6 failures.  


2005-10-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-61-merged-PRS-02-11:
	  Merged PRS-02 branch.  Main feature: rule and expression loops.  


2005-10-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-11:
	  Portability and VPATH check only.  Ready to merge to trunk.  


2005-10-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-10:
	  Created switch to allow negative ranges (x,y|x>y) to attempt
		to support CAST-style backward ranges.  
		Currently, unresolved how to interpret empty-ranged
		expression loops, as noted in dox/lang spec.  
		This needs to be resolved ASAP.  
	  Added set of test cases catching empty loop bounds.  
	  This concludes this branch.  


2005-10-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-09:
	  Implemented AST::PRS::loop::check_rule() for parsing 
		production rule loops.  
	  Implemented type-checking and unrolling, etc. for 
		entity::PRS::rule_loop.  Passes basic test case in nand-07.
	  	TODO: crazy nested loop test cases.  
	  Factored out common loop structures into PRS::meta_loop_base.  
	  In parse_context, loop variable stack balancing done through
		scoped object construction and destruction now.  
	  Fixed util/unique_list.h (never used yet).  


2005-10-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-08:
	  Implemented smart parenthesization for meta and non-meta
		arithmetic expressions, using operator precedence and
		associativity.  (Could also apply to relational exprs...)
	  Added new prs test cases.  
	  Also added is_associative() to util/operators' 
		binary_arithmetic_operation.  


2005-10-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-07:
	  Cleaned up and committed USE_EXPR_DUMP_CONTEXT.


2005-10-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-06:
	  Introduced expr_dump_context for parameter expressions
		and instance references, used to control and format
		expression dumps.  Currently, enabled using the 
		USE_EXPR_DUMP_CONTEXT development switch.  
		This resulted in some changes in expected test outputs
		in the regression suite (for better).  
		TODO: clean-up commit flag (next).  
	  TODO: PRS rule loops -- and that will conclude this branch.


2005-10-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-05:
	  AST::range_list::portorder_check_meta()
		loop termination condition fixed (independent of is_const).
	  Nested prs expression loop test cases added to parser/prs.


	* ARTXX-00-01-04-main-00-60-PRS-02-04:
	  Enabled bunch of new create/alloc test cases in parser/param.
	  In simple_meta_value_reference<>::assign_value_collection():
		one-line bug fix: now call unroll_resolve_dimensions(), duh!


2005-10-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-03:
	  Enabled assigning and persistence of definition local 
		parameter variables.  
	  Added unroll_context parameter to simple_meta_value_reference<>::
		assign_value_collection() to handle definition-local 
		variable assignments, called by expression_assignment<>::unroll.
	  value_array<>::lookup_value added code to catch cases 
		where value array is loop variable or
		definition-local variable.  
	  Committed USE_LOOP_SCOPE and cleaned up "AST/parse_context.cc"
	  In unroll_context::lookup_actual, check that argument is
		loop variable before calling lookup_loop_var.  
	  TODO: enable create tests in parser/param/.  
	  See new entries in TODO.txt.


	* ARTXX-00-01-04-main-00-60-PRS-02-02:
	  Significant development of loops in the front-end.  
	  includes many minor bug fixes (exhibited by testing loops).  
	  id_expr::check_meta_reference()
		calls qualified_id::lookup_instance instead of check_build
		to guarantee proper unqualified lookup to catch loop vars.  
	  AST::qualified_id methods are all non-virtual (no children).
	  Finished AST::PRS::op_loop::check_prs_expr().
	  Added loop_var_stack to parse_context, now used in looking
		up unqualified identifiers.
		(TODO: commit USE_LOOP_SCOPE, clean up parse_context.cc)
	  Now catch errors in PRS::rule_set::unroll().  
	  Implemented static meta_range_expr::make_explicit_range().
	  The way to detect a loop variable is by checking that
		it is not contained by its parent scopespace.  
	  Improved entity::PRS::*::dump to take dump_context arguments,
		but expressions don't use context yet to leverage this.  
		Noted in "Object/ref/instance_reference.cc" dump_briefer.  
	  Factored out PRS::*loop::* code into expr_loop_base::*
		(clean up old code)
	  Hacked in catch for loop variable resolution in
		simple_meta_value_reference<>::unroll_resolve_value, 
		using unroll_context_value_resolver policy.  
	  Implemented unroll_context::lookup_lop_var().
	  unroll_context::get_target_footprint() now looks up chain
		of parent contexts.  
	  TODO: more crazy loop tests, nesting...


2005-10-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-PRS-02-01:
	  Initial groundwork for enabling PRS loop expressions.  
	  TODO: modify parse_context to handle loop scopes.


2005-10-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-60-merged-cflat-01-11:
	  Merged cflat branch to trunk.  
	  Also includes critical library fixes in util/.  


2005-10-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-11:
	  Canonical names are now chosen to be the shortest, in terms of 
		hierarchy depth.  Ties are arbitrarily broken at the moment.  
		Test cases have been updated with newer canonical names.  
	  Branch is ready to commit to trunk.  


	* ARTXX-00-01-04-main-00-59-cflat-01-10:
	  Hierarchical dump of instances and definitions is now binned
		and alphabetized to produce stable dumps, 
		without depending on hashing.  Tons of test-expects updated.


	* ARTXX-00-01-04-main-00-59-cflat-01-09:
	  Fixed printing of instance_references' dump_briefer
		to use dump_hierarchical_name, using dump_flags::no_owner,
		and also implemented as virtual function so 
		member instance references would be printed correctly, 
		not just the leaf-most instance name of hierarchy.  
		(was only exhibited in intermediate-form dumping)
	  Library fix for persistent_object_manager summarized
		in "src/util/ChangeLog", eliminating false positive warning.  
		Also minor clean-up in "ptrs_functional.h"
	  Added a few new test cases.  
	  TODO: sort member dumping of definitions for deterministic ordering.


2005-10-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-08:
	  Critical library fix to "util/ptrs_functional.h",
		details in "src/util/ChangeLog".  (g++-4.0.2-ism)


2005-10-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-07:
	  cflat prsim works for first set of trivial test cases.  
	  Augmented test suite Makefiles for cflat prsim testing.  
	  Updated TODO list... arg.
	  Implemented cflat mode (functor-style) registration.  
	  Committed UES_SCOPE_ALIASES and USE_PRS_FOOTPRINT devel-switches. 


	* ARTXX-00-01-04-main-00-59-cflat-01-06:
	  Working cflat prsim with prs, so far...
	  TODO: extensive testing of cflat prsim -- test suite.
		defining other cflat modes. 
	  Implemented production_rule_substructure::cflat_prs().


2005-10-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-05:
	  Preliminary work for unrolling production rules of processes.  
	  Introduced PRS::footprint as tracker for rules and expressions
		within scope of each canonical process type.  
		(Not used by prs-less meta-types)
	  As a result, all footprint grew in size by at least 8B, 
		accounting for PRS::footprint addition.  
		(Object binary size grew for all definitions.)
	  Privatized helper functorns of PRS::prs_expr.  
	  Implemented prs_expr::unroll() and PRS::rule::unroll()
		using new PRS::footprint.  
	  Minor fixes described in util/ChangeLog.  


2005-09-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-04:
	  I think cflat prsim (connect only) is working.  Only spot-checked.
		Implemented recursive alias dumper.  
	  Drafted some early cflat options.  
	  TODO: implement some preset modes (prsim, prlint, connect...)


2005-09-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-03:
	  Removed unnecessary ind argument from global_entry::dump_*.
	  Implemeted collection of hierachical aliases with sets of
		strings of aliases per scope.
	  Extended dump_flags, added new static const member.  
	  module::create_unique() now temporarily imports the scopespace
		of all namespace, copying pointers to the top-level 
		footprint's instance_collection_map.  The map ss only needed
		for the sake of evaluating aliases.  Before function returns
		The collection map is cleared, because it cannot be maintained
		persistently, due to various invariants and pointer 
		incompatibility.  
	  Implementers of scopespace::dump_qualified_name now all require
		an additional dump_flags argument for formatting.  
	  All footprints now preserve singletons in their scope_aliases
		list for efficient generation of alias names for cflat.  
		As a result, object binaries have grown a bit in size
		per footprint (complete definition, module).
	  TODO: iterator over aliases and print for cflat connect!


2005-09-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-cflat-01-02:
	  We reuse the port_alias_tracker to track all aliases in 
		a scope for each footprint, which is useful for
		instantaneous alias lookup.  The extra information
		will be used to print cflat connect aliases.  
		Aliases are also collated at the top-level.
		Consequentially, the object binaries grow as a result
		of this new addition.  Tests updated accordingly.  


	* ARTXX-00-01-04-main-00-59-cflat-01-01:
	  This branch is devoted to cflat -connect functionality.  
	  This initial revision set up the method calls and basic interface.  
	  TODO: keep track of all aliases, in addition to port aliases.  


2005-09-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-59-merged-unique-02-15:
	  Branch summary: Implemented 'alloc' pass which creates
		global hierarchical structures for unique instances.  
	  Includes critical bug fix in unrolling.  
	  Reasonably tested -- bunch of test cases added and hand-verified.  
	  This revision will allow the continuation of cflat.  
	  Next branch for cflat connect.  


2005-09-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-15:
	  Some clean-ups as a result of checking other compilers and
		platforms.  
	  Removed util/obsolete headers and tests from distribution, 
		although they remain in CVS.  


	* ARTXX-00-01-04-main-00-58-unique-02-14:
	  Introduced dump_flags structure for customizing hierarchical dumps, 
		will be extremely useful for cflat formatting.  
	  Extended instance alias dump to take a dump_flags argument.
		Re-using dump_hiearchical_name to print the flattened
		canonical_names after unique allocation.  
	  This branch is mature, and ready to merge to trunk.  


	* ARTXX-00-01-04-main-00-58-unique-02-13:
	  No code revision, just more test cases...
	  We interrupt test-case writing to add more information to 
		the global state dump: canonical name field.  
	  TODO: update hackt-alloc-expect.sh test script.  


	* ARTXX-00-01-04-main-00-58-unique-02-12:
	  BUG FIXED: forgot to remove footprint pointer from unroll_context
		in the tail-recursive path of member instance reference
		resolution during unroll phase.  (one-line fix)
	  Added test-cases process/107,109.


2005-09-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-11:
	  No code revision, just added a handful of tests to parser/process/.
	  ... and stopped because critical BUG was discovered in cases:
		process/107,109(reduced)
		Must fix this before proceeding.  


	* ARTXX-00-01-04-main-00-58-unique-02-10:
	  Breaking news!
	  Recursive hierarchical subinstance allocation seems to be working
		for the existing test-cases, but more test cases are needed.  
		TODO: test cases with deep recursion of private subinstances.  
	  Re-ordered global_entry reconstruction ordering because footprint 
		restoration depends on parent_id and local_offset fields.


2005-09-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-09:
	  Merely clean-up of previous revision.  


	* ARTXX-00-01-04-main-00-58-unique-02-08:
	  Fused footprint_frame allocation and assignment together 
		into one method call.  (TODO: clean up conditional)
	  More test cases added for state allocation.  


	* ARTXX-00-01-04-main-00-58-unique-02-07:
	  Have allocated-state persistence working for top-level allocated
		public ports.  Need to do recursive allocation, 
		and persistence throughout deep hierarchy.  
		Footprint pointers are effectively saved and restored
		through use of canonical types.  
	  State printing/dumping enhanced.  
	  First batch of state allocation test cases in parser/process
		are working.  See also test/ChangeLog.
	  TODO: enable deep recursion for private subinstance allocation.  


2005-09-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-06:
	  Factored out allocation into separate compilation phase 'alloc'.  
		Run 'hackt alloc' to allocate unique global state.  
	  Eliminated unused state_manager argument from construct_port_context.
	  Updated sub-program usage messages.  


2005-09-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-05:
	  Have top-level state allocation and frame assignment working, 
		need to enable recursion.  Currently result is visible
		only from the stdout dump of hackt create <unrolled obj>.
	  TODO: enable deep recursion for private subinstance allocation.  
	  TODO: introduce alloc/cflat phase.  


2005-09-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-04:
	  Added port_context class as a helper for passing globally
		allocated ids in a structure down through recursive
		structure instantiations.  
	  Global enrty pool allocator now reserves the 0th entry of each
		type in advance as a NULL placeholder.  
	  Partial implementations of subinstance expansion and 
		footprint_frame assignment.  
	  TODO: guarantee footprint pointer pseudo-persistence
		and reconstructibility.  


2005-09-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-03:
	  Implemented persistence (partial) and dumping of global
		state structures. 
	  Haven't enabled global creation yet.  


2005-09-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58-unique-02-02:
	  Replaced the silly getter template-specialized functors 
		with template base classes in footprint and port_alias_tracker. 


	* ARTXX-00-01-04-main-00-58-unique-02-01:
	  This branch is for creating top-level global unique instances.
	  This revision set up part of the framework for traversing the 
		hierarchy to allocate unique instances in the global
		pool, now managed by the state_manager class.  
		The state_manager resembles a footprint, except that the
		entries are not just placeholders.  
	  Code execution has not changed, because the final allocation
		has not been enabled yet.  


2005-09-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-58:
	  Split "Object/inst/instance_collection.tcc" into
		"Object/inst/instance_alias.tcc".
	  Replaced wasteful connection to generic multikey in trace_alias
		using native container key_type directly.  


2005-09-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-57:
	  Organization only, no code revision.  


	* ARTXX-00-01-04-main-00-56-merged-footprint-01-36:
	  Major branch merge (-footprint-01-36), summary:
	  Each complete type now maintains its own footprint (new class), 
		so templated definitions will have multiple footprints, 
		one for each set of parameters with which it is instantiated.
		Footprints are made as each type 'plays' its sequential scope.  
	  Footprints contain the unique-creation information for each
		structured type.  For definitions, they describe 
		(without external context) the uniqueness of the subinstances
		of the internal structure.  The unique instances, however, 
		are merely empty placeholders for actual state, because
		external connections may change the actual footprint.
		Even the top-level module has a footprint.  
		TODO: replay internal subinstance aliases top-down
			in the final state-allocation.  Extend subinstance
			managers to include non-ports.  
	  Introduction of canonical_types for tighter type-control checking.  
		Instance collections now use these instead of 
		derivative of fundamental types, which are established
		upon instantiation.  Relaxed parameters are still
		maintained in each alias's parameters (if applicable).
		Results in far fewer run-time checks.  
	  Creation of dependent types of subinstances (on-demand) before
		super instance types are created.  Type creation is managed 
		through canonical_types and their corresponding footprints.  
	  Efficient internal alias replay mechanism to make implicit
		internal aliases explicit in hierarchy.  
	  includes a few critical bugs fixes in util/ library.


2005-09-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-36:
	  Clean-up phase 2: committed PHYSICAL_PORTS, USE_PORT_ALIAS_TRACKER
		(in footprint), and CREATE_DEPENDENT_TYPES_FIRST.  
		"Object/devel_switches.h" is empty once again.  
	  Enhancements: trace_alias argument const-ified, 
		instance_array::create_dependent_types uses faster 
		call to internal_alias_policy::connect when collection's
		canonical_type is already strict.  
	  Branch is mature, ready to merge to trunk.  


	* ARTXX-00-01-04-main-00-55-footprint-01-35:
	  Clean-up: committed USE_NEW_REPLAY_INTERNAL_ALIAS, 
		obliterated traces of port_alias_signature (removed).
		600+ LOC deleted, good riddance.  
	  More clean-up coming...


	* ARTXX-00-01-04-main-00-55-footprint-01-34:
	  2-for-1 BUGS SLAIN: process/086,099 fixed.  REJOICE!
	  Introduced completely new replay mechanism for replaying
		internal aliases, using just the port_alias_tracker.  
		Currently enabled by USE_NEW_REPLAY_INTERNAL_ALIAS switch.  
	  Completed implementation of port_alias_tracker methods.  
	  Few tests updated because different canonical names were chosen
		by the new algorithm (we don't care yet).  
	  TODO: erase traces of port_alias_signature, now obsolete.
	  TODO: expurgate hundreds of lines of dead (switched off) code, 
		rendered obsolete by new connection replay mechanism.  
	  Status: branch is in good shape! just needs severe cleaning.  


2005-09-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-33:
	  Wrote port_alias_tracker intended as replacement for 
		port_alias_signature.  After evaluating a complete type's
		unique instances (create) the definition analyzes
		the port instance collections for aliases among the ports.  
		Aliases are recorded in the tracker.
	  Each footprint contains a port_alias_tracker, which affects
		the binary object sizes for all footprint.  
		Test dump outcomes have been updated to reflect this.  
	  TODO: replay the instance aliases using the trackers,	
		instead of the broken mechanism currently in place.  
	  Note: 1.5 days of code was abandoned, but saved onto the
		ARTXX-00-01-04-main-00-55-footprint-01-32-broken branch.  


2005-09-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-32:
	  Test cases added only, no code revision.  
	  The no-known-critical-bug status didn't last very long.
	  BUG: process/086.in (create: wrong top-level allocation, 
		failure to replay internal connection)
		Check out the port-alias walking code.  
	  BUG: process/099 (fatal) -- mismatch in retrace hierarchy


2005-08-31	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-31:
	  BUG FIXED: process/066.in -- unconditional assertion (failed before)
		weakened to a conditional assertion in
		instance_alias_info<>::inherit_subinstance_state()
		in "Object/inst/instance_collection.tcc".
	  Sprinkled with more debugging code.  
	  Who's you're bug-slaying daddy?
	  TODO: write TONS of test cases before cleaning up code.  
	  Status: no known *critical* bugs in this branch.


	* ARTXX-00-01-04-main-00-55-footprint-01-30:
	  BUG FIXED: process/066d.in -- now port_alias_signature is used
		recursively to replay internal collections.  
		Previous mistake was that was only applying port alias
		signature of leaf-most types, thereby missing connections
		imposed by parent types.  (Now we only use the parents'
		port alias signatures.)  
	  TODO: BUG process/066.in is next on the hit list.  
	  TODO: massive clean-up after bug fix.  


	* ARTXX-00-01-04-main-00-55-footprint-01-29:
	  Victory!!!  (almost) 
		Bottom-up recursion of connecting internal port aliases
		seems to work, even with some crazy cases.  
		Enabled creating of dependent types first.  
	  Added bunch of elementary test cases for replaying internal aliases
		in process/066*.in
	  BUG FIXED: in looking up instance_collection's corresponding
		alias, using the alias's key_type (special case for D = 1!)
		fixed in instance_alias<>::retrace_alias.
	  TODO: massive clean up of debugging code littered
		in "Object/inst/instance_collection.tcc".
	  TODO: write a TON of test cases, start to involve definition-local
		non-port aliases (which should be skipped).  
	  KNOWN BUGS to FIX: process/066 (fatal), 066d (wrong),
		connect/116, 117 (advanced handling of relaxed params)


2005-08-29	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-28:
	  Still working towards bottom-up construction of dependent types.  
		Inserted a pass before creating unique (after unroll)
		to create dependent types bottom-up.  Currently disabled.  
		Much stacktrace debugging needed.  
	  Added class_trait: can_internally_alias, for which it's
		currently only true for process types.  


2005-08-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-27:
	  Implemented (untested) routines to retrace aliases in internal 
		(definition-local) contexts in external contexts for the 
		sake of replaying internal aliases externally.  
		see instance_collection<>::replay_internal_alias, 
			retrace_collection, and retrace_alias.  
	  TODO: insert dependent type creation pass before create_unique, 
		this will handle bottom-up creation of substructure types
		and replay their internal port aliases in the 
		external context.  


2005-08-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-26:
	  Updated port_formals_manager and subinstance_manager to 
		use physical_instance_collection rather than the 
		more general instance_collection_base.  
		This results in tighter type constraining (good).  
	  Introduced auxiliary class port_alias_signature, 
		constructed from port_formals_manager and footprint.  
		Going to use this to replay aliases up the
		instance hierarchy *before* creation.  


2005-08-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-25:
	  Cleaned up all conditional switches from this branch.  
	  TODO: hierarchical import/exporting of aliases per complete type.  


	* ARTXX-00-01-04-main-00-55-footprint-01-24:
	  Bug fix: only check relaxed actuals
	  Enabled definition footprint creation!
		Each complete type now creates (instantiates) its own
		footprint, expanded into placeholder pools.  
	  Tests added and updated.  
	  TODO: hierarchical instance allocation with 
		definition import/export.  


2005-08-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-23:
	  Set up type-merge for canonical types prior to
		creating definition footprints.  
	  Implemented definitions' create_complete_type(), 
		with only process_definition's being non-trivial.  
	  TODO: consistency check for propagated relaxed actuals
		against those of an already complete type.
	  Test updates: some connections tests which passed before 
		now fail (progression!) rejecting instantiation of
		objects without complete (strict) type, 
		after merging relaxed actuals (where applicable).  
	  TODO: enable create_definition_footprint in
		"Object/inst/instance_collection.tcc"
	  TODO: write import/export interface for globals state ID
		assignment.  


2005-08-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-22:
	  Status: each definition can unroll it's own sequential scope!
		Significant progress shown in this revision.  
	  Implemented meta_expr's is_template_dependent().  
	  Bug fixed: simple_meta_instance_reference_base now checks
		for template dependence when deducing packed-ness
		if referenced instance collections.  
	  Bug fixed: in resolving member instance reference, 
		only use footprint in the lookup for the top-most level
		of the scope, not any of the members.
		(same principle applies to
			simple_member_instance_reference::connect_port)
	  Bunch of new test cases based on existing one, 
		but onw definitions have internal instantiations
		and connections to unroll.  
		Mostly added to parser/process.
	  Minor updates to error messages during unroll.  
	  TODO: bottom-up footprint construction during the create phase, oooo!


	* ARTXX-00-01-04-main-00-55-footprint-01-21:
	  Breakthrough: recursive type unrolling is enabled!
	  We now also dump process-definitions' footprints.  
		No creation (state allocation) is done yet.  
	  From now on, types must be defined before they can be declared
		or instantiated.  But where, then, are prototypes useful?
		Consider revoking this policy until creation time?
		Test *inputs* were updated to give definitions
		empty bodies for the sake of unrolling tests.  
		(Consider compiler flag to switch behaviour.)
	  Unroll context now make full use of footprint pointer
		during recursive type unrolling.  
	  TODO: recursively create-unique footprints!
	  TODO: spawn off more test cases off of existing ones
		with definition-internal connections.  
		Actually put instance stuff in the definitions.  


2005-08-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-20:
	  devel-switch: USE_UNROLL_CONTEXT_FOOTPRPINT, currently enabled
		but not yet tested because
		process_definition::unroll_complete_type is not yet enabled.  
		That's next on the TOOD list.  
		Added code to conditionally resolve instance_collection
		depending on whether or not footprint (of unroll_context)
		points to a valid footprint.  If not, then use global
		top-level instance collection, as done in the past.  
	  *_type_reference::make_unroll_context now all private.
	  instance_management_base::unroll_* all take 
		const unroll_context& argument now.  


2005-08-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-19:
	  Enabled process_definition (complete type) registration, but
		not unrolling yet.  
	  Tests updated because registered types (empty footprints)
		are all maintained persistently in objects.  
	  Added interface to import scopespace instance collections
		into footprint's instance_collection_map, 
		the local workspace for unrolling and creating placeholders.  
		Had to implement a virtual partial deep copy-constructor
		in instance_collection_base and its ultimate children
		(array and scalars) for physical and parameters.  
	  also list_vector copy-constructor bug fix in util library.
	  Next: enable complete_type (process_definition) unrolling
		and dumping.  


2005-08-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-18:
	  Enabled persistence of the footprint manager in process_definition.
		footprint_manager now saves away hashtable of
		shadow-owned instance collections (physical and parameter).
	  Object binary size for process_definition increased by 8B.  
		Unroll and Create tests have been updated accordingly.
	  Eventually commit the USE_FOOTPRINT_MANAGER switch
		in "Object/def/process_definition.h".
	  TODO: modify and use unroll context for instance_reference
		translation.  


	* ARTXX-00-01-04-main-00-55-footprint-01-17:
	  NOTES: important discussion on implementation of definition-scope
		unrolling, pertaining to footprint management.  
	  Added definition interface methods for registering and unrolling
		complete types, called by
		canonical_type::unroll_definition_footprint.
		Everything BUT process_definition's implementation is no-op.  
		process_definition's unroll_complete_type is currently
		disabled until we fix up unroll/footprint management (NOTES).
	  minor: added ICE_NEVER_CALL macro to "common/ICE.*"


2005-08-19	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-16:
	  Valiant attempt to fix bug case parser/connect/120.in, but
		suspended for the time being.  Resolution: the issue is that
		relaxed actuals at leaf nodes of hierarchical instances
		and ports are not being propagated completely.  
		Doing so adds run-time to either the unroll or creation phase, 
		but this check would be necessary for type-correctness.  
		We're punting for now to return to more critical tasks.  
	  Added bunch of future useful methods for recursive actuals
		synchronization to "Object/inst/instance_collection.tcc".


	* ARTXX-00-01-04-main-00-55-footprint-01-15:
	  Hierarchical state placeholder allocation bug fixed.  
	  Case parser/connect/120.in expects to create-fail but doesn't
		new bug to be fixed, related to actuals checking, 
		needs to be done recursively in ports.  
	  Test-case updates: the order of state allocation has been
		shuffled due to the introduction of the upward 
		super-instance traversal prior to self allocation.  
	  TODO: address new bug, aiming to perfect alias actuals
		type checking of relaxed parameters at creation/connect time.
		Then start unrolling footprints of complete types, 
		which was the end-goal of this branch.


	* ARTXX-00-01-04-main-00-55-footprint-01-14:
	  Summary: in the middle of fixing the recent known bug (ICE).
		Setting up upward-recursive super-instance state allocation
		traversal to break the ICE.  Ha ha.  
		New code calling instance_alias_info::create_super_instance
		is currently disabled and pending other revisions.  
		So all current tests still behave as before.  
		old allocate_state has been renamed __allocate_state
		and does NOT have upward recursion, it is intended to be
		called recursively top-down.  The *new* allocate_state
		will conditionally call create_super_instances on aliases
		in the ring.  
	  Make.hchk-tail.am: compile only (-c) don't link -- 
		faster header check.


2005-08-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-13:
	  NOTES: added paragraph about when/why one should merge aliases
		rings across the hierarchy, related to relaxed actuals.  
	  Reimplemented connection and compare methods in 
		instance_alias_info (and actuals/empty parents), 
		see checked_connect_port and checked_connect_alias
		static member functions.  
		Blocks of code replaced in alias_connection::unroll and
			simple_meta_instance_reference::connect_port.  
	  Tweaked ICE macros.  
	  TODO: merge null-relaxed actual rings of aliases for alias_connection
		(calls instance_alias_info::checked_connect_alias)
	  TO FIX: discovered bug, in reduced test-case: parser/connect/118.in.
		Solution is in the comments of the input file:
		Prior to creation, follow up the top-most super-instance(s)
		of the referenced alias in the port-hierarchy and create 
		from there, top-down.  
	  TODO: verify actuals being correctly checked during create-unique
		phase.  


2005-08-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-12:
	  Cleaned-up obsolete code, updated some comments.  
	  Next: check actuals during hierarchical connections
		and merges.  Write some test cases for it!


	* ARTXX-00-01-04-main-00-55-footprint-01-11:
	  Maintaining new invariant:
		For all aliases types that can have relaxed actuals, 
		we keep an 'all-or-none' policy: either all aliases
		in a ring have equivalent actuals, or all have null.  
		This eliminates the need for having to search rings
		for actuals, and will accelerate relaxed algorithms.  
	  Replaced (static) instance_alias_*::compare_and_update_actuals
		with (member) compare_and_propagate_actuals.
	  Added verbose comments to alias_connection::unroll().  
	  A few tests updated: because as connections are made
		relaxed actuals are propagated.  
	  Next: clean-up and comment.
	  Next-next: check actuals during hierarchical connections
		and merges.  


2005-08-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-10:
	  NOTES: long entry about connection checking during
		create-unique phase, concerning relaxed alias actuals.  
	  Amended the hierarchical unique creation process with
		checking of relaxed actuals as connections are determined.  
		One set of valid actuals will propagate contagiously
		during connection.  
	  Implemented symmetric actuals compare-and-update
		between two instance_alias_info's.  
	  Create-dump now prints alias actuals associated with 
		the state placeholder's back-reference alias, this way 
		we know immediately if the type is complete.  
		(small handful of tests updated.)
	  state_instance classes: no longer have state_instance_base
		parent classes because they are JUST placeholders now, 
		i.e. they contain no actual state.  
		Can clean-up the EMPTY_PLACEHOLDER_STATE_INSTANCE
		conditional in "Object/inst/state_instance.h".
	  good_bool return values given to many state-creation methods.  
	  During creation we now propagate (synchronize) actuals between
		aliases in the hierarchy.  However, the omniscience of
		actuals in each ring is not yet guaranteed, which brings us
		to the next task:
	  Next revision: address (NOTES) when alias actuals should be 
		propagated around the alias ring (efficiently?).
		Is there some invariant we should maintain during unroll,
		like all or none (in each ring)?


	* ARTXX-00-01-04-main-00-55-footprint-01-09:
	  Cleaned up USE_MODULE_FOOTPRINT, committed to 1.


	* ARTXX-00-01-04-main-00-55-footprint-01-08:
	  Module now contains a footprint!
		Instead of allocating state in global pools, it now
		registers them in its footprint, 
		which contains instance pools.  
	  Next revision: clean-up conditional USE_MODULE_FOOTPRINT, commit:1.
	  Next-next revisions: expand defined types recursively, 
		as they are needed, definitions will unroll into
		their footprints mapped by the footprint manager.  


2005-08-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-07:
	  Configure-mania!!!
	  Added ton of C++ header tests to configure.ac, and applied them
		to the util library headers.  Most changes in util/.
	  A few insignificant fixes in the rest of the source code, 
		mostly cleaning up unused variables.  
	  Preparing to replace global instance pool with footprint's pool
		in the module class.  


	* ARTXX-00-01-04-main-00-55-footprint-01-06-merged-canonical-07:
	  Merged complete rework of canonical types from -canonical branch.
	  Summary: canonical_types (templated) now use resolved definitions
		and constant parameter lists, instead of relying on
		old fundamental_type_reference derivatives and run-time checks.
	  Object binary format has been updated as a consequence.  


2005-08-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-07:
	  Clean-up phase 2: removed USE_CANONICAL_TYPE conditional.
	  Status: branch is ready to merge to parent.  


	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-06:
	  Clean-up phase 1: removed all conditionals except USE_CANONICAL_TYPE.


	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-05:
	  Pruned type-equivalence functions (switched off to unused).
	  Pushed instance_collection_base::template_formal_equivalent
		to param_value_collection member function.  
	  Updated prototypes of
		instance_collection_base::port_formal_equivalent() and
		formal_size_equivalent() to use const& instead of ptr.
	  Removed fundamental_type_reference must-equivalent methods.  
		Must-equivalence is reserved for resolved canonical_types.  
	  TODO: clean up and commit switches in "Object/devel_switches.h"
		and "Object/type/fundamental_type_reference.h"
	  Status: branch is nearing maturity.  


2005-08-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-04:
	  Migrating old use of make_canonical_fundamental_type_reference
		in favor of new make_canonical_type.  
	  Replaced (switched) non-virtual fundamental_type_reference::
		equivalence functions with pure virtuals, 
		implemented in children classes, each using own
		make_canonical_*_type.  
		(No more virtual make_canonical_fundamental_type_reference)
	  Partially implemented canonical_type<>::unroll_port-instances, 
		to the same extent of completion as before.  
		Implementation uses policy class for pure specialization.  
	  unroll_context::template_args is now template_actuals
		instead of pointer hitherto because new canonical_type's
		make_unroll_context creates a temporary, and thus
		cannot outlive the reference.  
	  Added "common/devel_switches.h" (project-wide) and
		"Object/devel_switches.h" (module-wide) headers
		for convenient development preprocessor switches.  
		(see comments therein for usage.)
		Much code commented out by switches in this rev.  


2005-08-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-03:
	  Not a revision: just a tag for updated tests in the top test/ dir.
		This revision should make check / distcheck successfully again.


2005-08-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-02:
	  Revisions to make code "work" i.e. produces the same 
		test results (information-wise), but the binary
		objects will differ.  This snapshot only checks in the
		code without updating the tests (so we can come back
		and check the diffs conveniently).  
	  Summary:
		Had to specialize the canonical_generic_chan_type
			to accommodate both user-defined and generic 
			channel types.  Later, should really split them off, 
			but not important for now.  
		Redefined const_param_expr_list::dump_range(): argument 
			indices are now half-open instead of inclusive.  
		datatype_instance_collection::establish_collection_type()
			implemented in a switch-case fashion as a 
			temporary workaround.  
		Implemented canonical_definition_load_policy to allow 
			for the built-in-definition-interception hack 
			documented (and condemned) in
			data_type_reference::load_object_base().
			Specialized definition appears in
				"Object/type/canonical_type.cc"
		Fixed the FINISH_ME macro in "common/TODO.h".


	* ARTXX-00-01-04-main-00-55-footprint-01-05-canonical-01:
	  The goal of this branch is to be able to use these new 
		canonical types to trigger postorder recursive footprint 
		generation as each type is unrolled/created.
	  NOTE: This branch snapshot is unstable: it barely compiles
		and is certain to break many tests.  I just had to commit 
		these changes to save away 1000+ LOC, untested.
		Warning: not all new revisions are wrapped in 
		#if USE_CANONICAL_TYPE -- sloppy me.  
	  Summary: implemented (enabled) true canonical type structures, 
		the replacement for generic fundamental types in 
		instance collections.  Most affected are instantiation
		statements, instance collections, and their implementation
		policies.  Added whole new set of canonicalization methods
		to definitions and type-reference classes, redundant for now, 
		intended as a replacement for the existing ones.
	  Renamed fundamental_type_reference::make_canonical_type_reference
		-> make_canonical_fundamental_type_reference
		to distinguish from the new ::make_canonical_type.
	  Classification tags have been given parent_type member typedef.  


2005-08-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-05:
	  Micro commit to synchronize a few added files before
		sub-branching for some heavy renovation.  
		Type canonicalization needs some serious work.  


2005-08-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-04:
	  More preparation for introducing canonical_type as the 
		type parameter for instance_collections.  
	  Striving to give canonical_type same functional interface
		as fundamental_type_reference for ease of transition.


2005-08-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-footprint-01-03:
	  More untested implementation of footprint_manager facilities.  
	  Preparing to add footprint_manager persistence to 
		process_definition.  
	  TODO: as each canonical type is visited during unroll,
		register the entry in the footprint_manager
		of the canonical definition.  


	* ARTXX-00-01-04-main-00-55-footprint-01-02:
	  Made instance_pool class more resuable to footprint class.  
	  More elaboration of footprint class.  
	  Created Object/inst/*_instance.h headers for lightweight use
		in other headers.  
	  Added instance pool chunk sizes to class_traits.  


	* ARTXX-00-01-04-main-00-55-footprint-01-01:
	  This branch is for developing alias and creation footprints
		per complete type, to be used in hierarchical state
		construction.  This first revision is setting up
		some files for upcoming modifications.  
	  Going to use const_param_expr_list as the sorting key for the
		footprint_manager.  We've defined the < operator
		for const_param classes.  


2005-08-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-55-merged-macros-02:
	  Merged branch.


	* ARTXX-00-01-04-main-00-54-macros-02:
	  Added ICE module and macros to the common/ directory.  
	  From now on, use ICE(...) for internal compiler errors
		in this project.  


	* ARTXX-00-01-04-main-00-54-macros-01:
	  This branch is for cleaning up some debugging macros project-wide.
	  The first revision cleaned up STACKTRACE_* (DTOR, PERSISTENT...)
		macros: _PERSISTENT was standardized with 
		util/persistent_object_manager.tcc
		and _DTOR and _CTOR were standardized in "util/stacktrace.h".
		Many source files were cleaned up as a result.  


2005-08-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-54-merged-unique-01-10:
	  Merged -unique-01 branch (-10).
	  Summary: implemented unique state allocation after unrolling.  
	  Includes some fixes in the util library as well.  
	  TODO: cflat


2005-08-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-53-unique-01-10:
	  Fixed bug in port state allocation:
		ports may be aliased to each other, thus we must process
		aliases' state allocation, and then follow up with
		allocation for the remaining unaliasaed ports.
		See comment in instance_alias_info<>::allocate_state().
		Added new test cases to check for correct behavior:
			parser/connect/111,112,113.in
	  Some gcc4 happiness patches in this branch's new files/methods.  
	  Cleaned out USE_INSTANCE_INDEX conditional.  
	  Branch is nearly mature.  


	* ARTXX-00-01-04-main-00-53-unique-01-09:
	  Fixed bug for connect/031b.in: forgot to propagate
		instance_index copyes to aliases during merge_allocate_state.
	  TODO: clean up USE_INSTANCE_INDEX macro (commit)
	  Status: branch is nearly complete, well-tested.
	  TODO: more test cases in connections.  


2005-08-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-53-unique-01-08:
	  Implemented recursive state allocation of instances and aliases.  
		Updated several related method prototypes.  
	  Enabled a bunch of "hackt create" test cases in test suite.  
	  Currently working on fixing bug exhibited by parser/connect/031b.in.  


	* ARTXX-00-01-04-main-00-53-unique-01-07:
	  Bug fixed in util/ring_node.h.
	  Fixed alias iteration in instance_alias_info::allocate.
	  Enabled most test cases that don't require recursive expansion.  
	  TODO: recursive subinstance state creation.  


2005-08-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-53-unique-01-06:
	  Added state manager, whose responsibility is managing 
		the global state pools (static member pools in various
		state_instance classes).
	  Implemented dumping of created state, just prints canonical alias.  
	  Implemented creation state persistence.  
	  Enabled unique state creation! (without recursion)
		So far basic tests look good, but no connections 
		have been tested yet.  
	  Corrected initialization of instance_pool constructor, 
		call set_chunk_size rather than pass to parent ctor.  
		Implemented an allocate that takes a value to assign.  
	  TODO: test cases with alias connections.  


	* ARTXX-00-01-04-main-00-53-unique-01-05:
	  Added Object/inst/instance_pool.{h,tcc}:
		wrapper around util::list_vector for state allocation.  
		Result of ::allocate is an index into the list_vector.
	  Added Object/inst/state_instance.{h,tcc}:
		Template class from which state instances are defined.  
	  Redefined  *_instance classes (in Object/inst/*_instance_collection.h)
		in terms of state_instance template class.  
	  Updated instance_alias_info<>::allocate_state to use
		instance_pool's allocation.  


2005-08-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-53-unique-01-04:
	  Update all *_instance classes: no longer derived from persistent
		because they will be managed differently.  
	  instance_alias_info's instance (ref-count) pointer has been 
		replaced with an integer index for indexing into 
		allocation array of state info (pool).  
		Binary object sizes remain the same because 
		sizeof(size_t) == sizeof(pointer).
	  Implemented back-reference saving and restoring for all instances.  
	  TODO: allocate and link instances to state.  
	  TODO: introduce static global list_vector pools for allocation.  
	  TODO: save and restore global state.  


	* ARTXX-00-01-04-main-00-53-unique-01-03:
	  NOTES: discussion on implementation of (instance) state allocation.  
	  Updated bool_instance and int_instance classes (tinkering).
		Prototype implementation of
		instance_alias_info<>::allocate_state().


	* ARTXX-00-01-04-main-00-53-unique-01-02:
	  Added some more utilities to libfangutil for integer types and
		traits.  


	* ARTXX-00-01-04-main-00-53-unique-01-01:
	  This branch is intended for development of unique-creation
		(state allocation).  This first revision just sets up 
		some empty function calls and outlines.  
	  Also improved hackt program registration.  


2005-08-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-53-merged-configtest-03:
	  Merge of -configtest branch.  


2005-08-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-52-configtest-03:
	  The reason for non-POSIX behavior of getopt on linux is because
		(according to the man-page) the default behavior is
		non-POSIX.  To enforce POSIX, the option string should 
		begin with a '+'.


	* ARTXX-00-01-04-main-00-52-configtest-02:
	  Makefile maintainence: factored out header-check functionality.  
	  Added getopt_test test script to TESTS.


2005-07-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-52:
	  Makefile.am: dummy.cc to force configure creation of .deps/
		directory for check-headers.  NOTE: make distcheck
		somehow did not catch this mistake.  


2005-07-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-51:
	  Replaced multiple executables with single consolidated executable
		"hackt" from which other programs are launched.  
	  Implemented sub-program dispatch system in "main/hackt.h"
		where each program registers itself with the main dispatcher
		through a standard interface.  
	  available commands in this release:
		compile, unroll, objdump, parse_test, and more!
	  Usage notes in README.
	  libart++ renamed to libhackt (convenience library).  


2005-07-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-50-merged-maintainence-10:
	  Merged all maintainence revisions.  
		Almost every file has moved, in an attempt to reorganize.  
		Object/ files all pushed into subdirectories, by category.  
	  Major Makefile.am rework.  


	* ARTXX-00-01-04-main-00-49-maintainence-09:
	  Added a few more READMEs.
	  No longer generate "yacc_or_bison.h", the #defines that used
		to be in there have been folded into the configure procedure
		in the generation of "config.h".


2005-07-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-49-maintainence-08:
	  Most remaining files in Object/ have been pushed into subdirectories:
		CHP, PRS -> Object/lang/
		object_base, namespace, scopespace, extern_templates, 
			index, util_types -> Object/common/
		const_collection -> Object/expr/
		template_formals_manager, port_formals_manager -> Object/def
		template_actuals_manager -> Object/type
		art_object_module -> module
		art_object_type_hash -> persistent_type_hash
	  TODO: write new front-end for executable dispatch, 
		using double-command format (like cvs).


	* ARTXX-00-01-04-main-00-49-maintainence-07:
	  Pushed Object/ (instantiation statement, instance_management, 
		assignment, connection, unroll_context) all into the
		Object/unroll subdirectory, basically everything that
		has to do with sequentially played statements.  
	  Added bunch of README files in subdirs.  
	  Removed a few obsolete headers and source units.  
	  Minor Makefile.am enhancements.  


	* ARTXX-00-01-04-main-00-49-maintainence-06:
	  Pushed Object/art_object_inst_ref* and _value_reference*
		into Object/ref subdirectory, and also split up 
		some of the base header files.  
	  Some Makefile.am rework, minimizing use of BUILT_SOURCES, 
		but still inevitable for one auto-header file.  


2005-07-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-49-maintainence-05:
	  Pushed Object/art_object_instance* into Object/inst/
		(except for instance_management_base, which is sequential.)
	  param_instance_collection -> param_value_collection
	  TODO: sequetial instance management -> Object/unroll, 
		instance/value references.  


	* ARTXX-00-01-04-main-00-49-maintainence-04:
	  Object/art_context.* -> AST/parse_context.*


	* ARTXX-00-01-04-main-00-49-maintainence-03:
	  This revision pushed Object/art_object_type_ref* into
		Object/type/ and split the headers into separate files.  
	  TODO: everything else in the previous TODO.


2005-07-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-49-maintainence-02:
	  This revision pushed Object/art_object_definition* into
		Object/def/ and split the headers into one class/file.  
		Actually resulted in smaller binaries, and probably
		sped up compilation.  
	  Also split scopespace class into "Object/art_object_scopespace.h"
	  TODO: type-references, art_context, instance_references, 
		instance_collections, instance_management.  


	* ARTXX-00-01-04-main-00-49-maintainence-02:
	  Major Makefile.am and cvsignore rework, as described in the
		root ChangeLog.  This Makefile.am now makes use of the
		project-wide definitions in Make.global.


2005-07-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-49-merged-connect-01-42:
	  Major merge to trunk, summary:
		Implemented unrolling of connections, what was left of
			alias-style and also enabled port-style connections.
		Implemented strict/relaxed template formals/actuals properly, 
			complete with may/must equivalence checking.  
		Implemented proper unroll-time parameter resolution through 
			unroll_context.  
		Implemented alias substructures for instantiating
			ports and subinstance hierarchies.  
		Member instance reference resolution complete.  
		Hierarchical connections through ports and subinstances
			are persistently maintained in the object files.  
		Includes a few critical util library fixes, 
			and a few enhancements (src/util/ChangeLog).
		Reverted back to single-phase unrolling.  
		Some major file re-organization in this series, 
			moving files around into subdirectories, 
			most notably the Object/expr and inst subdirs.  
	  As of this revision, all tests work as expected, 
		with the few known issues documented either in
		the test case or in the NOTES file.  


2005-07-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-42:
	  Cleaned up unroll_context::lookup_actual() as promised.  
	  Tested with traditional yacc to update test cases'
		expected outputs where they differ from bison's.  
	  Also cross-checked this revision with FSF gcc-4.0.1.
	  The grand merge coming up...


	* ARTXX-00-01-04-main-00-48-connect-01-41:
	  BUG fixed in expression equivalence checking:
		In simple_meta_value_reference::must_be_equivalent, 
		added case to check against scalar constant, duh!
		(Some debugging code added in the process.)
	  New test cases added: parser/connect/103..110.in
	  Tired of testing... going to clean-up and merge up.  


	* ARTXX-00-01-04-main-00-48-connect-01-40:
	  BUG discovered and fixed with new test cases in parser/connect.
		Was using index from lookup in the wrong context, 
		resulting in nonsense index for formal-to-actual translation.  
		Fixed in unroll_context::lookup_actual, 
		which needs a rewrite for clarity.  
	  Cleaned up some obsolete code.  
	  TODO: more test cases before trunk merge.


2005-07-19	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-39:
	  Port connections implemented, everything works on the first shot!
		Filled in port_connection::unroll_meta_connect().
		Most of the work is done in subinstance_manager::connect_ports,
		which calls meta_instance_reference_base::connect_port, 
		(pure virtual).
	  Enabled all the pending test cases in parser/connect, all work, 
		and have been hand-verified.  
	  Minor: instance reference lists use vector now, with reserve().  
		instance_reference methods now take const unroll_context&.  
	  Branch nearing maturity.  
	  TODO: rigorous test cases, and cleanup.  
	  

	* ARTXX-00-01-04-main-00-48-connect-01-38:
	  Remark: hierarchical alias connections (x.y = w.z)
		are deemed reasonably stable.  
	  Massive code cleaned up from recent revisions.  
	  Updated type_references' unroll_resolve, modeled after the
		process_type_reference's.
	  New monster test case parser/connect/031 verified by hand.  
		(That unblocks the last of the remaining
		member-instance-reference dependent test cases in that dir.)
	  TODO: enable port-connections.  


	* ARTXX-00-01-04-main-00-48-connect-01-37:
	  BUG cases process/064,065 fixed!  (and fixed well)
	  unroll_context: enabled chaining of scopes, just using
		another pointer to its own kind.
		In lookup_actual (*KEY*), automatically lookup
		in higher scopes where local ones fail to find.  
		Properly handles parameter-dependent-parameters
		in the same scope, such as the case with 
		default template argument expressions.  
		Also catches the dangerous self-reference case
		and proceeds properly.  
	  process_type_reference uses context chaining now to resolve types.  
		Everything else should follow (next revision).  
		Committing now to have a coherent snapshot.  
	  Code is a mess with debugging and comments, must clean up next rev.
		Some useless lookup functions must be removed.  
		Everything should go through unroll_context::lookup_actual().
		Removing unroll_context::resolve_meta_value_reference().
	  No outstanding bugs, after clean up, implement port connections.  


2005-07-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-36:
	  BUG cases process/061,062,063.in fixed.
	  Added unroll_context argument to all value_collections'
		resolve_value methods (indexed and non-indexed).
	  Updated NOTES with brief minutes of today's meeting.  
	  Added [] operator to const_collection, only returns scalar value.
	  In type_references' unroll_resolve(), favoring call to
		make_unroll_context over making a blank context
		and then applying the template_actuals_transformer.  
		This should clean-up the code some, make it easier to
		hunt down remaining related bugs.  
	  BUG: targeting process/064.in
	  TODO: finish this and enable port connections (trivial)


	* ARTXX-00-01-04-main-00-48-connect-01-35:
	  BUG process/060 fixed, but there is known inconsistency
		between process/data_type_reference's unroll_resolve
		implementations.  (In other words, I think it may be wrong
		and fragile.)  Haven't cause any regressions yet.  
	  Added unroll_context back to all type_references' unroll_resolve
		methods, as their necessity was demonstrated by this
		revision's fixed bug.  
		unroll_context also added to unroll_port, instantiate...
	  TODO: rework passing of formal-actual contexts in clean fashion.
	  BUG: process/061.in known to crash.  


2005-07-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-34:
	  BUG process/059.in squashed (simple scalar case only).  
		Added unroll_context argument to value_scalar::lookup_value.
		TODO: propagate change to array references, 
		in const_collection::lookup_value...
	  Some clean-up from previous revision.  
	  TODO: fix process/060.in, etc...
		in instantiation_statement::instantiate_port(), 
		in which type parameters refer to actuals.  


	* ARTXX-00-01-04-main-00-48-connect-01-33:
	  Reworked parameter assignment unrolling, value_reference, 
		and const_collection to re-use existing unrolling
		methods, and eliminate the eye-sore:
		resolve_values_into_flat_list, which pre-dates the
		introduction of const_collection and packed_array_generic.  
		Good riddance!  (still commented out)
	  TODO: address bugs process/059,060.in
		Will probably add context to lookup_value[_collection].  
	  Updated a few test outputs' error messages in test suite.  


	* ARTXX-00-01-04-main-00-48-connect-01-32:
	  BUG fixed re: process/057.in
		in instance_array<>::element_loader::operator():
		insert new element into collection BEFORE load_object_base, 
		to satisfy reconstruction ordering problem.  
	  New BUG: process/059,060.in:
		passing template actuals to ports of instances.  
	  TODO: more rigorous hierarchical connection testing.  


2005-07-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-31:
	  Bug fixes in progress.
	  Instrumented code with more stacktracing.  
		BUG FIX: proper copy-constructor for subinstance_manager.
		BUG FIX: fixed bounds check in subinstance_manager::
			lookup_port_instance().
	  instance_collection::instantiate_indices():
		Create empty first, then manually instantiate (recursive).
	  Added a few new test cases to process/ and connect/.
	  TODO: address bug exhibited by process/057.in


2005-07-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-30:
	  Implemented (untested) member instance reference unrolling.  
		Much if it is currently wrapped in #if ENABLE_MEMBER_UNROLLING.
		Commit after further testing.  
		Factored out common code in instance_reference and 
		member_instance_reference method definitions.
		Also added simple_meta_instance_reference_implementation<bool>
		policy class.  
	  Added Object/ref directory, the future home of all 
		instance- and value-reference classes and code.  
	  Implemented definition_base (and kids)::lookup_port_formal_position.
	  TODO: tons of testing...


2005-07-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-29-merged-subinstance-09:
	  Merged revisions from -subinstance (-09) branch.
		Summary: implemented recursive instantiation of
		subinstance, public ports of structured types, 
		adding substructure to select instance alias types.  
		Implemented more type-checking for channels, 
		and checking between connections and collections.  
		Also include one critical bug fix in the util library.
		Includes notes about some resolutions.
		Files moved around for re-organization.  
	  TODO: back to the original goal:
		member instance reference resolution and connection, and ports.  

2005-07-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-09:
	  Implemented a bunch of missing channel-type reference methods:
		resolve, canonicalize, equivalence.  (It's about time!)
	  Upgraded inst-stmt (channel) to use the default generic
		type-ref parent template, which means it may accommodate
		relaxed template actuals.  Channel instantiation statements
		grew in object size by 1 pointer (4B).
		Only tests in the test/parser/chp dir were affected and updated.
	  New basic channel instance and connection tests in:
		test/parser/channel/0{18,19,20,21,22,23,24}.in
	  More consistent error reporting in type-reference checking, 
		using fundamental_type_reference::type_mismatch_error();
	  Added workarounds for built-in channel-type equivalence
		comparisons to each (4) equivalence method
		(of fundamental_type_reference)
	  End of branch -- beam me up!


	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-08:
	  Demonstrated working hierarchical port instantiation.
	  Added dump_hierarchical_name to instance_collection_base
		and substructure_alias as a means of printing
		the hierarchical alias name, such as x[y].z.
	  Added scopespace::dump_qualified_name(ostream&) for convenience.  
	  instance_alias<>::dump_alias now calls dump_hierarchical_name
		instead of get_qualified_name.
		No existing tests were affected, since we hadn't tested
		hierarchy until now.  
	  Implemented substructure pretty-printing.  
	  This branch is nearing maturity.
	  TODO: test cases, test cases, test cases.  
		One new test case added for demo: test/parser/process/054.in


	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-07:
	  Critical library bug fixed in multikey_generic, 
		described in src/util/ChangeLog.


2005-07-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-06:
	  All type-references' unroll_resolve methods no longer
		have unroll_context as an argument; the contexts
		(translation from formal to actual) are all locally
		created w.r.t. the definitions.  
	  Fixed bug where I forgot to canonicalize typedefs before
		committing types to instance collections.  
		Example test case is test/parser/typedef/012.
	  TODO: enable recursive port instantiation.  


	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-05:
	  Added mechanism for recursively creating port instances
		in the public hierarchy, though not enabled or tested.  
		Too lazy to spill the details here.  
	  Updated bunch of unroll_context prototypes to take
		const unroll_context&.
	  Handy utility methods added hither and thither.
	  Code really needs 1) facelift, 2) bath.


2005-07-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-04:
	  Fixed: squashed the known bug mentioned in previous revision.  
		This was done by changing get_relaxed_actuals 
		(in connect's unroll) to new find_relaxed_actuals(), 
		implemented in "Object/art_object_instance_alias_actuals.tcc".
	  Append minutes of 2005-07-12 meeting to NOTES.  


2005-07-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-03:
	  Instance aliases with substructure now visit, write, and load (empty)
		subinstance list.  This results in a change in object
		binary sizes for recursive instances.  
		Unroll tests updated accordingly.  
	  TODO: fix KNOWN BUG from test case test/parser/connect/097.in.


	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-02:
	  Added subinstance classes to Object/inst.  
	  Every instance_collection(_base) now has a back-pointer to 
		parent super instance (not yet used).  It will be the 
		super instances' responsiblity to restore the back-links
		during persistent object restoration.  
	  Added new static const bool field to class_traits:
		has_substructure: used to determine whether or not
		alias contains substructure information.  
		instance_alias_info derives from a base with or without
		substructure information.  


2005-07-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28-subinstance-01:
	  Child branch for the purpose of developing subinstance and
		substructure management.  
	  This initial revision just moved and renamed some files for
		reorganization, namely, all class_traits files, 
		have been moved into the Object/traits directory. 
		Object/art_built_ins.cc -> Object/traits/class_traits_types.cc.
	  Makefile.am: enabled and modified the clean-header-deps target
		to not remove, but just reset the auto-dependency files.  
		Now it's usable for maintainence.  


2005-07-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-28:
	  Obsoleted "Object/art_built_ins.h" everything moved into their
		respective traits classes (class_traits<>).
		Initializations are still done in "Object/art_built_ins.cc".
	  Source files cleaned up some, removing obsolete code.
	  Removed obsolete expr headers from repository (to Attic).
	  Upcoming branch: developing instance alias hierarchy.


	* ARTXX-00-01-04-main-00-48-connect-01-27:
	  New directory Object/inst for gradual migration of instance-related
		classes to find a new home.  
	  Replaced collection_type_manager classes (specialized in
		various Object/art_object_instance*.cc) with 
		collection_type_manager parent class templates in Object/inst:
		{general,int,null,parameterless}_collection_type_manager.{h,tcc}
	  Moved bool_type_ptr into bool_traits (class_traits<bool_tag>)
		policy class as a static const member, but is still
		initialized in Object/art_built_ins.cc.
		(Consider moving definition too.)
	  Minor Makefile.am clean-up.  
	  TODO: connect sub-instances to (parent) super-instances, 
		i.e. recursive instantiation, perhaps in instace_alias_info.  


2005-07-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-26:
	  Breakthrough (it's about friggin' time).
	  Proper type checking in place for checking instance alias 
		connections!  Modifications in alias_connection<>::unroll().
	  Implemented instance_alias_info_actuals::compare_and_update_actuals().
	  Implemented instance_collection::must_match_type() through
		the collection_type_manager<Tag>.
	  Some initial test cases to test/parser/connect (088-091).


2005-07-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-25:
	  const_collection<>::unroll_resolve_value() (and friends):
		used to never allowed call, but now allowed under the
		precondition that it is scalar, 0-dimensional.  
	  instantiation_statement<>::unroll():
		Reworked type-unrolling, completion, and commit:
		The call to unroll_resolve_type no longer combines
		the instance relaxed actuals into the result type.  
		The relaxed actuals are checked separately before
		passing them into instantiate_indices_with_actuals().  
		This is cleaner.  
	  scopespace::add_instance(): (semantic clarification)
		Instance additions to the same collection must now have
		the same strictness, i.e. both strict, or both relaxed.
	  fundamental_type_reference::must_be_collectibly_type_equivalent():
		Now prints descriptive error upon type mismatch.
	  process_type_reference::make_canonical_type_reference():
		removed assertion that template_args.is_constant(), just false.
	  Object/expr/operators.cc:
		all ::unroll_resolve methods changed evaluation of
		operands, can no longer assert pint/pbool_const, 
		because resolve may return (scalar) const_collections.  
		Rewritten to account for this.  
	  Some unroll test updates, based on above revisions, also added
		a bunch of new test cases for template types with
		relaxed parameters.  
	  TODO: a little more type/collection checking before moving on.


2005-07-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-24:
	  Tested basic facilities for registering relaxed template
		actuals with instance aliases.  Added dumping of 
		alias's actuals when the parent collection has only
		relaxed type.  
		Fixed minor problem with missing actuals: collection pass
		for persistence was missing from instance_array::collect
	  Some debugging hooks to instance_alias_info_actuals added.  
	  Minor test updates.  
	  Previous TODOs have been flushed, but more extensive testing 
		is required.  


	* ARTXX-00-01-04-main-00-48-connect-01-23:
	  No source changes, only the test directory's artobjunroll
		test format was changed for the sake of simplifying
		and reducing the differences when objects change size.  


	* ARTXX-00-01-04-main-00-48-connect-01-22:
	  Done: added relaxed actuals to instance_alias_info, as dictated by 
		class_traits<Tag>::instance_alias_relaxed_actuals_type.
		instance_alias_info<> derived from this to take advantage
		of EBCO for the classes that don't actually have actuals.  
	  TODO -> PUNT: type-completion statements in the AST
	  Nearly EVERY unroll test expect updated to reflect change
		in size of alias collections, one pointer (4B) per
		sparse member in the collection.  


2005-07-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-21:
	  Small but important revision!
	  In instantiation_statement<>::unroll(), 
		replaced plain call to collection_type::instantiate_indices
		with policy-defined call that passes in pointer to
		relaxed actuals list (instantiate_indices_with_actuals).  
		This is specialized for parameter value collections, 
		that don't need actuals (also future plan for built-ins).
	  In instance_array<>::instantiate_indices(), 
		added relaxed actuals argument used to attach to 
		the referenced instance_alias(info).
	  The TODOs from the previous revision still apply.  


	* ARTXX-00-01-04-main-00-48-connect-01-20:
	  We now allow scalar instance declarations to have relaxed
		types for the sake of being able to alias them
		to other instances.  Unrolling will not catch it
		as error until the creation phase, where creation
		requires relaxed actuals (where relaxed formals exist).  
	  Done: instance_array::check_build().
		Checked that instance_collections acquire the
		type specified by the original declaration.  
		If the first declaration was relaxed, then the collection
		remains relaxed, if the first declaration was strict...
	  Resolved: port declarations will not have late-relaxed arguments.
		Declare their types either strict or relaxed up-front.  
		Thus, context::add_port_formal() remains as is.  
	  instantiation_statement::unroll():
		Temporary workaround to detect the first instantation
		for the referenced collection.  The first time will
		use the original type to establish the collection's type.
		Subsequent instantiations that call commit_type will
		only check collectibility without modifying the 
		collection's type.  (Assertions in place.)
		To instantiation_statement_type_ref_base<Tag>:
			added commit_type_first_time(), and
			get_resolved_type() (also to specializations
			in "Object/art_object_inst_stmt_*.h")
	  Some test outcomes were updated per the above changes.  
	  TODO: propagate the below TODOs through each subsequent revision
		of this branch until they disappear.  
	  TODO: implement type-completion statements (already in AST/grammar)
		in "AST/art_parser_instance.cc".  These statements
		allow one to 'attach' relaxed template actuals to
		instance-references, provided that they are already
		instantiated.  
	  TODO: store relaxed actuals in instance_alias_info classes.  
	  TODO: (not important) rename instantiation_statement
		functions to describe what they do more accurately.  


	* ARTXX-00-01-04-main-00-48-connect-01-19:
	  Now actually storing instance-time relaxed template actuals
		with the individual instantiation statements.  
		parser::context::add_instance() was updated to accommodate
		relaxed arguments in instantiation_statement creation.  
		make_instantation_statement and company were updated justly.  
	  template_actuals::relaxed_args was modified to always
		be const (param_expr_list*).
	  Temporary working of instantiation_statement_type_ref_default
		to handle fusing of relaxed template arguments.  
		Have the others (_data, _channel) model after this.  
		See its unroll_type_reference() for reference.  
	  No longer validating relaxed actuals list in
		template_formals_manager::must_validate... because
		the actuals are allowed to be incomplete, i.e. missing
		the relaxed actuals.  (Don't fill them in auto.)
	  TODO: propagate the below TODOs through each subsequent revision
		of this branch until they disappear.  
	  TODO: fix instance_array::check_build (has bogus argument now)
	  TODO: front-end type check needs to handle scalar and array
		declarations differently w.r.t. relaxed actuals. 
		Revisions to instance_base::check_build and
		instance_array::check_build need to propagate to port_formals.  
	  TODO: fix bogus argument "FIX_ME_NOW" in 
		parser::context::add_port_formal(), copy from add_instance.


2005-07-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-18:
	  built-in channel-types, must now be composed of strict
		data types, so we may deduce that their composition
		is also strict.  Haven't decided about user-defined 
		channel types yet.  Special case is made for 
		built-in channel types in
		fundamental_type_reference::is_strict().
	  instance_base::check_build() now checks strict-relaxed 
		appropriateness of the current fundamental type
		against the optional relaxed template arguments.  
		TODO: add bunch of test-cases for this.  
		TODO: distinguish between scalar and array declarations.  
	  template_formals_manager::certify_template_arguments():
		Treats relaxed actuals differently, does NOT
		automatically fill in default relaxed actuals, 
		only check against them.  
	  Grammar: relaxed template actual lists now mandate expressions
		in every position, because relaxed template formals
		are not allowed to have default values.  
	  Uses new (pure virtual) param_expr_list::
		certifty_template_arguments_without_defaults() const.
	  Print ICE message in const_param_expr_list::certify...
	  Updated some test cases to reflect the above changes.  


	* ARTXX-00-01-04-main-00-48-connect-01-17:
	  Added relaxed template arguments in instantiation statements
		for the AST, also added field to instantiation statement
		type reference base classes (all except params).
		TODO: later, subclass data type instantiation statments, 
			so int, bool, and enum don't need relaxed 
			arguments (pointer to list).  
	  paresr/art++-parse.yy: now store instead of discard
		optional instance relaxed template actuals.  
	  Enabled limited checking of argument collision, but
		TODO: alter check_template_args to not require complete
			strict type (with relaxed actuals) unless 
			declaration is scalar?
	  Nearly every objunroll test's stderr updated to reflect
		increase in size of instantiation statement objects.  
		Increased by 4B (size of pointer index). 


2005-07-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-16:
	  Replaced expression/index/range object lists with vector
		implementations, also leveraging util::reserve
		for up-front space allocation.  Everything "just works".
	  Few more test cases added to test/parser/template/.  
		Added note that 057, 058 are KNOWN BUGS to address
		at a future time (as described in NOTES).  
	  TODO: next, check proper declarations with relaxed template
		actuals in the context of arrays.  


2005-07-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-15:
	  Semantics: forbid the use of relaxed template formal parameters
		(in definition context) in strict template arguments, 
		and in array sizes and references.  
		(Later: also forbidden in loops and conditionals)
		They are only allowed in other relaxed template arguments.  
	  Added tests test/parser/template/05{1,2,3,4}.in to catch 
		when relaxed parameters are misused.  
	  Implemented expressions' is_relaxed_formal_dependent()
		to check for relaxed formal dependence.  
	  See important NOTES entry 2005-07-05 about complication with
		checking dependence on relaxed formals that have been 
		passed to other parameters through assignments.  
		Next few revisions may addres that address this issue
		at the cost of adding tracking bits to every
		constant parameter value.  (or we may punt)


	* ARTXX-00-01-04-main-00-48-connect-01-14:
	  Grammar: forbid default template formals in relaxed parameter lists.  
		Few tests (artc-stderr) updated to reflect change.  
	  Useful error messages added when template formals/actuals 
		certification fails.  
	  Ported final unroll type-check from process to data type references.  
	  More test cases (042-049) added regarding relaxed parameters in
		test/parser/template.  


2005-07-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-13:
	  Completed major reorganization of expression Object sources.
	  Object/art_object_data_expr.cc -> Object/expr/data_expr.cc
	  Object/art_object_expr_types.h -> Object/expr/types.h
	  Object/art_object_expr.cc -> Object/expr/[everything-else].cc (9)
	  Object/art_object_*expr*.h have been deprecated,
		giving a preprocessor error if you attempt to use it.  
		We will keep it until the end of branch for reference, 
		then discard on the main trunk.  
	  ALL affected source files (and headers) have been updated to 
		include the minimum expr headers as replacements for the
		old headers.  This will also speed up compile time, 
		as there is less to proprocess and parse.  
	  Clean-up is done, now back to real work...


2005-07-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-12:
	  That's it, I've had it with the monstrosity of 
		"Object/art_object_*expr*"... it's time we give it the axe.
		Sliced and diced the header files into ONE class per file
		in the Object/expr subdirectory.  
		We need this to speed up rebuilds, my patience grows thin...
	  Not over yet: next revision will phase out these old headers
		and also splice "Object/art_object_expr.cc".


2005-07-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-11:
	  Unroll-time template formal vs. actual checking in final types.  
		So far applied to process-type-references, but
		can be copied to the other types.  
	  REVERTED back to single-phase unrolling for top-level
		module::unroll().  (single line change)
	  Renamed old "type_check_actual_param_expr" to "may_..."
		and added a "must_..." version for const_params only.  
	  Implemented const_param_expr_list::must_validate_template_arguments().
	  Completed template_formals_manager::must_validate_actuals().
	  Moved instance_collection_base::check_expression_dimensions to
		param_instance_collection::may_check_expression_dimensions,
		and added analogous must_check_expression_dimensions
		for const_params only.  
	  Implemented value_collection<>::must_type_check_actual_param_expr().
	  New test cases added:
		notably parser/template/039.in checks for unroll-time
		type resolution checking (process).
		and parser/template/041.in will exhibit different
		result between 1-pass and 3-pass module::unroll().  


2005-07-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-10:
	  TONS of functional addition, upgrades, and fixes in this revision.  
	  process_type_reference::unroll_resolve():
		invoke the template_actuals_transformer (unroll_context)
		on template actuals before unroll-resolving.  
		TODO: validate the created type.  
	  simplified unroll_context::resolve_meta_value_reference.
	  Added (non-persistent) value cache to const_collection, 
		currently unused, but will come in handy later.  
		TODO: should be mutable.  
	  Implemented meta_value_reference::unroll_resolve_dimensions().
	  meta_value_reference::unroll_resolve() now properly
		handles normal and template-dependent actuals, 
		better error reporting in case of bad dimensions, 
		try-catch around const_range_list::resolve_sizes(), 
		fixed bug in loop termination condition of do-while.  
	  entity::const_collection<>::make_value_slice()
		creates const_collection with slice of values
		specified by the indices.
	  entity::const_range[_list]: now catches error
		when range is invalid, for now throws an exception
		for error handling, but may rewrite later.  
	  {pbool,pint}_instance operator == updated to allow comparison
		between "uninstantiated" values.  If both are uninstantiated, 
		consider them equal, so default values are equal.  
	  template_formals_manager::resolve_template_actual updated
		to recursively resolve parameter-dependent parameters.  
	  const_collection iterator uses: replaced assignments w/ construction
	  Makefile.am: added .ii suffix rule for -save-temps debugging.
	  TODO: template_formals_manager::must_validate_actuals()
	  More critical fixes and improvements in the util/ library, 
		see src/util/ChangeLog for details.  
	  Several new tests to validate this revision added to
		test/parser/template, and more coming...


2005-07-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-09:
	  NOTES: resolved many outstanding issues about CHP language
		semantics and type constraints.  (not related to this branch)
	  Moved body of template_formals_manager::check_template_arguments()
		into (virtual) methods of param_expr_list.
		Also enabled checking and processing of relaxed template
			arguments.  
		Implemented, and no tests broke.  


	* ARTXX-00-01-04-main-00-48-connect-01-08:
	  Clean-up revision.  
		Removed obsolete (some still-born) code in definition
		and type-reference source files.  


2005-06-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-07-merged-actuals-08:
	  Merged in revisions from actuals (-08) child branch.  
	  Summary: implemented strict and relaxed template actuals.  
	  However, rest of code base needs to make use of it
		during instantiation and connection.  


2005-06-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-08:
	  Final branch revision before merging to parent.  
	  Some comments updated, mostly regarding done TODOs, 
		and doxygen comments.  
	  Branch summary: properly implemented strict and relaxed 
		template actuals.  

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-07:
	  Implemented template formal to actual reference resolution
		in template_formals_manager::resolve_template_actual
		and unroll_context::resolve_meta_value_reference.  
		The latter is called by unroll_resolve in
		"Object/art_object_value_reference.tcc".  
	  Reformatted pretty-print dumps of definitions and typedefs.  
		(Updated tests)
	  Enabled object unroll tests in test/parser/template, 
		and they all work, whoa.  
	  entity:: expression lists implemented with vector (replaced list)
		and added indexing operators.  
	  Slightly better control of explicit template instantiation 
		using "Object/art_object_extern_template.{h,cc}".
		NOTE: sequence of including the header file matters.
	  Branch nearing maturity.  


2005-06-29	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-06:
	  Clean-up revision: committed USE_NEW_TEMPLATE_ACTUALS(1)
		and removed conditional wrappings.  
	  Few more things TODO (already noted) before this branch matures.  


2005-06-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-05:
	  Massive and revolutionary revision (-1000, +2000 LOC).
	  Summary: enabled proper implementation of template actuals
		in type-references, and applied them to ... everything.  
	  Code differences are wrapped in the condition macro
		USE_NEW_TEMPLATE_ACTUALS, defined in 
		"Object/art_object_template_formals_manager.h"
	  All fundamental_type_references now replaced the old 
		template_params param_expr_list with a proper
		template_actuals, which basically contains two
		pointers to param expr lists (strict, relaxed).  
	  Parser/grammar: updated to include strict and relaxed template
		arguments at declaration time, and optional relaxed template
		arguments at instantiation time. 
		(AST::parser::template_argument_list_pair)
	  Semantic type-equivalence: refined and (partially) implemented
		{strict, relaxed} x {may, must} equivalence checking.  
		Strict checking is employed for connections and 
		non-meta assignments.  Relaxed checking is used for
		array/sparse collection member checking.  
	  Partially implemented definition_base::make_canonical_type_reference,
		and fundamental_type_reference::make_canonical_type_reference, 
		which in combination, creates canonical types by substituting
		template actual parameters into the base definition
		using transformed template actuals.  
	  Parser: PINT_TYPE and PBOOL_TYPE now return token param types
		that act as *complete* types (concrete_type_ref) instead of 
		just a plain type_base (representing base definition).
		Greatly simplifies type-generation of params.  
		(Slight shift in class hierarchies.)
	  Actually added members and methods to entity::unroll_context:
		TODO: make use of formals/actuals mapping in 
		meta parameter substitution for type canonicalization.  
	  More TODO notes in "Object/art_object_value_reference.tcc".
	  TODO: make sure grammar file semantic actions actually make 
		use of relaxed template arguments (see instance_id_item)
	  Nearly EVERY artobj unroll test updated to reflect the 
		size change of type-reference objects.  
	  Minor aesthetics, using construction-style (not assignment)
		for iterator initializations in several source files.  
	  parser::concrete_type_ref class definition relocated to
		"AST/art_parser_type_base.h"
	  Next (few) revisions: cleanup and commit conditional patched code.  


2005-06-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-04:
	  Cleaned up COUNT_TEMPLATE_ARGS dependence (committed as if = 1)
		as promised.
	  TODO: Resume enabling template_actuals use.  


	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-03:
	  Replaced excl_ptr<param_expr_list> with count_ptr<...>, 
		affecting the expr, definition, type_ref Object modules.  
		(also template_formals_manager, and AST/art_parser_base.cc")
	  Also took the time to replace iterator initializations
		with copy-constructors in "Object/art_object_expr.cc".
	  Code is transiently a mess with conditionals all over, 
		dependent on COUNT_TEPMLATE_ARGS in 
		"Object/art_object_definnition_base.h".  
	  Next micro-revision will be a clean up.  


	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-02:
	  Got sidetracked in this revision:
		Figured out how to automatically generate unique identifiers
		using cpp, after discovering macro tricks on the web.  
		See corresponding "src/util/ChangeLog" entry for details.
	  Currently USE_NEW_TEMPLATE_ACTUALS is disabled in
		"Object/art_object_type_ref_base.h".  This revision did
		partially fill-in-the-blanks w.r.t. the 'template_actuals'
		class.  Needs more massaging before will compile.  
	  Outlined: new type-checking primitives, two flavors:
		relaxed (collectible), and strict (connectible) equivalence.
	  TODO: replace excl_ptr<param_expr_list> with count_ptr<...>
		This will enable us to switch between old-wrong and
		new template-actuals implementation for the duration
		of this branch.  


2005-06-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-01:
	  Once and for all, we're going to do template actuals the CORRECT
		way, using strict and relaxed template arguments.  
		This has been waiting in the wings for the last several
		months... now its time has come.  
	  Rise my young apprentice... and henceforth shalt thou be known
		as... Darth Template.  
	  Once this branch matures, we will use it properly unroll 
		complete definitions (types) and keep per-definition
		repositories of substructure maps.  
	  Added (disabled) "Object/art_object_template_actuals.{h,cc}".


	* ARTXX-00-01-04-main-00-48-connect-01-06:
	  Minor cosmetic re-organization of files in preparation for 
		some more drastic revisions.  Chopped up 
		"Object/art_object_classification_details.h" into 
		pieces named "Object/art_object_*_traits.h".
		Modularity will speed up recompilations.  
		Headers updated to include their appropriate traits.  
	  Added "Object/art_object_inst_stmt_type_ref_default.h" 
		for convenience.


	* ARTXX-00-01-04-main-00-48-connect-01-05:
	  In unrolling call-graph, now favoring returning error status
		instead of throwing exception upon error.  
	  Updated some comments.
	  Updated some tests (unroll test stderr expect).


2005-06-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-04:
	  Micro-patch:
	  In a miraculous turn of events, switching to 3-phase unrolling
		didn't break a single test in the testsuite.  
		I am either THAT good, or that bad at writing stress tests.  
	  module::unroll_module currently set to 3-phase unroll,
		effective at least for the remainder of this branch.
	  Should do: devise test cases where the behavior is different, 
		some accept-invalid or reject-valid cases.  


	* ARTXX-00-01-04-main-00-48-connect-01-03:
	  Fleshed out 3 phases of unrolling, re-using old unified-unroll code.
		Implemented unroll_meta_instantiate and unroll_meta_connect.  
	  Try: replacing unified unroll with 3-phase unroll to see what
		test cases differ.  
	  Tentatively gave old unroll method good_bool return value. 
		TODO: try eliminating THROW_EXIT statements.  
	  Phase out generic "unroll", if possible.  
	  

	* ARTXX-00-01-04-main-00-48-connect-01-02:
	  Planned a 3-pass approach to unrolling (updated NOTES):
		1) meta param instantiation and evaluation
			::unroll_meta_evaluate()
		2) physical instantiation
			::unroll_meta_instantiate()
		3) physical connection
			::unroll_meta_connect()
	  Renamed param_instantiation_statement to 
		param_instantiation_base.
	  New template param_instantiation_statement to override
		instantiation_statement, and implement unroll_meta_evaluate.
	  Updated instantiation_statement template class to make methods
		available to children, and updated this_type
		to follow the class_traits policy.  
	  NEXT: Implement 3-phases of unrolling.  


2005-06-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-01:
	  This branch has the ultimate goal of implementing port connections
		and member connections, but much has to happen first.  
	  See NOTES file on prerequisite features.  
	  First few revisions of this branch will be for planning
		the high level changes necessary.  
	  Sub-branches of this will concentrate on implementing one dependent
		feature at a time.  
	  Deep breaths...


2005-06-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48:
	  Grammar: generic_type_ref can take an optional direction [!?]
		non-terminal after optional_template_actuals
		to account for directionality of user-defined channel types.  
	  AST classes updated to accommodate this update.  
		generic_type_ref::check_type properly checks for
		channel type (dynamic_cast) before applying direction.  
	  entity::definition_base::make_fundamental_type_reference's return
		type is now (non-const) count_ptr<fundamental_type_reference>.
	  Fixed channel_type_reference::dump to print directionality.  
	  Few new test cases that use user-defined channel-type in ports
		added to parser/test/connect, but not unroll-checked yet.  
	  TODO: next branch port connection, and all prerequisites... oi...


	* ARTXX-00-01-04-main-00-47:
	  Added CHP bodies to user-defined-datatype (set, get), 
		even though I don't know what these do yet.
	  Added port-formals and data-type-reference base to 
		user_def_datatype.  
	  As a result, the fake built-in definition for int and bool
		are bigger by 16 bytes.  Nearly every unrollstderr
		test output was updated to reflect this change.  
	  Split off "Object/art_object_definition_data.h" from
		"Object/art_object_definition.h".
	  Parser now checks and handles datatype's CHP, similarly to
		channel definitions.  
		

2005-06-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-46:
	  Added send/recv CHP bodies to user-defined channel definitions.  
	  parser::user_chan_type_def's bodies down-typed to CHP::body.
	  Some code clean-up.
	  Few simple test cases to demonstrate channel CHP bodies.  


2005-06-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-45-merged-anal-04:
	  Merged in branch revisions for anal-retentitiveness, 
		turning on max warnings, warnings-to-errors.  
	  Code was cleaned up, no non-standardness remains.  
	  Life is good.  


	* ARTXX-00-01-04-main-00-44-anal-04:
	  Cross-checked clean, warning-free code across a few platforms
		and gcc versions.  
	  Ready to merge to trunk.  


	* ARTXX-00-01-04-main-00-44-anal-03:
	  Instated possibly THE MOST anal retentive compiler warning policy
		known to man.  If you don't know what the following warning
		flags mean, I suggest learning.  
	  In Makefile.am:
		GENERAL_WARN_FLAGS = -W -Wall -Wundef -Wshadow -Wno-unused
			-Wpointer-arith -Wcast-qual -Wcast-align
			-Wconversion -Werror
		WARN_CFLAGS = -Wmissing-prototypes -Wstrict-prototypes
			-Wbad-function-cast -Wnested-externs
		WARN_CXXFLAGS = -Wold-style-cast -Woverloaded-virtual
		The only files that need exceptions are the yacc/lex-generated
			parser and lexer files, which are given
		PARSER_NOWARN_FLAGS = -Wno-old-style-cast -Wno-shadow
			as additional flags for preliminary compilation into a 
			separate convenience library, libhacktparsers.la.
		libart++.la links in libhacktparser.la, so libart++.la
			remains all-inclusive.  
	  Rest of source code gets a minor face-lift to conform to 
		the new compiling standard.  Mostly renaming of local
		identifiers to satisfy -Wshadow.
	  Minor entry also in src/util/ChangeLog.


2005-06-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-44-anal-02:
	  Now compiling with -pedantic-errors dialect flag.
		(read: total overkill anal retentiveness)
	  Updated a few header/tcc files to use the new scheme of
		suppressing implicit template instantiations.  
	  See "src/util/ChangeLog" for details.
	  Notably: in "Object/art_object_extern_templates.h"
		Replaced non-ISO extern template declarations with
		template definition-suppressing macros.  
	  Dependent files affected: "Object/art_object_instance_collection.tcc"


	* ARTXX-00-01-04-main-00-44-anal-01:
	  Mini-branch dedicated to making life miserable.  
	  The aim of this branch is to enforce the utmost strictness in
		standard conformance and warning cleanliness.  
	  This will only hurt a little.
	  This revision: enforce -pedantic in CFLAGS and CXXFLAGS
		eliminated redundant operator conversion 
			in "util/memory/excl_ptr.h".
		disabled uses of "extern template", a GNU extension.
	  Upcoming:
		Macros in .tcc files to control implicit vs. explicit
		template instantiation by excluding dependent
		template definition .tcc files.  


2005-06-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-43-merged-CHP-01-25:
	  Merged summary:
		CHP language support with persistent intermediate objects.  
		Framework for nonmeta language instances, value references, 
			and expressions.  
		Some CHP-related grammar updates.  
	  TODO: documentation... in dox/lang


	* ARTXX-00-01-04-main-00-42-CHP-01-25:
	  After a configuration header patch, this snapshot is gold!
	  Certified for merge to trunk.  


	* ARTXX-00-01-04-main-00-42-CHP-01-24:
	  Code clean-up only.  
	  distcheck passes.  
	  Candidate for trunk merge.  
	  (Multi-platform check pending.)


	* ARTXX-00-01-04-main-00-42-CHP-01-23:
	  parser::CHP: Moved list<guarded_command> functionality into 
		the 'selection' base class.  
	  Implemented parser::CHP::do_until and entity::CHP::do_while_loop
		(yeah, I know: terrible names...)
	  This branch is ready for merging to main-line after a clean-up.  
	  Grammar: chp_do_until builds from *unmatched* deterministic
		guarded command list, because any else clause would
		make it an infinite loop.  
	  Updated hash_keys of bool_logical_expr::op_map
		for AND to "&" and OR to "|" to stick with old-style CHP, 
		until further change.  (Must be consistent with grammar.)


	* ARTXX-00-01-04-main-00-42-CHP-01-22:
	  Reinstated stmt_list as a class from stmt_list_base, 
		and implemented common convenience check_action, 
		that automatically returns single action for list size 1.  
		Added is_concurrent flag to direct whether or not
		action_sequence or concurrent_actions should be constructed
		if size > 1.
	  typedef parser::CHP::guarded_command	parser::CHP::else_clause;
		Note: token_else is allowed to return NULL for guard
			and skip statment allowed to return NULL.  
		These cases are handled appropriately.  
	  Updated some comments in "AST/art_parser_chp.cc".
	  Implemented guarded_command::check_guarded_action().  
	  Implemented wait::check_action().
	  Implemented [non]det_selection::check_action().
	  Updated loop::check_action(), using stmt_list::check_postorder_stmts.
	  Updated entity::CHP::guarded_action::dump(), allowing NULLs.  
	  Grammar (CHP): skip statements may only appear by themselves, 
		i.e. chp_body_or_skip, in place of a stmt_list.  
	  More new test cases, most for guarded statements and selections.  


2005-06-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-21:
	  Grammar: isolated CHP expressions from general meta language
		expressions for modularity.  Updated assignments to
		use the traditional ":=" operator.  Re-enabled
		boolean assignment using +/- after transforming away
		a s/r conflict.  (Used to be ++, --)
	  AST::CHP updated assignment classes, now called
		binary_assignment and bool_assignment, no longer using
		generic base classes (parser::assignment and incdec_stmt).  
		TODO: phase-out generics
	  CHP::body::check_build():
		Fixed block partitioning w.r.t. loops, 
			now correctly divides up slices of statements
			based on position(s) of forever-loop statements.  
		Minor enhancement: one-statement actions no longer 
			go into action-sequences.  
	  Implemented statement::check_action for loop, 
		binary_assignment, and bool_assignment.
	  More test cases added to test/parser/chp.


2005-06-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-20:
	  Remembered to set_direction in chan_type::check_type... oops!
	  Implemented parser::CHP::receive::check_action().
	  Implemented inst_ref_expr::check_nonmeta_data_referencee(), 
		and inst_ref_expr_list::postorder_check_nonmeta_data_refs().
	  Implemented entity::CHP::channel_receive::add_references<>().
	  Slightly modified some type-reference dump methods.  
	  Many chp test outputs updated to include channel direction
		in ports list (and types in general).  
	  Added a bunch of new tests for type checking CHP receives.  
	  TODO: check CHP loops, guarded statements, selections, etc...


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-19:
	  Finished basic type-checking of CHP bodies, and added a bunch of 
		simple test cases in test/parser/chp.  More tests to come.  
	  Parse-failures for nonmeta expressions and references 
		have more verbose error messages, because of longer
		return path (rather than throw() on deepest error).  
		Distant TODO: organize and present error hierarchically
	  Implemented CHP object dump, and persistence in methods.  
	  Added CHP dump/persistence to process_definition, 
		which resulted in larger process_definition objects
		stored in the object file, tests have been updated.  
	  That said, this branch is in pretty good shape.  


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-18-merged-nonmeta-04:
	  Merged revisions from child branch, also including a minor
		typo fix in AST/art_parser_chp.cc.  
	  Summary: nonmeta value-references and data type checking.  


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-04:
	  Final revision in this sub-sub-branch.
	  Added: Object/art_object_CHP.tcc for template method definitions.  
	  In CHP::body::check_build(), 
		now splitting up sequence of CHP statements as follows:
		Each group contains a sequence of CHP statements
		that end with a do-forever-loop.
		Each of these groups is added to the list of concurrent
		actions in the process definition.  
		Within each group, actions are sequential.  
	  Implemented: process_definition::add_concurrent_chp_body().
		Also added CHP field to process-definition, 
		but nothing is done yet with it.
	  TODO: in mother branch, make CHP body persistent.  
	  Replaced entity::CHP::channel_send::push_back
		with template method that takes care of type-checking.  
		Done some preliminary spot check testing, 
		but not added the new test cases to Makefile.am yet.
	  Object/art_object_CHP.h: new (unimplemented) do_forever_loop.
	  Update error messages on data (nonmeta) expression type mismatch.  
	  Fixed int_instance_collection::get_type_ref, actually now 
		fetches the type-ref of the first instantiation statmeent.
	  TODO: proper sub-typing of instantiation_statement, 
		further abstraction of index_collection_list.  


2005-06-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-03:
	  Added built-in bool_type_ptr (data_type_reference)
		for data expression type checking, 
		and int32_type_ptr just for convenience.  
		Tentatively pints are promoted to int<32>s when
		type-checking data expressions.  This may change later.  
	  Implemented (new, virtual) data_expr::get_data_type_ref()
		for non-meta expression type-checking (untested).  
		Tentative policy regarding int<>s:
			arithmetic and relational expressions must
			operate on ints of the same width 
			(if that can be determined statically, 
				i.e. not template or array-dependent)
			if cannot be resolved, then don't reject until unroll.
			if mismatch found, return NULL to signal error.  
		pbools are promoted to bool in nonmeta context.
	  Added new template policy to simple_nonmeta_value_reference:
		data_type_resolver: where each specialization dictates
			how a type-reference is created from reference.  
		simple_nonmeta_value_reference<Tag>::get_data_type_ref()
			is implemented using this policy.  
	  Renamed fundamental_type_reference::may_be_equivalent to
		may_be_type_equivalent, analogously for must_be_equivalent.  
	  The three policy structs for instance_collection<Tag>
		have been consolidated into one "collection_type_manager", 
		and also added new static function, get_type().
	  data_type_reference::make_quick_int_type_ref(size_t)
		purely for convenience.  
	  TODO: check expressions of send and receive actions in CHP.  


2005-06-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-02:
	  Header clean-up: liberating most Object/*.h headers from
		dependence on "Object/art_object_fwd.h" --
		conforming to a need-to-know policy for headers.  
		Consequentially, affected header files use their
		own forward declarations.  
		I'm so glad I have the 'check-headers' target for this...
	  Slightly faster rebuilds, certainly less building each time
		the art_object_fwd file is touched.  


	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-01:
	  This branch is for developing nonmeta data instance references
		as run-time value-expressions, children of entity::data_expr.
	  This will enable basic expression type checking of data exprs.
	  Reserved for later development: operator overloading.
		See 2005-06-11 entry in NOTES.  
	  In this revision:
		Removed "Object/art_object_inst_ref_data.tcc"
		Added "Object/art_object_nonmeta_value_reference.{h,tcc}"
		Renamed: simple_meta_instance_reference_parent_type ->
			meta_instance_reference_parent_type
			(analogously for nonmeta)
		Introduced enum_expr and struct_expr (empty) in
			"Object/art_object_data_expr_base.h"
		Placeholder data_value_types for enum and struct (undefined)
			in "Object/art_object_expr_types.h"
		Added appropriate data_expr_base_type to class_traits for
			data and parameter type tag specializations.  
		Replaced data and param -subtyped nonmeta_instance_references
			with nonmeta_value_reference template class, 
			preserving typedef'd names.  


2005-06-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17:
	  Working on CHP::send construction and type-checking.  
	  TODO: check data_expr against nonmeta_datatype_instance_reference.  
		Will need nonmeat_value_reference extensions.  
	  Partially implemented CHP::send::check_action().
	  Added expr_list::postorder_check_nonmeta_exprs().
	  Partially implemented entity::CHP::channel_send::push_back, 
		but likely to rewrite as for-loop.  
	  Some list members updated to vector types:
		builtin_channel_type_reference, CHP::send_action.
	  Obsolete code cleanup in "Object/art_object_definition[_chan].h"
	  Some quick helper methods added to channel-related classes.  


2005-06-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-16:
	  Starting to test CHP checking piece by piece.  
	  New basic CHP tests will go into test/parser/chp.  
	  expr_list::types added "meta" to names to distinguish from future
		"nonmeta" versions.  
	  Initial implementation of CHP::statement::check_action (virtual).
	  parser::CHP::communication's chan member now restricted to
		inst_ref_expr, naturally.  
	  parser::CHP::receive::lvalues is now inst_ref_expr_list, 
		was just expr_list.
	  Enabled id_expr::check_nonmeta_reference, which uses
		inst_base->make_nonmeta_instance_reference... works fine.  
	  entity::nonmeta_instance_reference new method
		get_inst_base_subtype, returns type-specific
		instance-collection ptr, as dictated by template type.  
	  Added direction (char) field to channel_type_reference_base, 
		valid values are '\0', '!', '?'.
	  Updated channel_type_reference_base::dump to include direction.  
	  Updated unroll test outputs in test/parser/channel.
	  parser/art++-parse.yy: update nonterminal types for
		chp_receive and inst_ref_expr_list.


2005-06-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-15:
	  Significant development to completing CHP objects using
		nonmeta-instance-references (-300, +1900 LOC).  
	  "AST/art_parser_chp.*" checked types are now (nonmeta) 
		bools and ints, not pbools and pints.  
	  Type name substitution for distinction: return_type ->
		meta_return_type and nonmeta_return_type
	  Method name substitution, analogously: check_foo ->
		check_meta_foo and check_nonmeta_foo.
	  Implemented most of expr::check_nonmeta_expr, untested.  
		(same with ranges and indices...)
	  Implemented (trivial) 
		instance_collection_base::make_nonmeta_instance_reference.
	  Implemented many classes in "Object/art_object_data_expr.cc"
		adapting many from their meta expression counterparts.  
	  Added new type hash keys to "Object/art_object_type_hash.h".
	  Removed: "art++.h"
	  Minor assertion updates in "util/persistent_object_manager.cc"


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-14:
	  gcc4-isms: wants method and typeinfo definitions for unused
		classes, probably being conservative.  
		Now builds and runs smoothly (but largely) on OS X 10.4.  
	  Updated parser/art++-parse-options.h to account for 
		bison-2.0 differences from bison-1.875.  
		Damn you, bison!

	* ARTXX-00-01-04-main-00-42-CHP-01-13:
	  distcheck fix: being smarter about auto-generated
		header-check dependencies -- basic script improvements
		for distcheck robustness.  


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-12-merged-dataexpr-10:
	  Child branch merge, details of this series below.  


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-10:
	  Makefile.am: added -Wundef (die if preprocessor evaluates undefined)
		Also added new lex/parse options files to dist.  
	  lex/yacc files updated with preprocessor headers to satisfy
		use of undefined macros.  
	  Committed changes involving NEW_SIMPLE_INST_REF, 
		removing proprocessor conditionals.  
	  Updated CHP object classes to use int/bool expressions and
		non-meta instance references, finally!
	  Ready to merge back up a branch.


2005-06-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-09:
	  Skeletal (trivial) implementation of nonmeta_index_list.
	  Type hash keys for simple (meta) instance references updated
		to become distinguishable from simple nonmeta
		instance references.  (Macro names updated too.)
		Unroll test header dumps have been updated to reflect 
		this change.  
	  Added simple_nonmeta_instance_reference<Tag> classes, modeled
		after their meta-counterparts.  
	  Purged the proposed data_reference template class for good.  
	  Implemented essential methods of 
		simple_nonmeta_instance_reference_base.
	  Implemented core methods of simple_nonmeta_instance_reference
		template class.  
	  PLAN: After nonmeta_[data]_instance_references have been validated, 
		then that feature may be leveraged in the CHP object classes, 
		at which point, we can merge up a branch.


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-08:
	  Progress!  Replaced (meta) simple_instance_reference
		and value_reference class hierarchy with lattice, 
		enabled by the NEW_SIMPLE_INST_REF flag in 
		"Object/art_object_fwd.h".  
		Inheritance is a mess, but I've got plans for alternate
		implementations for the appropriate time.  
	  Little more renaming:
		*_meta_instance_reference ->
			simple_*_meta_instance_reference
		(rather than "simple" being implicit)
	  TODO: replicate for simple non-meta instance/value references!


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-07:
	  More painful reorganization and renaming... ugh.
		*_meta_instance_reference_base ->
			simple_*_meta_instance_reference_base
		value_reference -> simple_meta_value_reference
	  As soon as the dust clears, will rearrange (final)
		simple_*_meta_instance_reference classes with MI.  


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-06:
	  Makefile.am: updated header-check make-dep flags (no -MT or -MP)
		using new scripts to "promote" header dependencies:
		rather than depend on the headers, depend on the
		*checked* header (*chk) files to ensure bottom-up
		construction (after first time) of header-checks!
		(I'm so proud of myself...)
		../config.h is an exception, don't check it.  
		Disabled clean-header-deps target.
		This also catches circuilar dependencies in headers
			e.g. betwee util/memory/ref_count_pool.h and
			util/memory/count_ptr.h (now fixed).
		for this project I want to be anal and forbid circular
			dependent headers.  
	  More massive class renaming:
		simple_meta_instance_reference -> 
			simple_meta_instance_reference_base
		meta_instance_reference -> simple_meta_instance_reference
			(class template)
		simple_nonmeta_instance_reference =>
			simple_nonmeta_instance_reference_base
		nonmeta_instance_reference ->
			simple_nonmeta_instance_reference
	  Exapnded type-refinements for data, channel, proc, param
		from nonmeta_instance_reference_base


2005-06-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-05:
	  Makefile enhancement: added (optional) dynamic dependence
		tracking for header-tests, which conditionally creates
		(user only) dependencies (.hchkd, .tccchkd) in the
		respective .deps subdirectories.  A complete list of 
		all such dependencies is auto-generated and used by 
		Makefile.am to auto-include in Makefile.in.  
		The major benefit of this is that now, the check-headers
		target will check all target header files that depend on
		the modified ones, not just the ones touched.  
		This patchlet should ideally make it back to the main
		trunk sooner...
	  More class planning for nonmeta_instance_references.  
		A massive reorganization is inevitable.  
	  Some header file cleaning.  


2005-06-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-04:
	  Massive renaming of classes continues...
		index_list -> meta_index_list, 
		index_expr -> meta_index_expr, 
		dynamic_index_list -> dynamic_meta_index_list, 
		dynamic_range_list -> dynamic_meta_range_list, 
		range_expr_list -> meta_range_list, 
		range_expr -> meta_range_expr
	  Added nonmeta expr classes to foundation of meta expr classes
		so that meta exprs are acceptable to nonmeta exprs.  
	  Inlined some empty base classes' ctors and dtors.  
	  TODO: nonmeta instance references.  


2005-06-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-03:
	  MAJOR rework of instance-references beginning.
	  All old existing instance reference were
		meta-instance-references, references that would eventually
		be resolved at compile time upon template instantiation. 
		CHP and other non-meta languages work with run-time
		resolved, or nonmeta-instance-references.  However, 
		it's important to note that meta-instance-references are
		acceptable where their non-meta-instance-references are
		expected (they are just run-time constant, after all).  
		Thus we introduce another level in the hierarchy, rooted
		at nonmeta_instance_reference_base.  
	  Global rename: (previous occurences)
		instance_reference -> meta_instance_reference
		(file names preserved for now, will change later)
	  entity::object parent has been expunged as a parent class
		from all instance-references.
	  Temporarily reverted USE_DATA_REFERENCE (in "Object/art_object_fwd.h")
		to 0 (off).  We intend to redefine data_reference in terms 
		of nonmeta_instance_references.  
	  NOTE: instance reference connections only live in meta
		language domain, thus it is kind of redundant to 
		call them meta_instance_reference_connection, but at least
		this makes it clear.  
	  NOTE: member instance references currently only exist in the
		meta language domain, however they could also be
		ported to the non-meta domain, oooooh.  
	  Removed pure virtual get_inst_base from mete_instance_reference_base
		because it only makes sense for simple_meta_instance_reference.


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-11:
	  gcc-4.0-ism: Object/art_built_ins.cc: member initializations 
		of specialized classes don't need empty 
		template <> signature.  
	  util/test/Makefile.am: added macro for compiling with -save-temps
		for compiler debugging. 
	  NOTE: This snapshot (on branch) is confirmed to compile and run
		succesfully with Apple's gcc-4.0 build 5026 update.  
		The one that shipped with OS X 10.4 Tiger (build 4061)
		is badly broken, please update your compiler with the
		XCode 2.1 Developer's Tools update before compiling.  
	  Hopefully, after the dataexpr branch is done, this can all
		be soon merged back onto the main trunk.  Patience!


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-10:
	  Portability and compiler compliance patch, 
		also for VPATH build robustness.
	  Obsolete template method definition removed from parser::context.
	  Added auto-generated empty stderr files
		to BUILT_SOURCES in src/util/test/Makefile.am.  
	  src/util/test/test-expect.sh:
		check for auto-generated .stderr files, because
		won't be in srcdir.  


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-02:
	  New base classes for data-expressions (CHP context)!
	  data_expr is refined as int_expr and bool_expr, and now
		(here's the kicker) pint_expr : int_expr and
		pbool_expr : bool_expr!  
		Rationale: In the CHP context, meta-parameter 
		(of the same type) are valid rvalue expressions 
		just as run-time variables of int and bool are.  
	  Rename: datatype_instance_reference ->
		datatype_instance_reference_base
	  TODO: fahr-fahr-away, use GMP's mpz for arbitrary length integer.  
	  Introduced refined instance_reference: data_reference<Tag>
		which is derived from instance_reference<Tag>
		and from an data expression interface class (int_expr
		or bool_expr).  Such data instance references serve as
		connectible entities and assignable entities in the
		CHP context.  (Analogous to what was done with
		value_reference for meta-param references.)
	  Relocated datatype_instance_reference(_base) to 
		"Object/art_object_inst_ref_data.h"
	  A few new test cases for test/parser/channel.  


2005-06-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-01:
	  This branch is for developing expression framework for datatypes, 
		very similar to those of meta-parameter expressions.  
	  In this revision, we've FINALLY liberated the param_expr
		(and friends) class hierarchy from the 'object' parent class, 
		which we could've done after we did away with the 
		object-expression stack in parser::context.  
		One less virtual pointer per expr-object!


2005-05-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09:
	  Partial implemention of parser::CHP::statement::check_action
		for a few statement classes (untested).
	  Skeletal implementation of entity::CHP classes in
		"Object/art_object_chp.{h,cc}"
	  Assigned CHP classes' type hash in "Object/art_object_type_hash.h".
	  Added a few basic template channel prototype tests, so far so good.  
	  TODO: object expressions... we need *datatype-expressions* for CHP, 
		currently we only have meta-language (param) expressions.  
		This work must be done IMMEDIATELY, probably on a sub-branch
		of this branch.  


2005-05-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-08:
	  Purged all traces of parser::context::definition_stack.
	  New class: old channel_type_reference was split off into
		builtin_channel_type_reference and channel_type_reference, 
		with common parent channel_type_reference_base.
		(Will soon rename channel_type_reference 
		to user_channel_type_reference.)
	  builtin_channel_type_reference just contains a list of 
		data_type_reference (pointers), which represents channel
		types of the form "chan(type,...)" without having a 
		builtin_channel_definition.  
	  The base channel type of a user-defined channel has been reduced
		to a builtin_channel_type_reference.  
	  entity::user_def_chan now contains (pointer) 
		builtin_channel_type_reference.  
	  Moved some parser functionality around to follow changes
		in the channel_type_references.  
	  Updated class_traits<channel_tag> in 
		"art_object_classification_details.h"
		Never before have I been so happy that I did this -- 
		what would've been days of changing code across tens of
		files was accomplished with TWO line changes in the 
		policy classes.  Also added new sub-tags of channel_tag
		in "art_object_classification_tags.h" but not used yet, 
		until we decide to split off channel_tag.  
	  Type hash keys for channel type references updated.  
	  TODO: now ready to type-check and add CHP?
	  TODO: more test cases, perhaps preliminary template checks.  


2005-05-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-07:
	  Reorganized parser type references to fit the needs of channels.
	  The basic issue is that built-in channel types (chan(...)) 
		currently have no home scopespace, therefore we must
		work their type information into
		"built-in-channel-type-references", which are coming soon.  
	  TODO: split up channel type references into built-in and
		user-defined (currently, only user-defined).
	  parser::context: phased out definition_stack, which was once
		used as a placeholder to construct complete type references.  
	  concrete_type_ref now an abstract class, the old functionality
		has been pushed down to (new) generic_type_ref.
	  chan_type now derives from concrete_type_ref, no longer type_base.
	  generic_type_ref::check_build has been phased out due to
		abandoning the context definition_stack.  
	  typedef_alias::check_build base type is concrete_type_ref, 
		which is now abstract, so we temporarily wrapped the 
		existing code (for generic_type_ref) in a conditional
		dynamic cast, just to patch and move on... will revisit
		later to complete the chan_type case.  
	  parser/art++-parse.yy: updated symbol return types to reflect
		changes in concrete_type_ref hierarchy.  


2005-05-27	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-06:
	  Added some template methods to context to replace annoying
		copy-pasted methods.  
	  Partially implemented user_chan_type_definition check.  
	  Added a handful of test cases to test/parser/channel.


2005-05-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-05:
	  Finished initial crack at type-checking channel definitions, 
		currently, only checking prototype declarations, 
		punting definitions for a few more revisions until
		further testing.  AST files (,h.,tcc) touched: art_parser_base,
		art_parser_definition, art_parser_formal, art_parser_type.
	  Factored out concrete_type_ref::check_build into more useful
		::check_type (useful return value).  
	  Split-off "Object/art_object_definition_chan.h" from 
		"Object/art_object_definition.h", it also uses
		the recently added "Object/art_object_port_formals_manager.h".
		Added a few necessary virtual method overrides 
		to user_def_chan, like those in process_definition.  
		Also cleaned up conditionals, making USE_PORT_FORMALS_MANAGER 
		permanent.  
	  entity::user_def_chan has new field members:
		datatype_list: the datatype (abstract) carried on channel
		port_formals: the physical datatypes used to implement
	  Very basic test cases added so far, more coming in next revision.  
	  Grammar: updated to allow non-built-in datatypes in channel
		definition's abstract data type list.  
	  

2005-05-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-04:
	  Revenge of the BSD.  
	  Patches to satisfy gcc-3.4 on FreeBSD, more compiler anality.  
		(Unfortunately, still need to run gmake, not bsdmake.)
	  Changed built-in param type pointers to be part of
		class_traits<Tag> specializations.  
		Global static initialization remains in "art_built_ins.cc".
	  Code cleanup: caught many missing declarations required by gcc-3.4+.
	  src/util/test/Makefile.am link dependencies fixed to work 
		with bsdmake, on the off chance that I forget to run gmake.  


2005-05-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-03:
	  Factored out port_formals_manager into own class, 
		now can reuse it for channel_definition, etc.
		That was too easy.  
	  New class files: "Object/art_object_port_formals_manager.{h,cc}"


2005-05-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-02:
	  Reorganizing code to make way for channel definition type checking.  
	  Some housecleaning of committed conditional code in
		"AST/art_parser_type_base.h".  
	  TODO next: factor out port_formals_manager from process_definition
		so we may reuse it in used_def_chan.  


2005-05-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-01:
	  Starting CHP-01 branch.
	  Liberated parser::CHP classes from the old "check_build".
		Still null implementations at the moment.  
	  Going to fix definition checking, possibly in a sub-branch, 
		before embarking on channel definitions and CHP.  
	  Temporarily made chp_body in grammar optional in several places.  
	  Coming soon: test/parser/channel.  


2005-05-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42:
	  Wrote example program of what one might do with production rules
		in an object file, in "prsobjdemo.cc".
	  Updated header checks to use .tccchk suffix for .tcc files.  
	  artobjunroll: check to make sure input file != output (strcmp).  
	  name_space::collect_namepaces works recursively, as it should.  
	  Added collect<> template method to module and namespace, 
		defined in their respective (new) .tcc files.  


2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-41:
	  Header checks: now using .tchk for .tcc files so suffix rules
		don't clash.  
	  Added Object/art_object_util_types.h, which inherited some
		less essential typedefs from Object/art_object_fwd.h.
	  Chased down a few cases of using namespace in headers, 
		and added count_ptr.tcc where necessary.  
	  Few more spots of header fixes.  
	  

2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-40:
	  Lordy, lordy! Snapshot forty!  (This epoch is maturing...)
	  Continued general maintenance:
	  Makefile.am improvements on standalone header validation.  
		Reorganized macro file lists a bit.  
	  generated parser/art++-parse-prefix.h now includes
		(new) "parser/art++-unioin.h" for necessary AST
		class forward declarations to define the YYSTYPE union.  
	  Distribution (distcheck) is still immaculate.  


2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-39:
	  Source organization revision.
	  Instated really anal-retentive "standalone header" tests, 
		affecting headers in all subdirectories.  
	  New Makefile targets:
		check-headers: compiles each {.h,.tcc} file into own executable
			(empty main) to test whether header file depends on
			other headers not already included.  
			Nobody likes a header that only works when other
			(unknown) headers are included.  
		clean-header-tests: basically rm -rf *.hchk
		check: always builds and runs all *.hchk's now.
	  Finally conform to rule: NO "using namespace ...;" in header files, 
		only allowed in source .cc files.  
	  Had to painstakingly explicitly include proper pointer-class
		sources where I was plain lazy before and just included
		"util/memory/pointer_classes.h".  
	  Split up some forward declaration files in util and Object for 
		modularity, minimizing preprocessing in some cases.  
	  Created "util/size_t.h" which includes (conditional on configure)
		<cstddef> for the declaration of size_t.  
	  Making this revision distcheck required some finesse with
		Makefile.am.  


2005-05-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-38:
	  Added basic getopt functionality to main programs.  
	  Updated "util/getopt_portable.h" to use configure results.  
	  Factored out main-level functions into main/main_funcs.{h,cc}.
		This nicely hides complexity, making main source 
		tidy and modular.  
	  Separated out util/ library to compile to libfangutil.la.
	  Parser: empty file now returns in non-NULL empty root_body pointer.  
	  util:
		static_trace.h: DEFAULT macros added for simplicity
			(updated uses in AST/*.cc Object/*.cc)
	  some more comments in util/ChangeLog.
	  see also test/ChangeLog for test script updates in this revision.  

	* linux-gcc-3.4 linker not as forgiving about undefined typeinfo of
		unused classes, read: I was lazy.
	  Added skeletal method definitions for currently unused class.


2005-05-19	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-37-merged-PRS-01-09:
	  Merged the -PRS-01 revisions (through -09) to main.  


2005-05-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-09:
	  Added a bunch of simple tests for PRS in tests/parser/prs.
	  Fixed some minor bugs *gasp* I discovered on the way.  
	  Added sanity check functions to entity::PRS classes.  
	  Renamed and finished PRS::rule::expand_complement.
	  Adding production rules now auto-expands complements.  
	  prs_expr::dump is prettily-parenthesized.  
	  Updated test/Make.test to include a 'cleaner' target.  


2005-05-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-08:
	  Now using ref-counts for all entity::PRS::prs_expr.
	  Finished implementing PRS::prs_expr::negate and 
		negation_normalize (both untested).  
	  Patched count_ptr so self-assignment is checked and handled
		appropriately (could think of it as a bug before, 
		or an unstated limitation).  
	  TODO: generate new test cases for PRS functionality.  
	  TODO: write an example of accessing a process-definition's
		PRS, maybe doing some transformations or diagnostics.  
	  TODO: write some template collection passes for 
		namespace, definitions, etc.
	  IDEA: collate structurally identical bool instance references 
		together into the same reference count pointer, 
		by caching the literals' vars.  


2005-05-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-07:
	  This revision doesn't really belong here, but it was done anyhow.
	  What's good for the gander, is good for the goose.
	  Most changes apply to the util library, almost nothing is specific
		to art++ itself.  
	  Updated some uses of util::static_trace -- it really should be
		as early as possible in each translation unit
		for accurate reporting.
	  util::memory::count_ptr now pool allocates reference-counts, 
		making their use extremely efficient.  
		The difficulties lie with a global consistent reference
		to the state of the count-allocator, which itself needs to
		be reference-counted for coherent global static initialization.
		Note: all maanual management of count pointes should use
		the STATIC_RC_POOL_REF_INIT and NEW_SIZE_T macros
		defined in "util/memory/count_ptr.h".
		Also, count_ptr.tcc was split off to facilitate completing
		definitions of other types before their destructor definitions
		are required by the delete operator.  
		Currently, the global reference-count pool is never freed
		until exit -- see remark in 
		"util/memory/ref_count_pool_anchor.h".  
	  Added more useful utility functions to util::memory::chunk_map_pool
		and friends.  
	  Updated some tests in util/test to accommodate library updates.  
		

2005-05-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-06:
	  PRS::literal changed to include a count_ptr<bool_instance_reference>
		making it trivially copy-constructible.
	  PRS::pull_{up,dn} includes literal (not pointer thereof) now, 
		resulting in more efficient storage.  
	  PRS::prs_expr and rule's are now chunk_map_pool-allocated.  
	  Some code clean up.  
	  NEXT: negation-normal-form and other utility methods.  
		Possibly reconsider choice of pointers classes
		for expression operands.  


2005-05-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-05:
	  Now actually adding production rule objects to process_definition.
	  Implemented PRS dump routines for readable feedback.  
		Currently prints using short local (unqualified) names.  
	  Updated many (object) tests to account for increased size of 
		process_definition binary object
		(+4B for size of PRS pointer list).  
	  This snapshot is a candidate for merging back to main trunk.  


2005-05-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-04:
	  Completed expr::check_prs_expr implementations for the 
		relevant expression classes (partially tested).
	  Updated constructor interfaces of entity::PRS classes.  
	  Added blank PRS::rules_list to process_definition, 
		but doesn't do anything with them yet.
		TODO NEXT: implement addition, dump, object persistence.  
	  Moved some files, added some files:
		Split off Object/art_object_PRS_base.h and
			Object/art_object_definition_proc.h.
		Added util/iterator_more.h.
	  One basic test updated parser/basic/013.stderr, was unchecked,
		now gives error.  


2005-05-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-03:
	  Parser: promoted token_string and token_char to node_position.
	  Filled-in parser::relational_expr::check_expr, and
		parser::logical_expr::check_expr.
	  Upgraded some expression types in classes for stronger typing.  
	  Started setting up check_prs_expr infrastructure in PRS and expr.  


2005-05-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-02:
	  Added initial skeleton classes for PRS objects.  
		Fill-in-the-blanks soon.  
	  Some util library stop-tweaks: persistent_object_manager
		now tracks raw_pointer read-visits separately, 
		added collect_pointer_list template method.


2005-05-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-01:
	  This branch is for early development of PRS management.  
	  The initial revisions do some clean-up with a few parsers'
		check_build routines; they are still functionally ugly.  
		Beginning to make check routines consistent using more
		CHECK_PROTO macros to keep things straight (e.g. type_base).  
	  node_list has a new check_list template method
		that allows one to specify which element's member function
		to invoke recursively.  We intend to eliminate all generic
		calls to check_build accordingly.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-07:
	  All cleaned up, and ready to merge back to main trunk!
	  All obsolete code involving expr::check_build... GONE.  
	  No trace of object_list remains, nor any of the 
		evil associated therewith.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-06:
	  Pretty much done amputating:
	  entity::object_list is practically eliminated, Gott sei dank!
	  parser::context's object stack is gone.  
	  parser::expr::check_build (and friends) has been phased out.  
		(All conditionally commented out HAVE_EXPR_CHECK_BUILD.)
	  No longer instantiating node_list<const expr>.
	  Eliminated unused class parser::connection_argument_list.
	  Updated calls to check_build to use check_expr and check_reference,
		mostly affecting "AST/art_parser_instance.cc".
	  Upgraded parser::connection_statement's lvalue to inst_ref-expr*.  
	  It's all coming together... now just have to clean up
		the mess of comments and obsolete code.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-05:
	  Continued gradual elimination of expr::check_build (and friends).  
	  Removed inst_ref_expr::check_build().
	  Moved alias_list::postorder_check to expr_list, along with a few
		other useful static functions.  
	  New method for actuals_base::check_actuals, replacing check_build.
	  Added replacement methods for instnace_connection, and 
		connection_statement, calling new check_actuals.  
	  entity::definition has new prototype for certify_port_actuals, 
		process_definition::... has updated definition.  
	  Ported object_list::make_port_connection to 
		connection_statement::make_port_connection (static).
	  parser::actuals_base no longer derived from instance_management.  
	  parser::connection_statement now derived from instance_management.  
	  Partially cleaned up some obsolete code, but there'll be more
		deletions in the next revisions, I promise.  


2005-05-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-04:
	  Added expr::check_generic (virtual) to present the result of
	  check_expr or check_reference dynmiacally cast to the other type, 
	  solely for the purposes of working with alias_list's checking
	  procedure.  (read: kludge, but less than it was before)
	  id_expr and member_expr primary check method is now check_reference.  
	  Added placeholder check_generic routines to array_concatenation, 
	  loop_concatenation, and array_construction.  
	  (Will need to add check_reference routines once we start 
	  implementing them.)
	  Updated alias_list::check_build to use check_generic, 
		and moved object_list make_param_expr_assignment
		and make_alias_connection methods into private methods.  
	  Updated token_identifier to use check_reference.  


2005-05-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-03:
	  Checked implementation of check_expr, check_reference, 
		check_indices, check_ranges and fixed minor bug 
		since last revision.  
	  Replaced calls to [dense_]range_list::check_build()
		with check_ranges and check_indices where appropriate:
		formal_id's, instance_array.  
	  One problem: check_expr returns param_expr, whereas
		check_reference returns instance_reference_base, 
		both of which are 'objects'.  alias_list is a list of
		expr, but wants generic objects to determine at type-check
		time whether it is forming an expression assignment
		or alias connection sequential instance management item.  
		Thus, we cannot eliminate the object stack (nor calls to
		expr::check_build) until this is resolved.  


2005-05-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-02:
	  Implemented expr::check_expr (pure virt.) by mostly trivially
		copying over the old check_build's.  
		Intend to phase out expr-related check_build calls in
		favor of check_expr.  
		check_index, check_ranges, etc. are analogous.  
	  Minor: split off range and range expr into own AST source file.  
	  Minor: permanently erased paren_expr class.  
	  Minor: inst_ref_expr class to sub-type expressions that
		represent instance or value references, adds a virtual
		function check_reference, which will leverage the work
		done by check_expr (or vice versa).  
	  Minor: removed class postfix_expr (was useless).
	  Minor: continued to strip out useless tokens in the AST, 
		also cleaning grammar.  


2005-05-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-01:
	  This branch is intended to rework the way expression checking
	  is done by the parser, replacing the archaic check_build
	  in an orderly manner with object-specific interfaces and routines.
	  In particular, this branch deals with expression checking.  
	  The main goal is to delete the old context::object_stack mechanism
	  used to construct hierarchical expression objects.  
	  This first revision deleted the useless parser::postfix_expr class.  
	  As a result, parser::index_expr is directly derived
	  from parser::expr.
	  After this branch is complete, we can work on fixing
	  type-references (w.r.t. strict and relaxed templates) in
	  a cleaner fashion.  


2005-05-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35 (main trunk):
	  Major organization for sake of code maintainability:
	  Eliminate CPPFLAGS -Iblah.  Include files relative to 
	  root path of source tree, i.e. with Object/ or util/ or AST/...
	  Motivation: reduces code obfuscation, by letting the casual
	  reader know where to find dependent files, rather than counting
	  on knowing which subdirectory each included file belongs in.  
	  Also cleaned up some obsolete code in util/ directory, 
		reducing almost 2000 LOC.  


2005-05-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-34 (main trunk):
	  Cleaned up old hash_string code (useless).  
	  Improved some expr/inst_ref dump code to be more verbose, 
		qualifying names of value-references.  


2005-05-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-33 (main trunk):
	  Cleaned up conditional code
	  (should've been committed in -template-01 branch).
	  Also removed some dusty obsolete code snippets.  


2005-05-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-30 (main trunk):
	  Updated parser/try_lex_catch.awk to also work with yacc output.  

	* ARTXX-00-01-04-main-00-28-merged-template-01-09 (main trunk):
	  Merged -template-01 revisions back to trunk.  

	* ARTXX-00-01-04-main-00-27-template-01-09:
	  Clean up of previous release: expurgated ART::parser::node!


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-08:
	  It is done.  ART::parser::node (and all its evils) have been phased
	  out, in favor of a cleaner token class heirarchy.  
	  Not a single test broke!
	  This revision has commented out the evil, next revision will
	  clean up.  


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-07:
	  Auto-generated parser helper code (union) no longer needs to 
	  return a mother pointer (node*).  
	  It 'virtually' implements the two neceessary functions in two
	  giganormous function pointer tables (delete, what_where).  
	  (A virtual virtual call!)
	  Soon, going to remove ART::parser::node!


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-06:
	  Parser awk scripts: factored out common subroutines into
	  separate scripts, so now need to invoke awk -f with co-dependent
	  scripts.  This reduces duplicate maintenance on these files, 
	  which will soon be modified, at the cost of having to keep around
	  more script files.  


2005-05-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-05:
	  Updated grammar to include instance type completion, 
	  where array instances may have their types completed
	  with relaxed template arguments (after array is declared with 
	  strict template arguments).  
	  (Includes type_completion + connection statement.)
	  check_build for these new classes is yet unimplemented.
	  GRAMMAR UPDATE: removed semicolon after namespace close-brace.
	  Not keeping around silly semicolons in AST structures, 
		deleting useless tokens immediately in parser.  
	  Tests updated accordingly.
	  TODO: re-update all tests with YACC=/usr/bin/yacc configuration.  
		(been forgetting to do this for a long time...)


2005-05-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-04:
	  Updated ART::parser::node_list::what() message (and test cases).
	  Created class ART::parser::template_argument_list_pair, but unused.
	  Added util/type_traits.h for convenience and compatibility.  
	  Some more parser implementation notes in src/parser/NOTES.  
	  Standardized header inclusion in parser/{yacc,bison}-union-hack.awk.


2005-05-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-03:
	  Parser context now adds template formals to either the 
	  strict parameter list or the relaxed parameter list.  
	  Some minor re-organization to reuse code in template_formals_manager.
	  TODO: Type-references template arguments need to be split into
	  strict and relaxed.  


2005-04-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-02:
	  Substituted old template_formals_list and _map in definition_base
	  with a template_formals_manager (basically wrapper around the former)
	  and split up single formal parameter list into a 
	  strict list and relaxed list.  
	  Many definition_base method calls now just wrap around calls
	  to template_formals_manager methods.  
	  As a consequence, the binary format of all definitions
	  has been extended by one pointer-list.  
	  Since none of the current test-cases use relaxed parameters, 
	  the object sizes (per definition) were increased by 4 bytes, 
	  the sizeof(size_t) for '0' representing an empty list.  

		+ Some type-check error messages have been improved.  


2005-04-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-01:
	  Updated parser to extend template formal signature to 
	  include (optional) list of relaxed parameters.  
	  In transient state: currently type-checking treats
	  both formal lists as one unified list, even though it is now
	  implemented as a pair of lists in the AST.  
	  The definition structure has not been updated yet.  


2005-04-18	David Fang		<fangism@users.sourceforge.net>

	* ART::entity::scopespace is no longer : virtual public object, 
		and ART::entity::namespace is : public object.
		(rationale: simplified class heirarchy somewhat.)

	* ART::entity::definition_base no longer inherits from
		public object virtually.  

	* Started this ChangeLog for more details.  

