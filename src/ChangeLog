"ChangeLog"

2005-07-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-10:
	  TONS of functional addition, upgrades, and fixes in this revision.  
	  process_type_reference::unroll_resolve():
		invoke the template_actuals_transformer (unroll_context)
		on template actuals before unroll-resolving.  
		TODO: validate the created type.  
	  simplified unroll_context::resolve_meta_value_reference.
	  Added (non-persistent) value cache to const_collection, 
		currently unused, but will come in handy later.  
		TODO: should be mutable.  
	  Implemented meta_value_reference::unroll_resolve_dimensions().
	  meta_value_reference::unroll_resolve() now properly
		handles normal and template-dependent actuals, 
		better error reporting in case of bad dimensions, 
		try-catch around const_range_list::resolve_sizes(), 
		fixed bug in loop termination condition of do-while.  
	  entity::const_collection<>::make_value_slice()
		creates const_collection with slice of values
		specified by the indices.
	  entity::const_range[_list]: now catches error
		when range is invalid, for now throws an exception
		for error handling, but may rewrite later.  
	  {pbool,pint}_instance operator == updated to allow comparison
		between "uninstantiated" values.  If both are uninstantiated, 
		consider them equal, so default values are equal.  
	  template_formals_manager::resolve_template_actual updated
		to recursively resolve parameter-dependent parameters.  
	  const_collection iterator uses: replaced assignments w/ construction
	  Makefile.am: added .ii suffix rule for -save-temps debugging.
	  TODO: template_formals_manager::must_validate_actuals()
	  More critical fixes and improvements in the util/ library, 
		see src/util/ChangeLog for details.  
	  Several new tests to validate this revision added to
		test/parser/template, and more coming...


2005-07-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-09:
	  NOTES: resolved many outstanding issues about CHP language
		semantics and type constraints.  (not related to this branch)
	  Moved body of template_formals_manager::check_template_arguments()
		into (virtual) methods of param_expr_list.
		Also enabled checking and processing of relaxed template
			arguments.  
		Implemented, and no tests broke.  


	* ARTXX-00-01-04-main-00-48-connect-01-08:
	  Clean-up revision.  
		Removed obsolete (some still-born) code in definition
		and type-reference source files.  


2005-06-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-07-merged-actuals-08:
	  Merged in revisions from actuals (-08) child branch.  
	  Summary: implemented strict and relaxed template actuals.  
	  However, rest of code base needs to make use of it
		during instantiation and connection.  


2005-06-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-08:
	  Final branch revision before merging to parent.  
	  Some comments updated, mostly regarding done TODOs, 
		and doxygen comments.  
	  Branch summary: properly implemented strict and relaxed 
		template actuals.  

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-07:
	  Implemented template formal to actual reference resolution
		in template_formals_manager::resolve_template_actual
		and unroll_context::resolve_meta_value_reference.  
		The latter is called by unroll_resolve in
		"Object/art_object_value_reference.tcc".  
	  Reformatted pretty-print dumps of definitions and typedefs.  
		(Updated tests)
	  Enabled object unroll tests in test/parser/template, 
		and they all work, whoa.  
	  entity:: expression lists implemented with vector (replaced list)
		and added indexing operators.  
	  Slightly better control of explicit template instantiation 
		using "Object/art_object_extern_template.{h,cc}".
		NOTE: sequence of including the header file matters.
	  Branch nearing maturity.  


2005-06-29	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-06:
	  Clean-up revision: committed USE_NEW_TEMPLATE_ACTUALS(1)
		and removed conditional wrappings.  
	  Few more things TODO (already noted) before this branch matures.  


2005-06-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-05:
	  Massive and revolutionary revision (-1000, +2000 LOC).
	  Summary: enabled proper implementation of template actuals
		in type-references, and applied them to ... everything.  
	  Code differences are wrapped in the condition macro
		USE_NEW_TEMPLATE_ACTUALS, defined in 
		"Object/art_object_template_formals_manager.h"
	  All fundamental_type_references now replaced the old 
		template_params param_expr_list with a proper
		template_actuals, which basically contains two
		pointers to param expr lists (strict, relaxed).  
	  Parser/grammar: updated to include strict and relaxed template
		arguments at declaration time, and optional relaxed template
		arguments at instantiation time. 
		(AST::parser::template_argument_list_pair)
	  Semantic type-equivalence: refined and (partially) implemented
		{strict, relaxed} x {may, must} equivalence checking.  
		Strict checking is employed for connections and 
		non-meta assignments.  Relaxed checking is used for
		array/sparse collection member checking.  
	  Partially implemented definition_base::make_canonical_type_reference,
		and fundamental_type_reference::make_canonical_type_reference, 
		which in combination, creates canonical types by substituting
		template actual parameters into the base definition
		using transformed template actuals.  
	  Parser: PINT_TYPE and PBOOL_TYPE now return token param types
		that act as *complete* types (concrete_type_ref) instead of 
		just a plain type_base (representing base definition).
		Greatly simplifies type-generation of params.  
		(Slight shift in class hierarchies.)
	  Actually added members and methods to entity::unroll_context:
		TODO: make use of formals/actuals mapping in 
		meta parameter substitution for type canonicalization.  
	  More TODO notes in "Object/art_object_value_reference.tcc".
	  TODO: make sure grammar file semantic actions actually make 
		use of relaxed template arguments (see instance_id_item)
	  Nearly EVERY artobj unroll test updated to reflect the 
		size change of type-reference objects.  
	  Minor aesthetics, using construction-style (not assignment)
		for iterator initializations in several source files.  
	  parser::concrete_type_ref class definition relocated to
		"AST/art_parser_type_base.h"
	  Next (few) revisions: cleanup and commit conditional patched code.  


2005-06-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-04:
	  Cleaned up COUNT_TEMPLATE_ARGS dependence (committed as if = 1)
		as promised.
	  TODO: Resume enabling template_actuals use.  


	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-03:
	  Replaced excl_ptr<param_expr_list> with count_ptr<...>, 
		affecting the expr, definition, type_ref Object modules.  
		(also template_formals_manager, and AST/art_parser_base.cc")
	  Also took the time to replace iterator initializations
		with copy-constructors in "Object/art_object_expr.cc".
	  Code is transiently a mess with conditionals all over, 
		dependent on COUNT_TEPMLATE_ARGS in 
		"Object/art_object_definnition_base.h".  
	  Next micro-revision will be a clean up.  


	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-02:
	  Got sidetracked in this revision:
		Figured out how to automatically generate unique identifiers
		using cpp, after discovering macro tricks on the web.  
		See corresponding "src/util/ChangeLog" entry for details.
	  Currently USE_NEW_TEMPLATE_ACTUALS is disabled in
		"Object/art_object_type_ref_base.h".  This revision did
		partially fill-in-the-blanks w.r.t. the 'template_actuals'
		class.  Needs more massaging before will compile.  
	  Outlined: new type-checking primitives, two flavors:
		relaxed (collectible), and strict (connectible) equivalence.
	  TODO: replace excl_ptr<param_expr_list> with count_ptr<...>
		This will enable us to switch between old-wrong and
		new template-actuals implementation for the duration
		of this branch.  


2005-06-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-06-actuals-01:
	  Once and for all, we're going to do template actuals the CORRECT
		way, using strict and relaxed template arguments.  
		This has been waiting in the wings for the last several
		months... now its time has come.  
	  Rise my young apprentice... and henceforth shalt thou be known
		as... Darth Template.  
	  Once this branch matures, we will use it properly unroll 
		complete definitions (types) and keep per-definition
		repositories of substructure maps.  
	  Added (disabled) "Object/art_object_template_actuals.{h,cc}".


	* ARTXX-00-01-04-main-00-48-connect-01-06:
	  Minor cosmetic re-organization of files in preparation for 
		some more drastic revisions.  Chopped up 
		"Object/art_object_classification_details.h" into 
		pieces named "Object/art_object_*_traits.h".
		Modularity will speed up recompilations.  
		Headers updated to include their appropriate traits.  
	  Added "Object/art_object_inst_stmt_type_ref_default.h" 
		for convenience.


	* ARTXX-00-01-04-main-00-48-connect-01-05:
	  In unrolling call-graph, now favoring returning error status
		instead of throwing exception upon error.  
	  Updated some comments.
	  Updated some tests (unroll test stderr expect).


2005-06-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-04:
	  Micro-patch:
	  In a miraculous turn of events, switching to 3-phase unrolling
		didn't break a single test in the testsuite.  
		I am either THAT good, or that bad at writing stress tests.  
	  module::unroll_module currently set to 3-phase unroll,
		effective at least for the remainder of this branch.
	  Should do: devise test cases where the behavior is different, 
		some accept-invalid or reject-valid cases.  


	* ARTXX-00-01-04-main-00-48-connect-01-03:
	  Fleshed out 3 phases of unrolling, re-using old unified-unroll code.
		Implemented unroll_meta_instantiate and unroll_meta_connect.  
	  Try: replacing unified unroll with 3-phase unroll to see what
		test cases differ.  
	  Tentatively gave old unroll method good_bool return value. 
		TODO: try eliminating THROW_EXIT statements.  
	  Phase out generic "unroll", if possible.  
	  

	* ARTXX-00-01-04-main-00-48-connect-01-02:
	  Planned a 3-pass approach to unrolling (updated NOTES):
		1) meta param instantiation and evaluation
			::unroll_meta_evaluate()
		2) physical instantiation
			::unroll_meta_instantiate()
		3) physical connection
			::unroll_meta_connect()
	  Renamed param_instantiation_statement to 
		param_instantiation_base.
	  New template param_instantiation_statement to override
		instantiation_statement, and implement unroll_meta_evaluate.
	  Updated instantiation_statement template class to make methods
		available to children, and updated this_type
		to follow the class_traits policy.  
	  NEXT: Implement 3-phases of unrolling.  


2005-06-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48-connect-01-01:
	  This branch has the ultimate goal of implementing port connections
		and member connections, but much has to happen first.  
	  See NOTES file on prerequisite features.  
	  First few revisions of this branch will be for planning
		the high level changes necessary.  
	  Sub-branches of this will concentrate on implementing one dependent
		feature at a time.  
	  Deep breaths...


2005-06-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-48:
	  Grammar: generic_type_ref can take an optional direction [!?]
		non-terminal after optional_template_actuals
		to account for directionality of user-defined channel types.  
	  AST classes updated to accommodate this update.  
		generic_type_ref::check_type properly checks for
		channel type (dynamic_cast) before applying direction.  
	  entity::definition_base::make_fundamental_type_reference's return
		type is now (non-const) count_ptr<fundamental_type_reference>.
	  Fixed channel_type_reference::dump to print directionality.  
	  Few new test cases that use user-defined channel-type in ports
		added to parser/test/connect, but not unroll-checked yet.  
	  TODO: next branch port connection, and all prerequisites... oi...


	* ARTXX-00-01-04-main-00-47:
	  Added CHP bodies to user-defined-datatype (set, get), 
		even though I don't know what these do yet.
	  Added port-formals and data-type-reference base to 
		user_def_datatype.  
	  As a result, the fake built-in definition for int and bool
		are bigger by 16 bytes.  Nearly every unrollstderr
		test output was updated to reflect this change.  
	  Split off "Object/art_object_definition_data.h" from
		"Object/art_object_definition.h".
	  Parser now checks and handles datatype's CHP, similarly to
		channel definitions.  
		

2005-06-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-46:
	  Added send/recv CHP bodies to user-defined channel definitions.  
	  parser::user_chan_type_def's bodies down-typed to CHP::body.
	  Some code clean-up.
	  Few simple test cases to demonstrate channel CHP bodies.  


2005-06-21	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-45-merged-anal-04:
	  Merged in branch revisions for anal-retentitiveness, 
		turning on max warnings, warnings-to-errors.  
	  Code was cleaned up, no non-standardness remains.  
	  Life is good.  


	* ARTXX-00-01-04-main-00-44-anal-04:
	  Cross-checked clean, warning-free code across a few platforms
		and gcc versions.  
	  Ready to merge to trunk.  


	* ARTXX-00-01-04-main-00-44-anal-03:
	  Instated possibly THE MOST anal retentive compiler warning policy
		known to man.  If you don't know what the following warning
		flags mean, I suggest learning.  
	  In Makefile.am:
		GENERAL_WARN_FLAGS = -W -Wall -Wundef -Wshadow -Wno-unused
			-Wpointer-arith -Wcast-qual -Wcast-align
			-Wconversion -Werror
		WARN_CFLAGS = -Wmissing-prototypes -Wstrict-prototypes
			-Wbad-function-cast -Wnested-externs
		WARN_CXXFLAGS = -Wold-style-cast -Woverloaded-virtual
		The only files that need exceptions are the yacc/lex-generated
			parser and lexer files, which are given
		PARSER_NOWARN_FLAGS = -Wno-old-style-cast -Wno-shadow
			as additional flags for preliminary compilation into a 
			separate convenience library, libhacktparsers.la.
		libart++.la links in libhacktparser.la, so libart++.la
			remains all-inclusive.  
	  Rest of source code gets a minor face-lift to conform to 
		the new compiling standard.  Mostly renaming of local
		identifiers to satisfy -Wshadow.
	  Minor entry also in src/util/ChangeLog.


2005-06-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-44-anal-02:
	  Now compiling with -pedantic-errors dialect flag.
		(read: total overkill anal retentiveness)
	  Updated a few header/tcc files to use the new scheme of
		suppressing implicit template instantiations.  
	  See "src/util/ChangeLog" for details.
	  Notably: in "Object/art_object_extern_templates.h"
		Replaced non-ISO extern template declarations with
		template definition-suppressing macros.  
	  Dependent files affected: "Object/art_object_instance_collection.tcc"


	* ARTXX-00-01-04-main-00-44-anal-01:
	  Mini-branch dedicated to making life miserable.  
	  The aim of this branch is to enforce the utmost strictness in
		standard conformance and warning cleanliness.  
	  This will only hurt a little.
	  This revision: enforce -pedantic in CFLAGS and CXXFLAGS
		eliminated redundant operator conversion 
			in "util/memory/excl_ptr.h".
		disabled uses of "extern template", a GNU extension.
	  Upcoming:
		Macros in .tcc files to control implicit vs. explicit
		template instantiation by excluding dependent
		template definition .tcc files.  


2005-06-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-43-merged-CHP-01-25:
	  Merged summary:
		CHP language support with persistent intermediate objects.  
		Framework for nonmeta language instances, value references, 
			and expressions.  
		Some CHP-related grammar updates.  
	  TODO: documentation... in dox/lang


	* ARTXX-00-01-04-main-00-42-CHP-01-25:
	  After a configuration header patch, this snapshot is gold!
	  Certified for merge to trunk.  


	* ARTXX-00-01-04-main-00-42-CHP-01-24:
	  Code clean-up only.  
	  distcheck passes.  
	  Candidate for trunk merge.  
	  (Multi-platform check pending.)


	* ARTXX-00-01-04-main-00-42-CHP-01-23:
	  parser::CHP: Moved list<guarded_command> functionality into 
		the 'selection' base class.  
	  Implemented parser::CHP::do_until and entity::CHP::do_while_loop
		(yeah, I know: terrible names...)
	  This branch is ready for merging to main-line after a clean-up.  
	  Grammar: chp_do_until builds from *unmatched* deterministic
		guarded command list, because any else clause would
		make it an infinite loop.  
	  Updated hash_keys of bool_logical_expr::op_map
		for AND to "&" and OR to "|" to stick with old-style CHP, 
		until further change.  (Must be consistent with grammar.)


	* ARTXX-00-01-04-main-00-42-CHP-01-22:
	  Reinstated stmt_list as a class from stmt_list_base, 
		and implemented common convenience check_action, 
		that automatically returns single action for list size 1.  
		Added is_concurrent flag to direct whether or not
		action_sequence or concurrent_actions should be constructed
		if size > 1.
	  typedef parser::CHP::guarded_command	parser::CHP::else_clause;
		Note: token_else is allowed to return NULL for guard
			and skip statment allowed to return NULL.  
		These cases are handled appropriately.  
	  Updated some comments in "AST/art_parser_chp.cc".
	  Implemented guarded_command::check_guarded_action().  
	  Implemented wait::check_action().
	  Implemented [non]det_selection::check_action().
	  Updated loop::check_action(), using stmt_list::check_postorder_stmts.
	  Updated entity::CHP::guarded_action::dump(), allowing NULLs.  
	  Grammar (CHP): skip statements may only appear by themselves, 
		i.e. chp_body_or_skip, in place of a stmt_list.  
	  More new test cases, most for guarded statements and selections.  


2005-06-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-21:
	  Grammar: isolated CHP expressions from general meta language
		expressions for modularity.  Updated assignments to
		use the traditional ":=" operator.  Re-enabled
		boolean assignment using +/- after transforming away
		a s/r conflict.  (Used to be ++, --)
	  AST::CHP updated assignment classes, now called
		binary_assignment and bool_assignment, no longer using
		generic base classes (parser::assignment and incdec_stmt).  
		TODO: phase-out generics
	  CHP::body::check_build():
		Fixed block partitioning w.r.t. loops, 
			now correctly divides up slices of statements
			based on position(s) of forever-loop statements.  
		Minor enhancement: one-statement actions no longer 
			go into action-sequences.  
	  Implemented statement::check_action for loop, 
		binary_assignment, and bool_assignment.
	  More test cases added to test/parser/chp.


2005-06-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-20:
	  Remembered to set_direction in chan_type::check_type... oops!
	  Implemented parser::CHP::receive::check_action().
	  Implemented inst_ref_expr::check_nonmeta_data_referencee(), 
		and inst_ref_expr_list::postorder_check_nonmeta_data_refs().
	  Implemented entity::CHP::channel_receive::add_references<>().
	  Slightly modified some type-reference dump methods.  
	  Many chp test outputs updated to include channel direction
		in ports list (and types in general).  
	  Added a bunch of new tests for type checking CHP receives.  
	  TODO: check CHP loops, guarded statements, selections, etc...


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-19:
	  Finished basic type-checking of CHP bodies, and added a bunch of 
		simple test cases in test/parser/chp.  More tests to come.  
	  Parse-failures for nonmeta expressions and references 
		have more verbose error messages, because of longer
		return path (rather than throw() on deepest error).  
		Distant TODO: organize and present error hierarchically
	  Implemented CHP object dump, and persistence in methods.  
	  Added CHP dump/persistence to process_definition, 
		which resulted in larger process_definition objects
		stored in the object file, tests have been updated.  
	  That said, this branch is in pretty good shape.  


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-18-merged-nonmeta-04:
	  Merged revisions from child branch, also including a minor
		typo fix in AST/art_parser_chp.cc.  
	  Summary: nonmeta value-references and data type checking.  


2005-06-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-04:
	  Final revision in this sub-sub-branch.
	  Added: Object/art_object_CHP.tcc for template method definitions.  
	  In CHP::body::check_build(), 
		now splitting up sequence of CHP statements as follows:
		Each group contains a sequence of CHP statements
		that end with a do-forever-loop.
		Each of these groups is added to the list of concurrent
		actions in the process definition.  
		Within each group, actions are sequential.  
	  Implemented: process_definition::add_concurrent_chp_body().
		Also added CHP field to process-definition, 
		but nothing is done yet with it.
	  TODO: in mother branch, make CHP body persistent.  
	  Replaced entity::CHP::channel_send::push_back
		with template method that takes care of type-checking.  
		Done some preliminary spot check testing, 
		but not added the new test cases to Makefile.am yet.
	  Object/art_object_CHP.h: new (unimplemented) do_forever_loop.
	  Update error messages on data (nonmeta) expression type mismatch.  
	  Fixed int_instance_collection::get_type_ref, actually now 
		fetches the type-ref of the first instantiation statmeent.
	  TODO: proper sub-typing of instantiation_statement, 
		further abstraction of index_collection_list.  


2005-06-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-03:
	  Added built-in bool_type_ptr (data_type_reference)
		for data expression type checking, 
		and int32_type_ptr just for convenience.  
		Tentatively pints are promoted to int<32>s when
		type-checking data expressions.  This may change later.  
	  Implemented (new, virtual) data_expr::get_data_type_ref()
		for non-meta expression type-checking (untested).  
		Tentative policy regarding int<>s:
			arithmetic and relational expressions must
			operate on ints of the same width 
			(if that can be determined statically, 
				i.e. not template or array-dependent)
			if cannot be resolved, then don't reject until unroll.
			if mismatch found, return NULL to signal error.  
		pbools are promoted to bool in nonmeta context.
	  Added new template policy to simple_nonmeta_value_reference:
		data_type_resolver: where each specialization dictates
			how a type-reference is created from reference.  
		simple_nonmeta_value_reference<Tag>::get_data_type_ref()
			is implemented using this policy.  
	  Renamed fundamental_type_reference::may_be_equivalent to
		may_be_type_equivalent, analogously for must_be_equivalent.  
	  The three policy structs for instance_collection<Tag>
		have been consolidated into one "collection_type_manager", 
		and also added new static function, get_type().
	  data_type_reference::make_quick_int_type_ref(size_t)
		purely for convenience.  
	  TODO: check expressions of send and receive actions in CHP.  


2005-06-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-02:
	  Header clean-up: liberating most Object/*.h headers from
		dependence on "Object/art_object_fwd.h" --
		conforming to a need-to-know policy for headers.  
		Consequentially, affected header files use their
		own forward declarations.  
		I'm so glad I have the 'check-headers' target for this...
	  Slightly faster rebuilds, certainly less building each time
		the art_object_fwd file is touched.  


	* ARTXX-00-01-04-main-00-42-CHP-01-17-nonmeta-01:
	  This branch is for developing nonmeta data instance references
		as run-time value-expressions, children of entity::data_expr.
	  This will enable basic expression type checking of data exprs.
	  Reserved for later development: operator overloading.
		See 2005-06-11 entry in NOTES.  
	  In this revision:
		Removed "Object/art_object_inst_ref_data.tcc"
		Added "Object/art_object_nonmeta_value_reference.{h,tcc}"
		Renamed: simple_meta_instance_reference_parent_type ->
			meta_instance_reference_parent_type
			(analogously for nonmeta)
		Introduced enum_expr and struct_expr (empty) in
			"Object/art_object_data_expr_base.h"
		Placeholder data_value_types for enum and struct (undefined)
			in "Object/art_object_expr_types.h"
		Added appropriate data_expr_base_type to class_traits for
			data and parameter type tag specializations.  
		Replaced data and param -subtyped nonmeta_instance_references
			with nonmeta_value_reference template class, 
			preserving typedef'd names.  


2005-06-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-17:
	  Working on CHP::send construction and type-checking.  
	  TODO: check data_expr against nonmeta_datatype_instance_reference.  
		Will need nonmeat_value_reference extensions.  
	  Partially implemented CHP::send::check_action().
	  Added expr_list::postorder_check_nonmeta_exprs().
	  Partially implemented entity::CHP::channel_send::push_back, 
		but likely to rewrite as for-loop.  
	  Some list members updated to vector types:
		builtin_channel_type_reference, CHP::send_action.
	  Obsolete code cleanup in "Object/art_object_definition[_chan].h"
	  Some quick helper methods added to channel-related classes.  


2005-06-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-16:
	  Starting to test CHP checking piece by piece.  
	  New basic CHP tests will go into test/parser/chp.  
	  expr_list::types added "meta" to names to distinguish from future
		"nonmeta" versions.  
	  Initial implementation of CHP::statement::check_action (virtual).
	  parser::CHP::communication's chan member now restricted to
		inst_ref_expr, naturally.  
	  parser::CHP::receive::lvalues is now inst_ref_expr_list, 
		was just expr_list.
	  Enabled id_expr::check_nonmeta_reference, which uses
		inst_base->make_nonmeta_instance_reference... works fine.  
	  entity::nonmeta_instance_reference new method
		get_inst_base_subtype, returns type-specific
		instance-collection ptr, as dictated by template type.  
	  Added direction (char) field to channel_type_reference_base, 
		valid values are '\0', '!', '?'.
	  Updated channel_type_reference_base::dump to include direction.  
	  Updated unroll test outputs in test/parser/channel.
	  parser/art++-parse.yy: update nonterminal types for
		chp_receive and inst_ref_expr_list.


2005-06-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-15:
	  Significant development to completing CHP objects using
		nonmeta-instance-references (-300, +1900 LOC).  
	  "AST/art_parser_chp.*" checked types are now (nonmeta) 
		bools and ints, not pbools and pints.  
	  Type name substitution for distinction: return_type ->
		meta_return_type and nonmeta_return_type
	  Method name substitution, analogously: check_foo ->
		check_meta_foo and check_nonmeta_foo.
	  Implemented most of expr::check_nonmeta_expr, untested.  
		(same with ranges and indices...)
	  Implemented (trivial) 
		instance_collection_base::make_nonmeta_instance_reference.
	  Implemented many classes in "Object/art_object_data_expr.cc"
		adapting many from their meta expression counterparts.  
	  Added new type hash keys to "Object/art_object_type_hash.h".
	  Removed: "art++.h"
	  Minor assertion updates in "util/persistent_object_manager.cc"


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-14:
	  gcc4-isms: wants method and typeinfo definitions for unused
		classes, probably being conservative.  
		Now builds and runs smoothly (but largely) on OS X 10.4.  
	  Updated parser/art++-parse-options.h to account for 
		bison-2.0 differences from bison-1.875.  
		Damn you, bison!

	* ARTXX-00-01-04-main-00-42-CHP-01-13:
	  distcheck fix: being smarter about auto-generated
		header-check dependencies -- basic script improvements
		for distcheck robustness.  


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-12-merged-dataexpr-10:
	  Child branch merge, details of this series below.  


2005-06-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-10:
	  Makefile.am: added -Wundef (die if preprocessor evaluates undefined)
		Also added new lex/parse options files to dist.  
	  lex/yacc files updated with preprocessor headers to satisfy
		use of undefined macros.  
	  Committed changes involving NEW_SIMPLE_INST_REF, 
		removing proprocessor conditionals.  
	  Updated CHP object classes to use int/bool expressions and
		non-meta instance references, finally!
	  Ready to merge back up a branch.


2005-06-07	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-09:
	  Skeletal (trivial) implementation of nonmeta_index_list.
	  Type hash keys for simple (meta) instance references updated
		to become distinguishable from simple nonmeta
		instance references.  (Macro names updated too.)
		Unroll test header dumps have been updated to reflect 
		this change.  
	  Added simple_nonmeta_instance_reference<Tag> classes, modeled
		after their meta-counterparts.  
	  Purged the proposed data_reference template class for good.  
	  Implemented essential methods of 
		simple_nonmeta_instance_reference_base.
	  Implemented core methods of simple_nonmeta_instance_reference
		template class.  
	  PLAN: After nonmeta_[data]_instance_references have been validated, 
		then that feature may be leveraged in the CHP object classes, 
		at which point, we can merge up a branch.


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-08:
	  Progress!  Replaced (meta) simple_instance_reference
		and value_reference class hierarchy with lattice, 
		enabled by the NEW_SIMPLE_INST_REF flag in 
		"Object/art_object_fwd.h".  
		Inheritance is a mess, but I've got plans for alternate
		implementations for the appropriate time.  
	  Little more renaming:
		*_meta_instance_reference ->
			simple_*_meta_instance_reference
		(rather than "simple" being implicit)
	  TODO: replicate for simple non-meta instance/value references!


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-07:
	  More painful reorganization and renaming... ugh.
		*_meta_instance_reference_base ->
			simple_*_meta_instance_reference_base
		value_reference -> simple_meta_value_reference
	  As soon as the dust clears, will rearrange (final)
		simple_*_meta_instance_reference classes with MI.  


2005-06-06	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-06:
	  Makefile.am: updated header-check make-dep flags (no -MT or -MP)
		using new scripts to "promote" header dependencies:
		rather than depend on the headers, depend on the
		*checked* header (*chk) files to ensure bottom-up
		construction (after first time) of header-checks!
		(I'm so proud of myself...)
		../config.h is an exception, don't check it.  
		Disabled clean-header-deps target.
		This also catches circuilar dependencies in headers
			e.g. betwee util/memory/ref_count_pool.h and
			util/memory/count_ptr.h (now fixed).
		for this project I want to be anal and forbid circular
			dependent headers.  
	  More massive class renaming:
		simple_meta_instance_reference -> 
			simple_meta_instance_reference_base
		meta_instance_reference -> simple_meta_instance_reference
			(class template)
		simple_nonmeta_instance_reference =>
			simple_nonmeta_instance_reference_base
		nonmeta_instance_reference ->
			simple_nonmeta_instance_reference
	  Exapnded type-refinements for data, channel, proc, param
		from nonmeta_instance_reference_base


2005-06-05	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-05:
	  Makefile enhancement: added (optional) dynamic dependence
		tracking for header-tests, which conditionally creates
		(user only) dependencies (.hchkd, .tccchkd) in the
		respective .deps subdirectories.  A complete list of 
		all such dependencies is auto-generated and used by 
		Makefile.am to auto-include in Makefile.in.  
		The major benefit of this is that now, the check-headers
		target will check all target header files that depend on
		the modified ones, not just the ones touched.  
		This patchlet should ideally make it back to the main
		trunk sooner...
	  More class planning for nonmeta_instance_references.  
		A massive reorganization is inevitable.  
	  Some header file cleaning.  


2005-06-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-04:
	  Massive renaming of classes continues...
		index_list -> meta_index_list, 
		index_expr -> meta_index_expr, 
		dynamic_index_list -> dynamic_meta_index_list, 
		dynamic_range_list -> dynamic_meta_range_list, 
		range_expr_list -> meta_range_list, 
		range_expr -> meta_range_expr
	  Added nonmeta expr classes to foundation of meta expr classes
		so that meta exprs are acceptable to nonmeta exprs.  
	  Inlined some empty base classes' ctors and dtors.  
	  TODO: nonmeta instance references.  


2005-06-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-03:
	  MAJOR rework of instance-references beginning.
	  All old existing instance reference were
		meta-instance-references, references that would eventually
		be resolved at compile time upon template instantiation. 
		CHP and other non-meta languages work with run-time
		resolved, or nonmeta-instance-references.  However, 
		it's important to note that meta-instance-references are
		acceptable where their non-meta-instance-references are
		expected (they are just run-time constant, after all).  
		Thus we introduce another level in the hierarchy, rooted
		at nonmeta_instance_reference_base.  
	  Global rename: (previous occurences)
		instance_reference -> meta_instance_reference
		(file names preserved for now, will change later)
	  entity::object parent has been expunged as a parent class
		from all instance-references.
	  Temporarily reverted USE_DATA_REFERENCE (in "Object/art_object_fwd.h")
		to 0 (off).  We intend to redefine data_reference in terms 
		of nonmeta_instance_references.  
	  NOTE: instance reference connections only live in meta
		language domain, thus it is kind of redundant to 
		call them meta_instance_reference_connection, but at least
		this makes it clear.  
	  NOTE: member instance references currently only exist in the
		meta language domain, however they could also be
		ported to the non-meta domain, oooooh.  
	  Removed pure virtual get_inst_base from mete_instance_reference_base
		because it only makes sense for simple_meta_instance_reference.


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-11:
	  gcc-4.0-ism: Object/art_built_ins.cc: member initializations 
		of specialized classes don't need empty 
		template <> signature.  
	  util/test/Makefile.am: added macro for compiling with -save-temps
		for compiler debugging. 
	  NOTE: This snapshot (on branch) is confirmed to compile and run
		succesfully with Apple's gcc-4.0 build 5026 update.  
		The one that shipped with OS X 10.4 Tiger (build 4061)
		is badly broken, please update your compiler with the
		XCode 2.1 Developer's Tools update before compiling.  
	  Hopefully, after the dataexpr branch is done, this can all
		be soon merged back onto the main trunk.  Patience!


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-10:
	  Portability and compiler compliance patch, 
		also for VPATH build robustness.
	  Obsolete template method definition removed from parser::context.
	  Added auto-generated empty stderr files
		to BUILT_SOURCES in src/util/test/Makefile.am.  
	  src/util/test/test-expect.sh:
		check for auto-generated .stderr files, because
		won't be in srcdir.  


2005-06-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-02:
	  New base classes for data-expressions (CHP context)!
	  data_expr is refined as int_expr and bool_expr, and now
		(here's the kicker) pint_expr : int_expr and
		pbool_expr : bool_expr!  
		Rationale: In the CHP context, meta-parameter 
		(of the same type) are valid rvalue expressions 
		just as run-time variables of int and bool are.  
	  Rename: datatype_instance_reference ->
		datatype_instance_reference_base
	  TODO: fahr-fahr-away, use GMP's mpz for arbitrary length integer.  
	  Introduced refined instance_reference: data_reference<Tag>
		which is derived from instance_reference<Tag>
		and from an data expression interface class (int_expr
		or bool_expr).  Such data instance references serve as
		connectible entities and assignable entities in the
		CHP context.  (Analogous to what was done with
		value_reference for meta-param references.)
	  Relocated datatype_instance_reference(_base) to 
		"Object/art_object_inst_ref_data.h"
	  A few new test cases for test/parser/channel.  


2005-06-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09-dataexpr-01:
	  This branch is for developing expression framework for datatypes, 
		very similar to those of meta-parameter expressions.  
	  In this revision, we've FINALLY liberated the param_expr
		(and friends) class hierarchy from the 'object' parent class, 
		which we could've done after we did away with the 
		object-expression stack in parser::context.  
		One less virtual pointer per expr-object!


2005-05-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-09:
	  Partial implemention of parser::CHP::statement::check_action
		for a few statement classes (untested).
	  Skeletal implementation of entity::CHP classes in
		"Object/art_object_chp.{h,cc}"
	  Assigned CHP classes' type hash in "Object/art_object_type_hash.h".
	  Added a few basic template channel prototype tests, so far so good.  
	  TODO: object expressions... we need *datatype-expressions* for CHP, 
		currently we only have meta-language (param) expressions.  
		This work must be done IMMEDIATELY, probably on a sub-branch
		of this branch.  


2005-05-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-08:
	  Purged all traces of parser::context::definition_stack.
	  New class: old channel_type_reference was split off into
		builtin_channel_type_reference and channel_type_reference, 
		with common parent channel_type_reference_base.
		(Will soon rename channel_type_reference 
		to user_channel_type_reference.)
	  builtin_channel_type_reference just contains a list of 
		data_type_reference (pointers), which represents channel
		types of the form "chan(type,...)" without having a 
		builtin_channel_definition.  
	  The base channel type of a user-defined channel has been reduced
		to a builtin_channel_type_reference.  
	  entity::user_def_chan now contains (pointer) 
		builtin_channel_type_reference.  
	  Moved some parser functionality around to follow changes
		in the channel_type_references.  
	  Updated class_traits<channel_tag> in 
		"art_object_classification_details.h"
		Never before have I been so happy that I did this -- 
		what would've been days of changing code across tens of
		files was accomplished with TWO line changes in the 
		policy classes.  Also added new sub-tags of channel_tag
		in "art_object_classification_tags.h" but not used yet, 
		until we decide to split off channel_tag.  
	  Type hash keys for channel type references updated.  
	  TODO: now ready to type-check and add CHP?
	  TODO: more test cases, perhaps preliminary template checks.  


2005-05-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-07:
	  Reorganized parser type references to fit the needs of channels.
	  The basic issue is that built-in channel types (chan(...)) 
		currently have no home scopespace, therefore we must
		work their type information into
		"built-in-channel-type-references", which are coming soon.  
	  TODO: split up channel type references into built-in and
		user-defined (currently, only user-defined).
	  parser::context: phased out definition_stack, which was once
		used as a placeholder to construct complete type references.  
	  concrete_type_ref now an abstract class, the old functionality
		has been pushed down to (new) generic_type_ref.
	  chan_type now derives from concrete_type_ref, no longer type_base.
	  generic_type_ref::check_build has been phased out due to
		abandoning the context definition_stack.  
	  typedef_alias::check_build base type is concrete_type_ref, 
		which is now abstract, so we temporarily wrapped the 
		existing code (for generic_type_ref) in a conditional
		dynamic cast, just to patch and move on... will revisit
		later to complete the chan_type case.  
	  parser/art++-parse.yy: updated symbol return types to reflect
		changes in concrete_type_ref hierarchy.  


2005-05-27	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-06:
	  Added some template methods to context to replace annoying
		copy-pasted methods.  
	  Partially implemented user_chan_type_definition check.  
	  Added a handful of test cases to test/parser/channel.


2005-05-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-05:
	  Finished initial crack at type-checking channel definitions, 
		currently, only checking prototype declarations, 
		punting definitions for a few more revisions until
		further testing.  AST files (,h.,tcc) touched: art_parser_base,
		art_parser_definition, art_parser_formal, art_parser_type.
	  Factored out concrete_type_ref::check_build into more useful
		::check_type (useful return value).  
	  Split-off "Object/art_object_definition_chan.h" from 
		"Object/art_object_definition.h", it also uses
		the recently added "Object/art_object_port_formals_manager.h".
		Added a few necessary virtual method overrides 
		to user_def_chan, like those in process_definition.  
		Also cleaned up conditionals, making USE_PORT_FORMALS_MANAGER 
		permanent.  
	  entity::user_def_chan has new field members:
		datatype_list: the datatype (abstract) carried on channel
		port_formals: the physical datatypes used to implement
	  Very basic test cases added so far, more coming in next revision.  
	  Grammar: updated to allow non-built-in datatypes in channel
		definition's abstract data type list.  
	  

2005-05-26	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-04:
	  Revenge of the BSD.  
	  Patches to satisfy gcc-3.4 on FreeBSD, more compiler anality.  
		(Unfortunately, still need to run gmake, not bsdmake.)
	  Changed built-in param type pointers to be part of
		class_traits<Tag> specializations.  
		Global static initialization remains in "art_built_ins.cc".
	  Code cleanup: caught many missing declarations required by gcc-3.4+.
	  src/util/test/Makefile.am link dependencies fixed to work 
		with bsdmake, on the off chance that I forget to run gmake.  


2005-05-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-03:
	  Factored out port_formals_manager into own class, 
		now can reuse it for channel_definition, etc.
		That was too easy.  
	  New class files: "Object/art_object_port_formals_manager.{h,cc}"


2005-05-25	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-02:
	  Reorganizing code to make way for channel definition type checking.  
	  Some housecleaning of committed conditional code in
		"AST/art_parser_type_base.h".  
	  TODO next: factor out port_formals_manager from process_definition
		so we may reuse it in used_def_chan.  


2005-05-24	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42-CHP-01-01:
	  Starting CHP-01 branch.
	  Liberated parser::CHP classes from the old "check_build".
		Still null implementations at the moment.  
	  Going to fix definition checking, possibly in a sub-branch, 
		before embarking on channel definitions and CHP.  
	  Temporarily made chp_body in grammar optional in several places.  
	  Coming soon: test/parser/channel.  


2005-05-23	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-42:
	  Wrote example program of what one might do with production rules
		in an object file, in "prsobjdemo.cc".
	  Updated header checks to use .tccchk suffix for .tcc files.  
	  artobjunroll: check to make sure input file != output (strcmp).  
	  name_space::collect_namepaces works recursively, as it should.  
	  Added collect<> template method to module and namespace, 
		defined in their respective (new) .tcc files.  


2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-41:
	  Header checks: now using .tchk for .tcc files so suffix rules
		don't clash.  
	  Added Object/art_object_util_types.h, which inherited some
		less essential typedefs from Object/art_object_fwd.h.
	  Chased down a few cases of using namespace in headers, 
		and added count_ptr.tcc where necessary.  
	  Few more spots of header fixes.  
	  

2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-40:
	  Lordy, lordy! Snapshot forty!  (This epoch is maturing...)
	  Continued general maintenance:
	  Makefile.am improvements on standalone header validation.  
		Reorganized macro file lists a bit.  
	  generated parser/art++-parse-prefix.h now includes
		(new) "parser/art++-unioin.h" for necessary AST
		class forward declarations to define the YYSTYPE union.  
	  Distribution (distcheck) is still immaculate.  


2005-05-22	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-39:
	  Source organization revision.
	  Instated really anal-retentive "standalone header" tests, 
		affecting headers in all subdirectories.  
	  New Makefile targets:
		check-headers: compiles each {.h,.tcc} file into own executable
			(empty main) to test whether header file depends on
			other headers not already included.  
			Nobody likes a header that only works when other
			(unknown) headers are included.  
		clean-header-tests: basically rm -rf *.hchk
		check: always builds and runs all *.hchk's now.
	  Finally conform to rule: NO "using namespace ...;" in header files, 
		only allowed in source .cc files.  
	  Had to painstakingly explicitly include proper pointer-class
		sources where I was plain lazy before and just included
		"util/memory/pointer_classes.h".  
	  Split up some forward declaration files in util and Object for 
		modularity, minimizing preprocessing in some cases.  
	  Created "util/size_t.h" which includes (conditional on configure)
		<cstddef> for the declaration of size_t.  
	  Making this revision distcheck required some finesse with
		Makefile.am.  


2005-05-20	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-38:
	  Added basic getopt functionality to main programs.  
	  Updated "util/getopt_portable.h" to use configure results.  
	  Factored out main-level functions into main/main_funcs.{h,cc}.
		This nicely hides complexity, making main source 
		tidy and modular.  
	  Separated out util/ library to compile to libfangutil.la.
	  Parser: empty file now returns in non-NULL empty root_body pointer.  
	  util:
		static_trace.h: DEFAULT macros added for simplicity
			(updated uses in AST/*.cc Object/*.cc)
	  some more comments in util/ChangeLog.
	  see also test/ChangeLog for test script updates in this revision.  

	* linux-gcc-3.4 linker not as forgiving about undefined typeinfo of
		unused classes, read: I was lazy.
	  Added skeletal method definitions for currently unused class.


2005-05-19	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-37-merged-PRS-01-09:
	  Merged the -PRS-01 revisions (through -09) to main.  


2005-05-18	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-09:
	  Added a bunch of simple tests for PRS in tests/parser/prs.
	  Fixed some minor bugs *gasp* I discovered on the way.  
	  Added sanity check functions to entity::PRS classes.  
	  Renamed and finished PRS::rule::expand_complement.
	  Adding production rules now auto-expands complements.  
	  prs_expr::dump is prettily-parenthesized.  
	  Updated test/Make.test to include a 'cleaner' target.  


2005-05-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-08:
	  Now using ref-counts for all entity::PRS::prs_expr.
	  Finished implementing PRS::prs_expr::negate and 
		negation_normalize (both untested).  
	  Patched count_ptr so self-assignment is checked and handled
		appropriately (could think of it as a bug before, 
		or an unstated limitation).  
	  TODO: generate new test cases for PRS functionality.  
	  TODO: write an example of accessing a process-definition's
		PRS, maybe doing some transformations or diagnostics.  
	  TODO: write some template collection passes for 
		namespace, definitions, etc.
	  IDEA: collate structurally identical bool instance references 
		together into the same reference count pointer, 
		by caching the literals' vars.  


2005-05-17	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-07:
	  This revision doesn't really belong here, but it was done anyhow.
	  What's good for the gander, is good for the goose.
	  Most changes apply to the util library, almost nothing is specific
		to art++ itself.  
	  Updated some uses of util::static_trace -- it really should be
		as early as possible in each translation unit
		for accurate reporting.
	  util::memory::count_ptr now pool allocates reference-counts, 
		making their use extremely efficient.  
		The difficulties lie with a global consistent reference
		to the state of the count-allocator, which itself needs to
		be reference-counted for coherent global static initialization.
		Note: all maanual management of count pointes should use
		the STATIC_RC_POOL_REF_INIT and NEW_SIZE_T macros
		defined in "util/memory/count_ptr.h".
		Also, count_ptr.tcc was split off to facilitate completing
		definitions of other types before their destructor definitions
		are required by the delete operator.  
		Currently, the global reference-count pool is never freed
		until exit -- see remark in 
		"util/memory/ref_count_pool_anchor.h".  
	  Added more useful utility functions to util::memory::chunk_map_pool
		and friends.  
	  Updated some tests in util/test to accommodate library updates.  
		

2005-05-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-06:
	  PRS::literal changed to include a count_ptr<bool_instance_reference>
		making it trivially copy-constructible.
	  PRS::pull_{up,dn} includes literal (not pointer thereof) now, 
		resulting in more efficient storage.  
	  PRS::prs_expr and rule's are now chunk_map_pool-allocated.  
	  Some code clean up.  
	  NEXT: negation-normal-form and other utility methods.  
		Possibly reconsider choice of pointers classes
		for expression operands.  


2005-05-16	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-05:
	  Now actually adding production rule objects to process_definition.
	  Implemented PRS dump routines for readable feedback.  
		Currently prints using short local (unqualified) names.  
	  Updated many (object) tests to account for increased size of 
		process_definition binary object
		(+4B for size of PRS pointer list).  
	  This snapshot is a candidate for merging back to main trunk.  


2005-05-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-04:
	  Completed expr::check_prs_expr implementations for the 
		relevant expression classes (partially tested).
	  Updated constructor interfaces of entity::PRS classes.  
	  Added blank PRS::rules_list to process_definition, 
		but doesn't do anything with them yet.
		TODO NEXT: implement addition, dump, object persistence.  
	  Moved some files, added some files:
		Split off Object/art_object_PRS_base.h and
			Object/art_object_definition_proc.h.
		Added util/iterator_more.h.
	  One basic test updated parser/basic/013.stderr, was unchecked,
		now gives error.  


2005-05-15	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-03:
	  Parser: promoted token_string and token_char to node_position.
	  Filled-in parser::relational_expr::check_expr, and
		parser::logical_expr::check_expr.
	  Upgraded some expression types in classes for stronger typing.  
	  Started setting up check_prs_expr infrastructure in PRS and expr.  


2005-05-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-02:
	  Added initial skeleton classes for PRS objects.  
		Fill-in-the-blanks soon.  
	  Some util library stop-tweaks: persistent_object_manager
		now tracks raw_pointer read-visits separately, 
		added collect_pointer_list template method.


2005-05-14	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-36-PRS-01-01:
	  This branch is for early development of PRS management.  
	  The initial revisions do some clean-up with a few parsers'
		check_build routines; they are still functionally ugly.  
		Beginning to make check routines consistent using more
		CHECK_PROTO macros to keep things straight (e.g. type_base).  
	  node_list has a new check_list template method
		that allows one to specify which element's member function
		to invoke recursively.  We intend to eliminate all generic
		calls to check_build accordingly.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-07:
	  All cleaned up, and ready to merge back to main trunk!
	  All obsolete code involving expr::check_build... GONE.  
	  No trace of object_list remains, nor any of the 
		evil associated therewith.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-06:
	  Pretty much done amputating:
	  entity::object_list is practically eliminated, Gott sei dank!
	  parser::context's object stack is gone.  
	  parser::expr::check_build (and friends) has been phased out.  
		(All conditionally commented out HAVE_EXPR_CHECK_BUILD.)
	  No longer instantiating node_list<const expr>.
	  Eliminated unused class parser::connection_argument_list.
	  Updated calls to check_build to use check_expr and check_reference,
		mostly affecting "AST/art_parser_instance.cc".
	  Upgraded parser::connection_statement's lvalue to inst_ref-expr*.  
	  It's all coming together... now just have to clean up
		the mess of comments and obsolete code.  


2005-05-13	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-05:
	  Continued gradual elimination of expr::check_build (and friends).  
	  Removed inst_ref_expr::check_build().
	  Moved alias_list::postorder_check to expr_list, along with a few
		other useful static functions.  
	  New method for actuals_base::check_actuals, replacing check_build.
	  Added replacement methods for instnace_connection, and 
		connection_statement, calling new check_actuals.  
	  entity::definition has new prototype for certify_port_actuals, 
		process_definition::... has updated definition.  
	  Ported object_list::make_port_connection to 
		connection_statement::make_port_connection (static).
	  parser::actuals_base no longer derived from instance_management.  
	  parser::connection_statement now derived from instance_management.  
	  Partially cleaned up some obsolete code, but there'll be more
		deletions in the next revisions, I promise.  


2005-05-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-04:
	  Added expr::check_generic (virtual) to present the result of
	  check_expr or check_reference dynmiacally cast to the other type, 
	  solely for the purposes of working with alias_list's checking
	  procedure.  (read: kludge, but less than it was before)
	  id_expr and member_expr primary check method is now check_reference.  
	  Added placeholder check_generic routines to array_concatenation, 
	  loop_concatenation, and array_construction.  
	  (Will need to add check_reference routines once we start 
	  implementing them.)
	  Updated alias_list::check_build to use check_generic, 
		and moved object_list make_param_expr_assignment
		and make_alias_connection methods into private methods.  
	  Updated token_identifier to use check_reference.  


2005-05-12	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-03:
	  Checked implementation of check_expr, check_reference, 
		check_indices, check_ranges and fixed minor bug 
		since last revision.  
	  Replaced calls to [dense_]range_list::check_build()
		with check_ranges and check_indices where appropriate:
		formal_id's, instance_array.  
	  One problem: check_expr returns param_expr, whereas
		check_reference returns instance_reference_base, 
		both of which are 'objects'.  alias_list is a list of
		expr, but wants generic objects to determine at type-check
		time whether it is forming an expression assignment
		or alias connection sequential instance management item.  
		Thus, we cannot eliminate the object stack (nor calls to
		expr::check_build) until this is resolved.  


2005-05-11	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-02:
	  Implemented expr::check_expr (pure virt.) by mostly trivially
		copying over the old check_build's.  
		Intend to phase out expr-related check_build calls in
		favor of check_expr.  
		check_index, check_ranges, etc. are analogous.  
	  Minor: split off range and range expr into own AST source file.  
	  Minor: permanently erased paren_expr class.  
	  Minor: inst_ref_expr class to sub-type expressions that
		represent instance or value references, adds a virtual
		function check_reference, which will leverage the work
		done by check_expr (or vice versa).  
	  Minor: removed class postfix_expr (was useless).
	  Minor: continued to strip out useless tokens in the AST, 
		also cleaning grammar.  


2005-05-10	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35-exprcheck-01:
	  This branch is intended to rework the way expression checking
	  is done by the parser, replacing the archaic check_build
	  in an orderly manner with object-specific interfaces and routines.
	  In particular, this branch deals with expression checking.  
	  The main goal is to delete the old context::object_stack mechanism
	  used to construct hierarchical expression objects.  
	  This first revision deleted the useless parser::postfix_expr class.  
	  As a result, parser::index_expr is directly derived
	  from parser::expr.
	  After this branch is complete, we can work on fixing
	  type-references (w.r.t. strict and relaxed templates) in
	  a cleaner fashion.  


2005-05-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-35 (main trunk):
	  Major organization for sake of code maintainability:
	  Eliminate CPPFLAGS -Iblah.  Include files relative to 
	  root path of source tree, i.e. with Object/ or util/ or AST/...
	  Motivation: reduces code obfuscation, by letting the casual
	  reader know where to find dependent files, rather than counting
	  on knowing which subdirectory each included file belongs in.  
	  Also cleaned up some obsolete code in util/ directory, 
		reducing almost 2000 LOC.  


2005-05-09	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-34 (main trunk):
	  Cleaned up old hash_string code (useless).  
	  Improved some expr/inst_ref dump code to be more verbose, 
		qualifying names of value-references.  


2005-05-08	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-33 (main trunk):
	  Cleaned up conditional code
	  (should've been committed in -template-01 branch).
	  Also removed some dusty obsolete code snippets.  


2005-05-04	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-30 (main trunk):
	  Updated parser/try_lex_catch.awk to also work with yacc output.  

	* ARTXX-00-01-04-main-00-28-merged-template-01-09 (main trunk):
	  Merged -template-01 revisions back to trunk.  

	* ARTXX-00-01-04-main-00-27-template-01-09:
	  Clean up of previous release: expurgated ART::parser::node!


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-08:
	  It is done.  ART::parser::node (and all its evils) have been phased
	  out, in favor of a cleaner token class heirarchy.  
	  Not a single test broke!
	  This revision has commented out the evil, next revision will
	  clean up.  


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-07:
	  Auto-generated parser helper code (union) no longer needs to 
	  return a mother pointer (node*).  
	  It 'virtually' implements the two neceessary functions in two
	  giganormous function pointer tables (delete, what_where).  
	  (A virtual virtual call!)
	  Soon, going to remove ART::parser::node!


2005-05-03	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-06:
	  Parser awk scripts: factored out common subroutines into
	  separate scripts, so now need to invoke awk -f with co-dependent
	  scripts.  This reduces duplicate maintenance on these files, 
	  which will soon be modified, at the cost of having to keep around
	  more script files.  


2005-05-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-05:
	  Updated grammar to include instance type completion, 
	  where array instances may have their types completed
	  with relaxed template arguments (after array is declared with 
	  strict template arguments).  
	  (Includes type_completion + connection statement.)
	  check_build for these new classes is yet unimplemented.
	  GRAMMAR UPDATE: removed semicolon after namespace close-brace.
	  Not keeping around silly semicolons in AST structures, 
		deleting useless tokens immediately in parser.  
	  Tests updated accordingly.
	  TODO: re-update all tests with YACC=/usr/bin/yacc configuration.  
		(been forgetting to do this for a long time...)


2005-05-02	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-04:
	  Updated ART::parser::node_list::what() message (and test cases).
	  Created class ART::parser::template_argument_list_pair, but unused.
	  Added util/type_traits.h for convenience and compatibility.  
	  Some more parser implementation notes in src/parser/NOTES.  
	  Standardized header inclusion in parser/{yacc,bison}-union-hack.awk.


2005-05-01	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-03:
	  Parser context now adds template formals to either the 
	  strict parameter list or the relaxed parameter list.  
	  Some minor re-organization to reuse code in template_formals_manager.
	  TODO: Type-references template arguments need to be split into
	  strict and relaxed.  


2005-04-30	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-02:
	  Substituted old template_formals_list and _map in definition_base
	  with a template_formals_manager (basically wrapper around the former)
	  and split up single formal parameter list into a 
	  strict list and relaxed list.  
	  Many definition_base method calls now just wrap around calls
	  to template_formals_manager methods.  
	  As a consequence, the binary format of all definitions
	  has been extended by one pointer-list.  
	  Since none of the current test-cases use relaxed parameters, 
	  the object sizes (per definition) were increased by 4 bytes, 
	  the sizeof(size_t) for '0' representing an empty list.  

		+ Some type-check error messages have been improved.  


2005-04-28	David Fang		<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-27-template-01-01:
	  Updated parser to extend template formal signature to 
	  include (optional) list of relaxed parameters.  
	  In transient state: currently type-checking treats
	  both formal lists as one unified list, even though it is now
	  implemented as a pair of lists in the AST.  
	  The definition structure has not been updated yet.  


2005-04-18	David Fang		<fangism@users.sourceforge.net>

	* ART::entity::scopespace is no longer : virtual public object, 
		and ART::entity::namespace is : public object.
		(rationale: simplified class heirarchy somewhat.)

	* ART::entity::definition_base no longer inherits from
		public object virtually.  

	* Started this ChangeLog for more details.  

