"TODO"
#	$Id: TODO,v 1.23.2.2 2006/06/22 04:04:43 fang Exp $

===============================================================================
NOTE: see util/TODO for library-related TODO
===============================================================================
Simulation:

	Little buglet:
	* when interpreter reports syntax error, position is wrong because
		the construction of each token-position uses the 
		hackt-lexer/AST's global node_position.  
		the instref-lexer is incrementing only it's own private
		position counter.  This can be addressed by using a 
		stack of token positions, once we get to more advanced
		lexer generation manipulation.  Then each lexer/parser
		may use it's own and temporarily save away the previous
		counter.  

prsim:
	cause-tracking (perhaps track per new value +,-,X)
	interpreter commands:
		interp key [value]
			for interpreter mode flags:
			termination conditions: assert, syntax error, 
				bad-argument,...
			echo on, echo off (only heeded in batch mode)
		watch processes and structures?
		mode run | reset
		vector support:
			Q: do we allow nodes to belong to multiple vectors?
				current state of old prsims cannot.
		use getopt-style interpretation?
	concept of environment variables?
	far future: expression evaluation! variable expansion!
	Q: should initialize clear the watching state?
		in the old prsim, watch/break points are preserved
		so we keep that behavior for now.  

enhancement:
	macro/spec/attribute strings need to be compressed or stored in some 
	dictionary to avoid writing identical strings out, wasting memory.
	In general, a dictionary might be appropriate for all 
		recurring strings.  Embed into persistent object manager?
		yes, give each unique string ID number.  
		Must be replayable on all platforms, so use ordered map?
		Just first-come-first-serve, construct map in object header.  
	unroll-resolving: use copy-on-write pattern for
		ALL meta-language unrolling (currently done for nonmeta)

===============================================================================
enums and structs
	need compile time constant meta-values
	propose: enum_const, struct_const
	using value_types: char, class datastruct_value_type
	introduce pstruct keyword to refer to meta-values?
		use as a type-prefix?

===============================================================================
channels:
built-in channel types
	implement as some kind of variadic template, with
		variable number of type arguments.  
	Maintain footprint collection of each type mentioned.  
	Is there a way to name a channel's structural member, since
		formals are not named???

===============================================================================
complete type creation: (20060128)
	The algorithm for hierarchical ID allocation is horked.
	Substitute ring-nodes with union-finds.  
	[Status: complete 20060314]

===============================================================================
loop development:

lookup and value resolution:
	needs consistent resolution (currently not maintainable, copy-pasted)
	needs to check the following:
		1) is loop variable?
		2) is reference to template formal?
		3) is definition/scope-local variable (need footprint)

===============================================================================

footprint pointer persistence may be complicated in footprint_frame.
	(partially done, for top-level state)
	possibly simplify by having each footprint contain back-reference?
	(not critical, can do later...)

creation: reject unique instances that are missing relaxed actuals
	(that should have them), only after complete hierarchical merge.
	can be classified as known bug.  

===============================================================================
Lookup semantics: (clarifications)
	Inspired by new documentation
	lookup-member:
		always excludes the template parameters.  
		One may, however, create a value copy (alias)
			member that is equivalent to a parameter.
			*that* member should be globally visible.  
			(Enter template meta programming.)
		Although within a definition references to template
			parameters should be legal.  

	Distinction between x.y, x::y
		x.y requires x to be an instance whose type has a scope.
		x::y requires x to be a namespace or definition with scope
		(we already accomplish this, look at the test cases'
			create dumps to see where this distinction is clear.)

	lookups rooted at typedefs:
		Always use the canonical type's members.  

===============================================================================
big stuff:

*** global and out-of-scope references? ***
	Or should we restrict to passing everything explicitly?
	Suggest creating global 'structs' with relevant signals 
		and passing those.  
	Rationale: for design automation tools, all signals are treated
		as ports, be they global or local.
	Proposal: need way to detect, make implicit global ports?

CFLAT:

compare memory usage between using flattened production rule arrays
	vs. arrays of definitions (like logic gates).

in general check memory usage of large arrays of things
	make benchmarks directory.

===============================================================================
CODE HYGIENE:
	(added 20060118)
	definition classes and type-reference classes need to be
		re-implemented using class_traits.
	The current state is a pain in the a** to maintain.  
	sketch of definition traits:
		has_port_formals (port_formals_parent_type) (boolean)
		has_own_scopespace (scopespace_parent_type)
		typedef_alias_type
		is_built_in
		is_templateable
	type-reference traits: (don't expect to be many)
		base_definition_type

===============================================================================
object serialization:
	preserve source line number information for select tokens, 
	this is necessary for error reporting in later compile phases.

	Tag object files with hackt version information (signature).
	(Pass a generic header/tagging function to persistent object manager.)

endianness:
	update IO_utils' write_value and read_value specializations
		for basic types to use endianness mode to change reading.
		Writing should be in native endianness.  
	Will need to read/write a header to set the endian mode.  

hackt diff (or objdiff):
	a program to detail the differences between two object files
	differences can be structural, 
	or source-code based (debug line numbers)
	or phase differences.  
	missing objects, 
	unrolling/creating state differences, etc...

	this would be useful in determining whether or not a source
	file has changed "non-trivially."

	the crude substitute for now would be to look at the 
	differences in the textual objdump.  

	also consider implementing this as a script in combination
		with executable.  
		run unix diff first, etc...

(200601--)
Need consistency checking between different ways of generating
		intermediate object files!
	This is now possible after reworking the connection
		data structure with precisely reconstructible union-finds.  

===============================================================================
Interactive shell:
	the hackt shell
	be able to run tool commands, flow control, launch simulations, etc.
		load/mount object files, run system commands via !

===============================================================================
compile (module):
	-fdump-* flags

===============================================================================
HACKT template stuff:
	In the case of redeclarations, 
	how do default parameter values translate from
	forward declaration to full prototype to definition?

===============================================================================
enhancements:

Library/Utilities:
ICE.h:
	add ICE_ASSERT combined INVARIANT with ICE macro

Error message:
	assigning already assigned variables could have more precise msg:
		(see parser/param/048.in case)

===============================================================================
parser:
	Later, check for existence of precompiled object and use that.  
	Also, need to include source information with each module,
		so later compile phases can report error's w.r.t. source.  
	Much error handling testing to be done...

	missing feature of yacc/bison-union-type.awk:
		doesn't support goto actions in the middle of grammar yet...
		will take some time to reverse-reverse-engineer my scripts...

	MEDIUM PRIORITY:
	factor out boilerplate code generated by *-union-types.awk, 
		need not be in awk source...
		Consider additional namespace scoping.  
		Can even use template.  

	Error reporting:
		Add error to context, and accumulate in a tree-like fashion.
		In general should pass error stream objects, etc...

	MEDIUM PRIORITY:
	replace the use of lexyacc_prefix.awk with a generated #define 
		substitution header.  Include that instead of transforming
		source file.  This will be needed for multi-parse/multi-lex
		compilation, and avoiding comflicts in libbogus.  

	HIGH PRIORITY: [Status: complete 20051112]
	convert generated lexers into classes:
		automatically find static table and function declarations and 
			generate a class definition!

	LOW PRIORTY: C/C++ parser to construct and manipulate syntax trees
		rather than text... more of a fun (?) side project.

	LOW PRIORITY:
		Piece together grammar snippets m4-style?

===============================================================================
LANGUAGES:
	Is there any need to support the addition of languages
		with something like @LANG { ... }?

PRS and CHP

need to handle loops and conditionals *around* prs { ... } bodies
	need intermediate representation support for conditional PRS (easy)
	Tentatively not supported until issue is resolved.  

SPEC:
	support for 'inline' attribute to flatten subinstances into 
		current definition scope (and give equivalent aliases)

CHP:
	restrict references in the nonmeta language to be scalar?
		no aggregates?

===============================================================================
Expression resolutions:
	consider writing covariant member functions for
		many methods that implement a pure virtual base function.  
	caveat: covariant return types were not properly implemented
		until g++-3.4.x, therefore we'd have to check for
		covariant correctness during configure and work-around.
		Too much effort for now... just screw it.  

===============================================================================
KNOWN BUGS

test cases:
parser/connect/120.hac, 121.hac
	regarding hierarchical propagation and checking of relaxed actuals
	(2005-08-18: punting)

===============================================================================
DEFECT REPORTS:
to resolve: how to interpret negative indices, 
	whether or not they should be allowed, 
	along with empty expression-loops in PRS.  
	(affects several test cases in parser/prs)

interleaving of instantiations and PRS:
	prs and instances are maintained in separate structures
	Semantically, all instances are unrolled first before anything 
	is done with PRS.  Thus, there may be code that looks wrong 
	(reference before instantiation) but will not be rejected in the 
	later compile-phases.  Is this a major issue?
	Related: flow control containing PRS bodies will need to
		"duplicate" the flow control stack in PRS for proper replay.  

