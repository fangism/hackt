"TODO"
#	$Id: TODO,v 1.10.4.5 2006/01/12 21:31:26 fang Exp $

===============================================================================
NOTE: see util/TODO for library-related TODO
===============================================================================
Simulation:
	interpreter for prsim:
	* parse instance-reference
	* pain: lex/yacc scanner expects FILE* input
		may have to use a temp-file :S

	Write PRS rule and express walkers, and visitor functors!!!
	Model rule-walker after cflat_prs.
	In general, write walkers for everything, it's about time...
	Make walkers 'friendly'...

===============================================================================
loop development:

lookup and value resolution:
	needs consistent resolution (currently not maintainable, copy-pasted)
	needs to check the following:
		1) is loop variable?
		2) is reference to template formal?
		3) is definition/scope-local variable (need footprint)

===============================================================================

footprint pointer persistence may be complicated in footprint_frame.
	(partially done, for top-level state)
	possibly simplify by having each footprint contain back-reference?
	(not critical, can do later...)

creation: reject unique instances that are missing relaxed actuals
	(that should have them), only after complete hierarchical merge.
	can be classified as known bug.  

===============================================================================
big stuff:

*** global and out-of-scope references? ***
	Or should we restrict to passing everything explicitly?
	Suggest creating global 'structs' with relevant signals 
		and passing those.  
	Rationale: for design automation tools, all signals are treated
		as ports, be they global or local.
	Proposal: need way to detect, make implicit global ports?

CFLAT:

compare memory usage between using flattened production rule arrays
	vs. arrays of definitions (like logic gates).

in general check memory usage of large arrays of things
	make benchmarks directory.

===============================================================================
hackt diff (or objdiff):
	a program to detail the differences between two object files
	differences can be structural, 
	or source-code based (debug line numbers)
	or phase differences.  
	missing objects, 
	unrolling/creating state differences, etc...

	this would be useful in determining whether or not a source
	file has changed "non-trivially."

	the crude substitute for now would be to look at the 
	differences in the textual objdump.  

	also consider implementing this as a script in combination
		with executable.  
		run unix diff first, etc...

===============================================================================
Interactive shell:
	the hackt shell
	be able to run tool commands, flow control, launch simulations, etc.
		load/mount object files, run system commands via !

===============================================================================
compile (module):
	-fdump-* flags

===============================================================================
HACKT template stuff:
	In the case of redeclarations, 
	how do default parameter values translate from
	forward declaration to full prototype to definition?

===============================================================================
enhancements:

Library/Utilities:
ICE.h:
	add ICE_ASSERT combined INVARIANT with ICE macro

Error message:
	assigning already assigned variables could have more precise msg:
		(see parser/param/048.in case)

===============================================================================
parser:
	Later, check for existence of precompiled object and use that.  
	Also, need to include source information with each module,
		so later compile phases can report error's w.r.t. source.  
	Much error handling testing to be done...

	missing feature of yacc/bison-union-type.awk:
		doesn't support goto actions in the middle of grammar yet...
		will take some time to reverse-reverse-engineer my scripts...

	MEDIUM PRIORITY:
	factor out boilerplate code generated by *-union-types.awk, 
		need not be in awk source...
		Consider additional namespace scoping.  
		Can even use template.  

	Error reporting:
		Add error to context, and accumulate in a tree-like fashion.
		In general should pass error stream objects, etc...

	MEDIUM PRIORITY:
	replace the use of lexyacc_prefix.awk with a generated #define 
		substitution header.  Include that instead of transforming
		source file.  This will be needed for multi-parse/multi-lex
		compilation, and avoiding comflicts in libbogus.  

	HIGH PRIORITY:
	convert generated lexers into classes:
		instead of passing an extra foo argument, can simply refer
		to 'this'.
		Fold state information into lexer class.  
		Make tables into static const members.  
		This will greatly simplify the present name-hacking, and 
			leverage the automatic namespace isolation from classes.
		automatically find static table and function declarations and 
			generate a class definition!

===============================================================================
PRS and CHP

pass-gates:
	add to parser, and intermediate representation

need to handle loops and conditionals *around* prs { ... } bodies
	need intermediate representation support for conditional PRS (easy)

===============================================================================
Expression resolutions:
	consider writing covariant member functions for
		many methods that implement a pure virtual base function.  
	caveat: covariant return types were not properly implemented
		until g++-3.4.x, therefore we'd have to check for
		covariant correctness during configure and work-around.
		Too much effort for now... just screw it.  

===============================================================================
KNOWN BUGS

test cases:
parser/connect/120.in, 121.in
	regarding hierarchical propagation and checking of relaxed actuals
	(2005-08-18: punting)

===============================================================================
DEFECT REPORTS:
to resolve: how to interpret negative indices, 
	whether or not they should be allowed, 
	along with empty expression-loops in PRS.  
	(affects several test cases in parser/prs)

interleaving of instantiations and PRS:
	prs and instances are maintained in separate structures
	Semantically, all instances are unrolled first before anything 
	is done with PRS.  Thus, there may be code that looks wrong 
	(reference before instantiation) but will not be rejected in the 
	later compile-phases.  Is this a major issue?
	Related: flow control containing PRS bodies will need to
		"duplicate" the flow control stack in PRS for proper replay.  

