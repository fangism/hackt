"TODO"
#	$Id: TODO,v 1.7 2005/11/04 04:50:54 fang Exp $

===============================================================================
NOTE: see util/TODO for library-related TODO
===============================================================================
loop development:

lookup and value resolution:
	needs consistent resolution (currently not maintainable, copy-pasted)
	needs to check the following:
		1) is loop variable?
		2) is reference to template formal?
		3) is definition/scope-local variable (need footprint)

===============================================================================

footprint pointer persistence may be complicated in footprint_frame.
	(partially done, for top-level state)
	possibly simplify by having each footprint contain back-reference?
	(not critical, can do later...)

creation: reject unique instances that are missing relaxed actuals
	(that should have them), only after complete hierarchical merge.
	can be classified as known bug.  

===============================================================================
new class_trait:
	has_private_internal_structure (process only)

===============================================================================
big stuff:

*** global and out-of-scope references? ***
	Or should we restrict to passing everything explicitly?
	Suggest creating global 'structs' with relevant signals 
		and passing those.  
	Rationale: for design automation tools, all signals are treated
		as ports, be they global or local.
	Proposal: need way to detect, make implicit global ports?

CFLAT:

compare memory usage between using flattened production rule arrays
	vs. arrays of definitions (like logic gates).

in general check memory usage of large arrays of things
	make benchmarks directory.

===============================================================================
Interactive shell:
	the hackt shell -- "hatcsh" ?
	be able to run tool commands, flow control, launch simulations, etc.
		load/mount object files, run system commands via !

===============================================================================
HACKT template stuff:
	In the case of redeclarations, 
	how do default parameter values translate from
	forward declaration to full prototype to definition?

===============================================================================
enhancements:

Library/Utilities:
ICE.h:
	add ICE_ASSERT combined INVARIANT with ICE macro

Error message:
	assigning already assigned variables could have more precise msg:
		(see parser/param/048.in case)

===============================================================================
Simulation:
	generate process_entries' unrolled production rules!
		only needed for simulation, not flattening [PUNT]
		state information of expressions not needed yet

===============================================================================
parser:
	file/module inclusion, for now mimic cpp, using 
		#file and #line directives

===============================================================================
PRS and CHP

pass-gates:
	add to parser, and intermediate representation

===============================================================================
Expression resolutions:
	consider writing covariant member functions for
		many methods that implement a pure virtual base function.  
	caveat: covariant return types were not properly implemented
		until g++-3.4.x, therefore we'd have to check for
		covariant correctness during configure and work-around.
		Too much effort for now... just screw it.  

===============================================================================
KNOWN BUGS

test cases:
parser/connect/120.in, 121.in
	regarding hierarchical propagation and checking of relaxed actuals
	(2005-08-18: punting)

===============================================================================
DEFECT REPORTS:
to resolve: how to interpret negative indices, 
	whether or not they should be allowed, 
	along with empty expression-loops in PRS.  
	(affects several test cases in parser/prs)

interleaving of instantiations and PRS:
	prs and instances are maintained in separate structures
	Semantically, all instances are unrolled first before anything 
	is done with PRS.  Thus, there may be code that looks wrong 
	(reference before instantiation) but will not be rejected in the 
	later compile-phases.  Is this a major issue?
	Related: flow control containing PRS bodies will need to
		"duplicate" the flow control stack in PRS for proper replay.  

