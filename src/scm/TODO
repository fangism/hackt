"scm/TODO"
	$Id: TODO,v 1.1.2.12 2007/04/14 23:05:48 fang Exp $

Populate this directory with Scheme modules for working with HACKT.

Top priority: hackt's chpsim trace interface for analysis (under way)

accessor functions to event-node-ptr SMOB
	type info [partially done, in the form of predicates, can be refined]
	predecessors (will take some effort to construct)
	may-read/write dependencies

other stream interfaces:
	stream of read (accessed) state/variables? may be difficult

slack-time annotation?
	requires reconstructing precise causality graph of all events?
		could be major memory hog...

scm structures for variable sets
	plain list of references (type-index pairs)

stream merge algorithms (like set_intersection, set_union, set_difference)
	precondition: streams already sorted/ordered

histogram of event frequency, by counting immediate successors of selections
	use either a vector or sparse representation

testing:
	have scripts exit-upon-first-error, to simplify debugging

===============================================================================
NAMING CONVENTION:

Currently, all primitive functions are prefixed with 'hac:'
and scheme functions built on top of them don't have any prefix.
We CAN re-export the 'hac:' primitive functions without their prefix
in the scheme modules (define-public hac:func func).

===============================================================================
DOCUMENTATION

is tentatively being done by registering docstrings to guile's interpreter,
to be generated by some print-all function, invoked from hacguile, 
or hacchpsimguile.

Dilemma: where do we generation documentation from: 
	hacguile vs. hacchpsimguile?
Should/can documentation be generated separately and modularly?
hacchpsimguile is a superset of hacguile, but future programs will also
spawn from hacchpsimguile.  Best design approach might be to do away
with hacchpsimguile as an executable and only load as a module.
Then the future documentation-generator can just load every available
module for the sake of generating complete documentation.  

Hmm...

guile has 'procedure-documentation' function that looks for embedded
string for documentation inside function bodies.  
TODO: collect all hackt-scheme functions in modules (module-reflection)
and export documentation to texinfo.  

