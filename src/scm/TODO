"scm/TODO"
	$Id: TODO,v 1.1.2.6 2007/03/27 06:20:38 fang Exp $

Populate this directory with Scheme modules for working with HACKT.

Top priority: hackt's chpsim trace interface for analysis (under way)

global-reference pairs: replace first element (type enum) with some
	quoted tag, like 'bool, etc...
	rationale: for comprehensibility, currently using define'd constants

accessor functions to event-node-ptr SMOB
	type info [partially done, in the form of predicates, can be refined]
	predecessors (will take some effort to construct)
	may-read/write dependencies

other stream interfaces:
	stream of modified state (by event-index) per type of variable, 
		which can then be unified
	stream of read (accessed) state/variables? may be difficult


reverse-streams: critical path?
slack-time annotation?
	requires reconstructing precise causality graph of all events?
		could be major memory hog...

scm structures for variable sets
	plain list of references (type-index pairs)

trees and sets in scheme library? (associative structures)
	look into guile's alist (associative list?)
	also srfi/srfi-1 alist

stream merge algorithms (like set_intersection, set_union, set_difference)
	prerequisite: streams already sorted

histogram of event frequency, by counting immediate successors of selections
	use either a vector or sparse representation

===============================================================================
DOCUMENTATION

is tentatively being done by registering docstrings to guile's interpreter,
to be generated by some print-all function, invoked from hacguile, 
or hacchpsimguile.

Dilemma: where do we generation documentation from: 
	hacguile vs. hacchpsimguile?
Should/can documentation be generated separately and modularly?
hacchpsimguile is a superset of hacguile, but future programs will also
spawn from hacchpsimguile.  Best design approach might be to do away
with hacchpsimguile as an executable and only load as a module.
Then the future documentation-generator can just load every available
module for the sake of generating complete documentation.  

Hmm...

