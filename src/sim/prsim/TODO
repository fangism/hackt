"sim/prsim/TODO"
#	$Id: TODO,v 1.3.30.1 2007/10/03 06:44:25 fang Exp $

===============================================================================
Simulation:

	Little buglet:
	* when interpreter reports syntax error, position is wrong because
		the construction of each token-position uses the 
		hackt-lexer/AST's global node_position.  
		the instref-lexer is incrementing only it's own private
		position counter.  This can be addressed by using a 
		stack of token positions, once we get to more advanced
		lexer generation manipulation.  Then each lexer/parser
		may use it's own and temporarily save away the previous
		counter.  

prsim:
	category of 'debug' commands for inspecting state, etc...

	direction-specific breakpoints

	deadlock diagnosis, akin to backtrace, but using fanin state analysis

	interpreter commands:
		interp key [value]
			for interpreter mode flags:
			termination conditions: assert, syntax error, 
				bad-argument,...
			echo on, echo off (only heeded in batch mode)
		watch processes and structures?
		'getall-unique' (remove duplicates)
		vector support:
			Q: do we allow nodes to belong to multiple vectors?
				current state of old prsims cannot.
		use getopt-style interpretation?

	concept of environment variables?

	far future: expression evaluation! variable expansion!
		make use of existing interpreter functions in parser/

	Q: should initialize clear the watching state?
		in the old prsim, watch/break points are preserved
		so we keep that behavior for now.  

	for cleanliness:
		rewrite event queuing system to go through
			a pending map first before entering queue.
		rationale: current algorithm is a mess of cases.

	checking: mode to verify that all rules are CMOS implementable

	minor bug: fanout prints duplicate rules because literal
		may appear in different branches of same rule.  
		fix: collect unique-list (or set), then print

	trace recording, playback, and analysis (like chpsim)

state-allocation:
	consider alternative to re-allocating every rule for every
	instance, when the footprint can be reused, by adding
	one additional lookup through the parent process' footprint-frame.  
	Trade-off performance for memory (scalability).  
	This is similar to the idea behind chpsim's CHP footprints.  
	Instead of event-ids, we'll have expanded rule-ids.  
	Will be interesting to benchmark.  

sprsim:
	size-based timing prsim
	connect with chpsim in mixed simulation
	back for back-annotating sized-based delays to chpsim

grusim (pronounced 'gruesome')
	the GRand Unified SIMulator, haha.

===============================================================================
