# "src/Makefile.am"
#	$Id: Makefile.am,v 1.109 2006/04/03 05:30:34 fang Exp $

# .yy for yacc (C++), .ll for lex (C++), 
# .hchk and .tccchk for standalone header checks
SUFFIXES = .yy .ll .ii .test

# standard definitions and macro initializers
# appends to SUFFIXES
include $(srcdir)/Make.hchk-head.am
# includes "Make.stddef"

AUTOMAKE_OPTIONS += subdir-objects

# for recursive make only, all other subdirectories (not listed)
# are managed by this Makefile (flat)
SUBDIRS = util/test .

# cumulative targets
PHONYSOURCES =
CLEANSUBDIRS =
SUBDIR_CVSIGNORE =

# for optional fun features
include $(srcdir)/misc/Makefile.inc
# for util subdirectory and library
include $(srcdir)/util/Makefile.inc

###################### Are we using yacc or bison? ############################
LEXYACC_PREFIX_SCRIPT = $(srcdir)/parser/lexyacc-prefix.awk

if HAVE_BISON
YACC_UNION_SCRIPT = $(srcdir)/parser/bison-union-type.awk
YACC_OUTPUT_H_SCRIPT = $(srcdir)/parser/bison-output-to-C.awk
endif
if HAVE_BYACC
YACC_UNION_SCRIPT = $(srcdir)/parser/yacc-union-type.awk
YACC_OUTPUT_H_SCRIPT = $(srcdir)/parser/yacc-output-to-C.awk
endif
if HAVE_YACC
YACC_UNION_SCRIPT = $(srcdir)/parser/yacc-union-type.awk
YACC_OUTPUT_H_SCRIPT = $(srcdir)/parser/yacc-output-to-C.awk
endif
# Automatically generated sources can just check for YYBISON definition.

########################### main dependencies #################################

bin_PROGRAMS = hackt

# dirgen is completely bogus, workaround to coerce directory generation
noinst_PROGRAMS = dirgen getopt_test $(UTILPROGRAMS) $(FUNPROGRAMS)
noinst_SCRIPTS = hackt_persistent_table.sh

# convenience libraries
noinst_LTLIBRARIES = libhackt.la libhacktparsers.la libhacktast.la \
	$(UTILLIBS) libhacktexec.la libhacktsim.la $(FUNLIBS) \
	libbogus.la libbogus2.la

# this name is needed for libtool objects
LIBHACKTPARSERS_LA = libhacktparsers_la
LIBBOGUS_LA = libbogus_la
LIBBOGUS2_LA = libbogus2_la

# need to list auto-generated header first to guarantee correct build
# order in parallel builds.  

hackt_SOURCES = main/hackt.cc
hackt_LDADD = libhacktexec.la libhacktsim.la libhacktparsers.la \
	libhacktast.la libhackt.la $(LIBFANGUTIL)
# libhackt.la includes libhacktparsers.la, dependency below

getopt_test_SOURCES = test/getopt_test.cc

# This says, "always build me first."
# trying NOT to abuse this, writing explicit dependencies below
BUILT_SOURCES = parser/hackt-parse.output.h \
	parser/instref-parse.output.h

# phony program to generate _build/*/.deps directories on distcheck
PHONYSOURCES += dummy.cc
dirgen_SOURCES = $(PHONYSOURCES) test/header_test.cc

# these two targets cause automake to create the corresponding _build
# subdirectories, that are needed for make distcheck, for check-headers
$(PHONYSOURCES):
	$(TOUCH) $@

cvstag.h: ChangeLog
	@$(ECHO) "#ifndef	CVSTAG" > $@
	tag=`$(HEAD) -n 10 $? | $(GREP) "^	[*].*:" | \
		$(HEAD) -n 1 | $(SED) 's/:.*$$//g' | $(CUT) -d\  -f 2` ; \
		$(ECHO) "#define	CVSTAG		\"$$tag\"" >> $@
	@$(ECHO) "#endif	// CVSTAG" >> $@

# can't include libhacktexec.la because of circular dependence
# builddate.h:
builddate.h: libhackt.la $(LIBFANGUTIL)
	@$(ECHO) "#ifndef	BUILDDATE" > $@
	$(ECHO) "#define	BUILDDATE	\""`$(DATE)`"\"" >> $@
	@$(ECHO) "#endif	// BUILDDATE" >> $@

# most of these should really be generated at configure-time...

# not automatically generated by autoconf/automake
lexer/lex_version.h: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

parser/yacc_version.h: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@


# should include make-generated headers only, no configure-generated headers
AUTOHEADERS = cvstag.h builddate.h am_cxxflags.h
# parser/yacc_version.h
# lexer/lex_version.h
# cxx_version.h

# these headers are generated at configure time by config.status
VERSIONHEADERS = buildhost.h cxxflags.h cxx_version.h

# these headers are additional dependencies for configure-dependent parser files
CONFIGHEADERS = config.h ../config.h

HACKT_PARSE_ROOT = hackt-parse
HACKT_LEX_ROOT = hackt-lex
INSTREF_PARSE_ROOT = instref-parse
INSTREF_LEX_ROOT = instref-lex

# libbogus.la is not actually used, hence the name.
# force use of lex/yacc suffix rules to generate the .c and .cc files
# the source files are post-processed via awk (below) into the real sources, 
# with symbol names with transformed prefixes.  
libbogus_la_SOURCES = \
	lexer/hackt-lex.ll \
	parser/hackt-parse.yy

libbogus2_la_SOURCES = \
	lexer/instref-lex.ll \
	parser/instref-parse.yy

# automake doesn't like macro in generating .Plo, a bug methinks
#	lexer/$(HACKT_LEX_ROOT).ll \
#	parser/$(HACKT_PARSE_ROOT).yy

AST_CC_FILES = \
	AST/node_position.cc \
	AST/expr.cc \
	AST/range.cc \
	AST/token.cc \
	AST/delim.cc \
	AST/definition.cc \
	AST/definition_item.cc \
	AST/instance.cc \
	AST/formal.cc \
	AST/CHP.cc \
	AST/HSE.cc \
	AST/PRS.cc \
	AST/SPEC.cc \
	AST/type.cc \
	AST/namespace.cc \
	AST/statement.cc \
	AST/import_root.cc \
	AST/parse_context.cc

AST_TCC_FILES = \
	AST/node_list.tcc \
	AST/parse_context.tcc

AST_H_FILES = $(AST_CC_FILES:.cc=.h) \
	$(AST_TCC_FILES:.tcc=.h) \
	AST/AST_fwd.h \
	AST/CHP_fwd.h \
	AST/HSE_fwd.h \
	AST/PRS_fwd.h \
	AST/SPEC_fwd.h \
	AST/AST.h \
	AST/common.h \
	AST/expr_base.h \
	AST/expr_list.h \
	AST/identifier.h \
	AST/range_list.h \
	AST/root.h \
	AST/terminal.h \
	AST/token_char.h \
	AST/token_string.h \
	AST/type_base.h

# all of these .cc files have a corresponding .h file
OBJECT_CC_FILES = \
	Object/common/object_base.cc \
	Object/common/namespace.cc \
	Object/common/extern_templates.cc \
	Object/common/dump_flags.cc \
	Object/expr/expr_dump_context.cc \
	Object/traits/class_traits.cc \
	Object/inst/substructure_alias_base.cc \
	Object/inst/subinstance_manager.cc \
	Object/inst/port_alias_tracker.cc \
	Object/inst/alias_actuals.cc \
	Object/inst/instance_collection.cc \
	Object/inst/param_value_collection.cc \
	Object/inst/pbool_value_collection.cc \
	Object/inst/pint_value_collection.cc \
	Object/inst/preal_value_collection.cc \
	Object/inst/bool_instance_collection.cc \
	Object/inst/int_instance_collection.cc \
	Object/inst/enum_instance_collection.cc \
	Object/inst/struct_instance_collection.cc \
	Object/inst/process_instance_collection.cc \
	Object/inst/channel_instance_collection.cc \
	Object/unroll/conditional_scope.cc \
	Object/unroll/expression_assignment.cc \
	Object/unroll/instance_management_base.cc \
	Object/unroll/instantiation_statement.cc \
	Object/unroll/loop_scope.cc \
	Object/unroll/meta_instance_reference_connection.cc \
	Object/unroll/meta_conditional_base.cc \
	Object/unroll/meta_loop_base.cc \
	Object/unroll/unroll_context.cc \
	Object/module.cc \
	Object/global_entry.cc \
	Object/port_context.cc \
	Object/state_manager.cc \
	Object/global_entry_context.cc \
	Object/type/template_actuals.cc \
	Object/type/canonical_type_base.cc \
	Object/type/canonical_type.cc \
	Object/type/canonical_generic_chan_type.cc \
	Object/def/template_formals_manager.cc \
	Object/def/port_formals_manager.cc \
	Object/def/footprint.cc \
	Object/def/footprint_manager.cc \
	Object/lang/cflat_visitor.cc \
	Object/lang/cflat_printer.cc \
	Object/lang/bool_literal.cc \
	Object/lang/directive_base.cc \
	Object/lang/directive_definition.cc \
	Object/lang/directive_source.cc \
	Object/lang/PRS.cc \
	Object/lang/PRS_footprint.cc \
	Object/lang/PRS_attribute_registry.cc \
	Object/lang/PRS_macro_registry.cc \
	Object/lang/CHP.cc \
	Object/lang/SPEC.cc \
	Object/lang/SPEC_footprint.cc \
	Object/lang/SPEC_registry.cc

# these source files have no .h file (use other name)
OBJECT_CC_NO_H_FILES = \
	Object/traits/class_traits_types.cc \
	Object/def/definition.cc \
	Object/expr/basic_param.cc \
	Object/expr/param_const_collection.cc \
	Object/expr/meta_index_expr_list.cc \
	Object/expr/meta_param_expr_list.cc \
	Object/expr/meta_range.cc \
	Object/expr/meta_range_list.cc \
	Object/expr/meta_param_value_reference.cc \
	Object/expr/nonmeta_param_value_reference.cc \
	Object/expr/operators.cc \
	Object/expr/data_expr.cc \
	Object/type/type_reference.cc \
	Object/ref/instance_reference.cc \
	Object/ref/instance_reference_datatype.cc

# these header files have source (.cc) files with different names
OBJECT_TCC_FILES = \
	Object/expr/const_collection.tcc \
	Object/inst/general_collection_type_manager.tcc \
	Object/inst/null_collection_type_manager.tcc \
	Object/inst/int_collection_type_manager.tcc \
	Object/inst/parameterless_collection_type_manager.tcc \
	Object/inst/subinstance_manager.tcc \
	Object/inst/substructure_alias_base.tcc \
	Object/inst/alias_actuals.tcc \
	Object/inst/alias_empty.tcc \
	Object/inst/instance_alias.tcc \
	Object/inst/instance_collection.tcc \
	Object/inst/internal_aliases_policy.tcc \
	Object/inst/value_collection.tcc \
	Object/inst/instance_pool.tcc \
	Object/inst/state_instance.tcc \
	Object/ref/aggregate_meta_instance_reference.tcc \
	Object/ref/aggregate_meta_value_reference.tcc \
	Object/ref/meta_instance_reference_subtypes.tcc \
	Object/ref/simple_meta_instance_reference.tcc \
	Object/ref/simple_nonmeta_instance_reference.tcc \
	Object/ref/member_meta_instance_reference.tcc \
	Object/ref/simple_meta_value_reference.tcc \
	Object/ref/simple_nonmeta_value_reference.tcc \
	Object/type/canonical_type.tcc \
	Object/unroll/alias_connection.tcc \
	Object/unroll/expression_assignment.tcc \
	Object/unroll/instantiation_statement.tcc \
	Object/unroll/port_connection.tcc \
	Object/unroll/unroll_context.tcc \
	Object/module.tcc \
	Object/global_entry.tcc \
	Object/common/namespace.tcc \
	Object/lang/CHP.tcc

OBJECT_H_FILES = $(OBJECT_CC_FILES:.cc=.h) \
	Object/devel_switches.h \
	Object/object_fwd.h \
	Object/persistent_type_hash.h \
	Object/cflat_context.h \
	Object/common/alias_string_cache.h \
	Object/common/cflat_args.h \
	Object/common/multikey_index.h \
	Object/common/util_types.h \
	Object/common/scopespace.h \
	Object/traits/class_traits_fwd.h \
	Object/traits/classification_tags.h \
	Object/traits/chan_traits.h \
	Object/traits/data_traits.h \
	Object/traits/proc_traits.h \
	Object/traits/param_traits.h \
	Object/traits/pint_traits.h \
	Object/traits/pbool_traits.h \
	Object/traits/preal_traits.h \
	Object/traits/int_traits.h \
	Object/traits/bool_traits.h \
	Object/traits/enum_traits.h \
	Object/traits/struct_traits.h \
	Object/traits/type_tag_enum.h \
	Object/def/built_in_datatype_def.h \
	Object/def/channel_definition_alias.h \
	Object/def/channel_definition_base.h \
	Object/def/datatype_definition_alias.h \
	Object/def/datatype_definition_base.h \
	Object/def/definition_base.h \
	Object/def/enum_datatype_def.h \
	Object/def/param_definition.h \
	Object/def/process_definition.h \
	Object/def/process_definition_alias.h \
	Object/def/process_definition_base.h \
	Object/def/typedef_base.h \
	Object/def/user_def_chan.h \
	Object/def/user_def_datatype.h \
	Object/expr/bool_expr.h \
	Object/expr/bool_logical_expr.h \
	Object/expr/bool_negation_expr.h \
	Object/expr/const_collection.h \
	Object/expr/const_index.h \
	Object/expr/const_index_list.h \
	Object/expr/const_param.h \
	Object/expr/const_param_expr_list.h \
	Object/expr/const_range.h \
	Object/expr/const_range_list.h \
	Object/expr/data_expr.h \
	Object/expr/dynamic_meta_index_list.h \
	Object/expr/dynamic_meta_range_list.h \
	Object/expr/dynamic_param_expr_list.h \
	Object/expr/enum_expr.h \
	Object/expr/int_arith_expr.h \
	Object/expr/int_expr.h \
	Object/expr/int_negation_expr.h \
	Object/expr/int_range_expr.h \
	Object/expr/int_range_list.h \
	Object/expr/int_relational_expr.h \
	Object/expr/real_expr.h \
	Object/expr/meta_index_expr.h \
	Object/expr/meta_index_list.h \
	Object/expr/meta_range_expr.h \
	Object/expr/meta_range_list.h \
	Object/expr/nonmeta_index_expr_base.h \
	Object/expr/nonmeta_index_list.h \
	Object/expr/nonmeta_range_expr_base.h \
	Object/expr/operator_info.h \
	Object/expr/operator_precedence.h \
	Object/expr/param_expr.h \
	Object/expr/param_expr_functor.h \
	Object/expr/param_expr_list.h \
	Object/expr/pbool_const.h \
	Object/expr/pbool_expr.h \
	Object/expr/pbool_logical_expr.h \
	Object/expr/pbool_unary_expr.h \
	Object/expr/pint_arith_expr.h \
	Object/expr/pint_const.h \
	Object/expr/pint_expr.h \
	Object/expr/pint_range.h \
	Object/expr/pint_relational_expr.h \
	Object/expr/pint_unary_expr.h \
	Object/expr/preal_const.h \
	Object/expr/preal_expr.h \
	Object/expr/preal_arith_expr.h \
	Object/expr/preal_relational_expr.h \
	Object/expr/preal_unary_expr.h \
	Object/expr/struct_expr.h \
	Object/expr/types.h \
	Object/inst/substructure_alias_fwd.h \
	Object/inst/general_collection_type_manager.h \
	Object/inst/null_collection_type_manager.h \
	Object/inst/int_collection_type_manager.h \
	Object/inst/parameterless_collection_type_manager.h \
	Object/inst/instance_collection_base.h \
	Object/inst/physical_instance_collection.h \
	Object/inst/datatype_instance_collection.h \
	Object/inst/instance_alias_info.h \
	Object/inst/instance_alias.h \
	Object/inst/internal_aliases_policy_fwd.h \
	Object/inst/internal_aliases_policy.h \
	Object/inst/alias_empty.h \
	Object/inst/value_collection.h \
	Object/inst/instance_pool_fwd.h \
	Object/inst/instance_pool.h \
	Object/inst/state_instance.h \
	Object/inst/bool_instance.h \
	Object/inst/int_instance.h \
	Object/inst/enum_instance.h \
	Object/inst/struct_instance.h \
	Object/inst/process_instance.h \
	Object/inst/channel_instance.h \
	Object/inst/pbool_instance.h \
	Object/inst/pint_instance.h \
	Object/inst/preal_instance.h \
	Object/lang/cflat_visitee.h \
	Object/lang/PRS_enum.h \
	Object/lang/PRS_footprint_expr.h \
	Object/lang/PRS_footprint_expr_pool_fwd.h \
	Object/lang/PRS_footprint_macro.h \
	Object/lang/PRS_footprint_rule.h \
	Object/ref/meta_reference_union.h \
	Object/ref/aggregate_meta_instance_reference_base.h \
	Object/ref/aggregate_meta_instance_reference.h \
	Object/ref/aggregate_meta_value_reference_base.h \
	Object/ref/aggregate_meta_value_reference.h \
	Object/ref/member_meta_instance_reference.h \
	Object/ref/meta_instance_reference_base.h \
	Object/ref/meta_instance_reference_subtypes.h \
	Object/ref/meta_value_reference_base.h \
	Object/ref/meta_value_reference.h \
	Object/ref/nonmeta_instance_reference_base.h \
	Object/ref/nonmeta_instance_reference_subtypes.h \
	Object/ref/data_nonmeta_instance_reference.h \
	Object/ref/simple_meta_instance_reference.h \
	Object/ref/simple_meta_indexed_reference_base.h \
	Object/ref/simple_meta_value_reference.h \
	Object/ref/simple_nonmeta_instance_reference.h \
	Object/ref/simple_nonmeta_instance_reference_base.h \
	Object/ref/simple_nonmeta_value_reference.h \
	Object/ref/inst_ref_implementation_fwd.h \
	Object/ref/inst_ref_implementation.h \
	Object/type/builtin_channel_type_reference.h \
	Object/type/channel_type_reference.h \
	Object/type/channel_type_reference_base.h \
	Object/type/data_type_reference.h \
	Object/type/fundamental_type_reference.h \
	Object/type/param_type_reference.h \
	Object/type/process_type_reference.h \
	Object/type/type_reference_base.h \
	Object/type/canonical_type_fwd.h \
	Object/unroll/alias_connection.h \
	Object/unroll/aliases_connection_base.h \
	Object/unroll/channel_instantiation_statement.h \
	Object/unroll/data_alias_connection_base.h \
	Object/unroll/datatype_instantiation_statement.h \
	Object/unroll/empty_instantiation_statement_type_ref_base.h \
	Object/unroll/instance_management_base.h \
	Object/unroll/instantiation_statement_base.h \
	Object/unroll/instantiation_statement_type_ref_default.h \
	Object/unroll/null_parameter_type.h \
	Object/unroll/param_expression_assignment.h \
	Object/unroll/param_instantiation_statement.h \
	Object/unroll/port_connection_base.h \
	Object/unroll/port_connection.h \
	Object/unroll/process_instantiation_statement.h \
	Object/unroll/sequential_scope.h \
	Object/unroll/unroll_context_value_resolver.h \
	Object/lang/PRS_base.h \
	Object/lang/PRS_literal_unroller.h \
	Object/lang/CHP_base.h \
	Object/lang/SPEC_fwd.h

PARSER_H_FILES = \
	parser/$(HACKT_PARSE_ROOT)-real.h \
	parser/hackt-union.h \
	parser/$(HACKT_PARSE_ROOT).output.h \
	parser/$(HACKT_PARSE_ROOT)-options.h \
	lexer/$(HACKT_LEX_ROOT)-options.h \
	parser/$(INSTREF_PARSE_ROOT)-real.h \
	parser/instref-union.h \
	parser/$(INSTREF_PARSE_ROOT).output.h \
	parser/$(INSTREF_PARSE_ROOT)-options.h \
	lexer/$(INSTREF_LEX_ROOT)-options.h \
	lexer/file_manager.h \
	lexer/input_manager.h \
	lexer/yyin_manager.h \
	lexer/hac_lex.h

# can't use $(HACKT_PARSE_ROOT) to substitute :(
PARSER_CC_FILES = \
	parser/hackt-parse-real.cc \
	parser/hackt-union.cc \
	lexer/hackt-lex-real.cc \
	parser/instref-parse-real.cc \
	parser/instref-union.cc \
	lexer/instref-lex-real.cc \
	lexer/file_manager.cc \
	lexer/yyin_manager.cc \
	lexer/hac_lex.cc


SIM_CC_FILES = \
	sim/random_time.cc \
	sim/prsim/Node.cc \
	sim/prsim/Expr.cc \
	sim/prsim/ExprAlloc.cc \
	sim/prsim/Event.cc \
	sim/prsim/State.cc \
	sim/prsim/Command.cc \
	sim/prsim/Reference.cc

SIM_TCC_FILES = \
	sim/prsim/Event.tcc

SIM_H_FILES = $(SIM_CC_FILES:.cc=.h) \
	$(SIM_TCC_FILES:.tcc=.h) \
	sim/common.h \
	sim/time.h

# libhacktexec sources
MAIN_EXEC_CC_FILES = \
	main/force_load.cc \
	main/program_registry.cc \
	main/main_funcs.cc \
	main/parse_test.cc \
	main/compile.cc \
	main/unroll.cc \
	main/create.cc \
	main/alloc.cc \
	main/cflat.cc \
	main/prsobjdemo.cc \
	main/prsim.cc \
	main/dump_persistent_table.cc \
	main/objdump.cc \
	main/shell.cc \
	main/version.cc \
	main/chpsim.cc

MAIN_EXEC_TCC_FILES = \
	main/options_modifier.tcc \
	main/simple_options.tcc

MAIN_EXEC_H_FILES = $(MAIN_EXEC_CC_FILES:.cc=.h) \
	$(MAIN_EXEC_TCC_FILES:.tcc=.h) \
	main/hackt.h \
	main/hackt_fwd.h \
	main/cflat_options.h \
	main/compile_options.h

COMMON_H_FILES = \
	common/ICE.h \
	common/TODO.h \
	common/devel_switches.h

COMMON_FILES = $(COMMON_H_FILES) \
	common/ICE.cc \
	common/TODO.cc

# automake doesn't like macro in generating .Plo, a bug methinks
#	parser/$(HACKT_PARSE_ROOT)-real.cc
#	lexer/$(HACKT_LEX_ROOT)-real.cc

# the generated lexer and parser sources aren't supposed to be distributed!
libhackt_la_SOURCES = \
	$(OBJECT_CC_FILES) $(OBJECT_TCC_FILES) $(OBJECT_H_FILES) \
	$(OBJECT_CC_NO_H_FILES) \
	$(COMMON_FILES) \
	config.h

libhacktast_la_SOURCES = $(AST_CC_FILES) $(AST_TCC_FILES) $(AST_H_FILES)

libhacktexec_la_SOURCES = \
	$(MAIN_EXEC_CC_FILES) \
	$(MAIN_EXEC_H_FILES) \
	$(MAIN_EXEC_TCC_FILES)

echo-libhacktexec-sources:
	@$(ECHO) $(libhacktexec_la_SOURCES)

libhacktexec_la_LIBADD = $(LIBMISCFUN)

libhacktsim_la_SOURCES = $(SIM_CC_FILES) $(SIM_TCC_FILES) $(SIM_H_FILES)

# any other files that depend on automatically generated headers
# should have explicit dependencies.  
# unfornately, it doesn't detect these dependenvies until AFTER first compile
main/main_funcs.lo main/main_funcs.o: parser/$(HACKT_PARSE_ROOT)-real.h
main/version.lo main/version.o: cvstag.h builddate.h buildhost.h cxx_version.h \
	cxxflags.h am_cxxflags.h parser/yacc_version.h lexer/lex_version.h
lexer/$(LIBHACKTPARSERS_LA)-$(HACKT_LEX_ROOT)-real.lo \
	lexer/$(LIBHACKTPARSERS_LA)-$(HACKT_LEX_ROOT)-real.o: \
	parser/$(HACKT_PARSE_ROOT).h
parser/$(LIBHACKTPARSERS_LA)-hackt-union.lo \
	parser/$(LIBHACKTPARSERS_LA)-hackt-union.o: \
	parser/$(HACKT_PARSE_ROOT).output.h
lexer/$(LIBHACKTPARSERS_LA)-$(INSTREF_LEX_ROOT)-real.lo \
	lexer/$(LIBHACKTPARSERS_LA)-$(INSTREF_LEX_ROOT)-real.o: \
	parser/$(INSTREF_PARSE_ROOT).h
parser/$(LIBHACKTPARSERS_LA)-instref-union.lo \
	parser/$(LIBHACKTPARSERS_LA)-instref-union.o: \
	parser/$(INSTREF_PARSE_ROOT).output.h

# even more extra dependencies for bogus libraries
lexer/$(LIBBOGUS_LA)-$(HACKT_LEX_ROOT).lo \
	lexer/$(LIBBOGUS_LA)-$(HACKT_LEX_ROOT).o \
	parser/$(LIBBOGUS_LA)-$(HACKT_PARSE_ROOT).lo \
	parser/$(LIBBOGUS_LA)-$(HACKT_PARSE_ROOT).o: \
	parser/hackt-prefix.h
lexer/$(LIBBOGUS2_LA)-$(INSTREF_LEX_ROOT).lo \
	lexer/$(LIBBOGUS2_LA)-$(INSTREF_LEX_ROOT).o \
	parser/$(LIBBOGUS2_LA)-$(INSTREF_PARSE_ROOT).lo \
	parser/$(LIBBOGUS2_LA)-$(INSTREF_PARSE_ROOT).o: \
	parser/instref-prefix.h

# the following targets need to be prefixed with the library name, libbogus, 
# but automake complains that it overrides the automatic definition...
# parser/$(HACKT_PARSE_ROOT).lo: parser/$(HACKT_PARSE_ROOT).output.h
# parser/$(HACKT_PARSE_ROOT).$(OBJEXT): parser/$(HACKT_PARSE_ROOT).output.h
# this creates cyclic dependencies (bad)
# parser/$(HACKT_PARSE_ROOT).cc: parser/$(HACKT_PARSE_ROOT).output.h

# libhackt used to include all of libhacktparsers
# libhackt_la_LIBADD = libhacktparsers.la

# compile lexer and parser into separate library to for convenient way
# of giving them exceptional compiler flags, see libhacktparsers_la_CXXFLAGS
libhacktparsers_la_SOURCES = \
	$(PARSER_CC_FILES) $(PARSER_H_FILES)

ALL_HEADER_FILES += \
	config.h \
	$(COMMON_H_FILES) \
	$(OBJECT_H_FILES) \
	$(AST_H_FILES) \
	$(PARSER_H_FILES) \
	$(SIM_H_FILES) \
	$(MAIN_EXEC_H_FILES)

ALL_TCC_FILES += \
	$(OBJECT_TCC_FILES) \
	$(MAIN_EXEC_TCC_FILES) \
	$(SIM_TCC_FILES) \
	$(AST_TCC_FILES)

# don't actually need -l[f]l
# libhackt_la_LDADD = @LEXLIB@

# why, oh why, yy?
HACKT_YACC_PREFIX = hackt_
INSTREF_YACC_PREFIX = instref_

# regenerate the parser input file using config.status
parser/$(HACKT_PARSE_ROOT).yy: parser/$(HACKT_PARSE_ROOT).yy.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
parser/$(INSTREF_PARSE_ROOT).yy: parser/$(INSTREF_PARSE_ROOT).yy.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

# these should be distcleaned, because they are configure-generated
CONFIG_PARSERS = parser/$(HACKT_PARSE_ROOT).yy \
	parser/$(INSTREF_PARSE_ROOT).yy

# because I can't figure out how to produce a literal '&' in awk subst regex.  
SED_CXX_REFERENCE = $(SED) 's/REFERENCE/\&/g'
# because yacc has no mechanism for overriding the yyparse prototype
SED_YACC_YYPARSE = $(SED) '/^yyparse()/s/()/(void*, YYSTYPE\& yylval, FILE* infile)/g'

parser/hackt-prefix.h: $(LEXYACC_PREFIX_GENERATOR)
	$(AWK) -f $? -v PREFIX=$(HACKT_YACC_PREFIX) < /dev/null > $@
parser/instref-prefix.h: $(LEXYACC_PREFIX_GENERATOR)
	$(AWK) -f $? -v PREFIX=$(INSTREF_YACC_PREFIX) < /dev/null > $@

LEXYACC_PREFIX_H_FILES = parser/hackt-prefix.h parser/instref-prefix.h

ALL_HEADER_FILES += $(LEXYACC_PREFIX_H_FILES)
CLEANFILES += $(LEXYACC_PREFIX_H_FILES)

PARSER_HACK_PIPE =
if HAVE_BISON
PARSER_HACK_PIPE += $(AWK) -f $(srcdir)/parser/try_lex_catch.awk | \
	$(AWK) -f $(srcdir)/parser/yyerror_bison_hack.awk | \
	$(AWK) -f $(srcdir)/parser/purify_flex.awk | \
	$(SED_CXX_REFERENCE) | \
	$(GREP) -v "^YYSTYPE yylval;"
endif
if HAVE_BYACC
PARSER_HACK_PIPE += $(AWK) -f $(srcdir)/parser/try_lex_catch.awk | \
	$(AWK) -f $(srcdir)/parser/yyerror_bison_hack.awk | \
	$(AWK) -f $(srcdir)/parser/purify_yacc.awk | \
	$(AWK) -f $(srcdir)/parser/purify_flex.awk | \
	$(AWK) -f $(srcdir)/parser/yygrowstack_yacc_hack.awk | \
	$(SED_CXX_REFERENCE) | \
	$(SED_YACC_YYPARSE) | \
	$(AWK) -f $(srcdir)/parser/patch_byacc.awk
endif
if HAVE_YACC
PARSER_HACK_PIPE += $(AWK) -f $(srcdir)/parser/try_lex_catch.awk | \
	$(AWK) -f $(srcdir)/parser/yyerror_bison_hack.awk | \
	$(AWK) -f $(srcdir)/parser/purify_yacc.awk | \
	$(AWK) -f $(srcdir)/parser/purify_flex.awk | \
	$(AWK) -f $(srcdir)/parser/yygrowstack_yacc_hack.awk | \
	$(SED_CXX_REFERENCE) | \
	$(SED_YACC_YYPARSE)
endif


# rules for the prefix-transformed versions of generated lexer/parser sources
# make these conditional on yacc vs. bison
# important: the LEXYACC_PREFIX_SCRIPT must be applied LAST!
# the other preceeding scripts shouldn't matter in their order
parser/$(HACKT_PARSE_ROOT)-real.cc: parser/$(HACKT_PARSE_ROOT).cc \
		parser/$(HACKT_PARSE_ROOT).output.h
	$(CAT) parser/$(HACKT_PARSE_ROOT).cc | $(PARSER_HACK_PIPE) > $@
#	$(AWK) -f $(LEXYACC_PREFIX_SCRIPT) \
#		-v PREFIX=$(HACKT_YACC_PREFIX) > $@

parser/$(INSTREF_PARSE_ROOT)-real.cc: parser/$(INSTREF_PARSE_ROOT).cc \
		parser/$(INSTREF_PARSE_ROOT).output.h
	$(CAT) parser/$(INSTREF_PARSE_ROOT).cc | $(PARSER_HACK_PIPE) > $@


parser/$(HACKT_PARSE_ROOT)-real.h: parser/$(HACKT_PARSE_ROOT).h \
		parser/hackt-prefix.h
	$(ECHO) "#include \"parser/hackt-prefix.h\"" > $@
	$(ECHO) "#include \"parser/hackt-union.h\"" >> $@
	$(CAT) parser/$(HACKT_PARSE_ROOT).h >> $@
#	$(AWK) -f $(LEXYACC_PREFIX_SCRIPT) \
#		-v PREFIX=$(HACKT_YACC_PREFIX) $? >> $@

parser/$(INSTREF_PARSE_ROOT)-real.h: parser/$(INSTREF_PARSE_ROOT).h \
		parser/instref-prefix.h
	$(ECHO) "#include \"parser/instref-prefix.h\"" > $@
	$(ECHO) "#include \"parser/instref-union.h\"" >> $@
	$(CAT) parser/$(INSTREF_PARSE_ROOT).h >> $@


PURIFY_LEXER_PIPE = $(AWK) -f $(srcdir)/lexer/purify_flex.awk | \
	$(SED) 's/REFERENCE/\&/g'

# need to include prefix header because the lexer-generated code
# doesn't include it early enough from the .ll source :(
# if HAVE_FLEX ...
lexer/$(HACKT_LEX_ROOT)-real.cc: lexer/$(HACKT_LEX_ROOT).cc \
		parser/$(HACKT_PARSE_ROOT)-real.h
# need forward declaration for flex 2.5.31
	$(ECHO) "#include \"parser/hackt-prefix.h\"" > $@
	$(CAT) lexer/$(HACKT_LEX_ROOT).cc | $(PURIFY_LEXER_PIPE) >> $@
# flex scanner purification eliminates need to rename most variables
#	$(AWK) -f $(LEXYACC_PREFIX_SCRIPT) \
#		-v PREFIX=$(HACKT_YACC_PREFIX) > $@

lexer/$(INSTREF_LEX_ROOT)-real.cc: lexer/$(INSTREF_LEX_ROOT).cc \
		parser/$(INSTREF_PARSE_ROOT)-real.h
	$(ECHO) "#include \"parser/instref-prefix.h\"" > $@
	$(CAT) lexer/$(INSTREF_LEX_ROOT).cc | $(PURIFY_LEXER_PIPE) >> $@

# can't depend on the .output alone, not a known dependence with .y[y]
HACKT_PARSE_OUTPUT = parser/$(HACKT_PARSE_ROOT).output
$(HACKT_PARSE_OUTPUT): parser/$(HACKT_PARSE_ROOT).h

PARSE_OUTPUT_TO_HEADER_PIPE = $(AWK) -f $(YACC_OUTPUT_H_SCRIPT) \
	-f $(srcdir)/parser/common-output-to-C.awk

$(HACKT_PARSE_OUTPUT).h: $(HACKT_PARSE_OUTPUT)
	@if $(GREP) "conflict" $?; then exit 1; fi
	$(CAT) $? | $(PARSE_OUTPUT_TO_HEADER_PIPE) > $@
#	$(AWK) -f $(LEXYACC_PREFIX_SCRIPT) \
#		-v PREFIX=$(HACKT_YACC_PREFIX) > $@

INSTREF_PARSE_OUTPUT = parser/$(INSTREF_PARSE_ROOT).output
$(INSTREF_PARSE_OUTPUT): parser/$(INSTREF_PARSE_ROOT).h

$(INSTREF_PARSE_OUTPUT).h: $(INSTREF_PARSE_OUTPUT)
	@if $(GREP) "conflict" $?; then exit 1; fi
	$(CAT) $? | $(PARSE_OUTPUT_TO_HEADER_PIPE) > $@

# These all depend on parser/$(HACKT_PARSE_ROOT).h, 
# which is made non-atomically, by automake's yacc rules.
# Using the NOTPARALLEL directive kills parallel-make for this whole Makefile!
# .NOTPARALLEL: parser/$(HACKT_PARSE_ROOT)-real.h $(HACKT_PARSE_OUTPUT) \
#	lexer/$(HACKT_LEX_ROOT).cc
# What we could do is enforce some artificial ordering, making
# $(HACKT_PARSE_OUTPUT) the canonical target of parser/$(HACKT_PARSE_ROOT).h

# extra deps to make sure parser is regenerated when configure changes
# in the case when switching between yacc and bison
lexer/$(HACKT_LEX_ROOT).cc: $(CONFIGHEADERS) lexer/lex_version.h
parser/$(HACKT_PARSE_ROOT).cc: $(CONFIGHEADERS) parser/yacc_version.h
$(HACKT_PARSE_OUTPUT): $(CONFIGHEADERS) parser/yacc_version.h

lexer/$(INSTREF_LEX_ROOT).cc: $(CONFIGHEADERS) lexer/lex_version.h
parser/$(INSTREF_PARSE_ROOT).cc: $(CONFIGHEADERS) parser/yacc_version.h
$(INSTREF_PARSE_OUTPUT): $(CONFIGHEADERS) parser/yacc_version.h

# why doesn't this work?
PARSER_TYPES_PIPE = $(GREP) -v "#include" | $(CPP_TRADITIONAL) -P | \
	$(GREP) -v pragma | $(SED) -e "/^%start/,$$$$d" -e "/%{/,/%}/d" | \
	$(SED) '/^[ \t]*$$/d'

parser/hackt.types: parser/$(HACKT_PARSE_ROOT).yy
#	$(CAT) $? | $(PARSER_TYPES_PIPE) > $@
	$(CAT) $? | $(GREP) -v "#include" | $(CPP_TRADITIONAL) -P | \
		$(GREP) -v pragma | \
		$(SED) -e "/^%start/,$$$$d" -e "/%{/,/%}/d" | \
		$(SED) '/^[ \t]*$$/d' > $@

parser/instref.types: parser/$(INSTREF_PARSE_ROOT).yy
#	$(CAT) $? | $(PARSER_TYPES_PIPE) > $@
	$(CAT) $? | $(GREP) -v "#include" | $(CPP_TRADITIONAL) -P | \
		$(GREP) -v pragma | \
		$(SED) -e "/^%start/,$$$$d" -e "/%{/,/%}/d" | \
		$(SED) '/^[ \t]*$$/d' > $@

# extract num: first matched line, 3rd space-delimited field (#define foo bar)
# "cut" is not a good idea, if # define is separated... :(
# the last awk pipe eliminate extraneous whitespace not filtered by sed
GET_START_TOKEN_ENUM = \
	$(GREP) "define.*MINIMUM_BOGOSITY" parser/$(HACKT_PARSE_ROOT).h | \
		$(HEAD) -n1 | $(SED) 's/^.*MINIMUM_BOGOSITY[ \t]*//g' | \
		$(AWK) '/.*/{printf($$1);}'


# so far, yacc token enums start at 257 consistently, but we take no chances.
HACKT_YACC_UNION_SCRIPT_ARGS = -v yaccfile=parser/hackt.types \
		-v include="AST/AST.h parser/$(HACKT_PARSE_ROOT)-real.h lexer/hac_lex.h" \
		-v namespace="HAC::parser HAC::lexer" \
		-v token_enum=`$(GET_START_TOKEN_ENUM)`

INSTREF_YACC_UNION_SCRIPT_ARGS = -v yaccfile=parser/instref.types \
		-v include="AST/AST.h parser/$(INSTREF_PARSE_ROOT)-real.h lexer/hac_lex.h" \
		-v namespace="HAC::parser HAC::lexer" \
		-v token_enum=`$(GET_START_TOKEN_ENUM)`

parser/hackt-union.cc: $(HACKT_PARSE_OUTPUT) parser/hackt.types \
		parser/$(HACKT_PARSE_ROOT)-real.h
	@if test ! -s parser/hackt.types ; then \
		$(ECHO) "parser/hackt.types is empty!" ; \
		exit 1 ; \
	fi
	$(AWK) -f $(srcdir)/parser/common-union-type.awk \
		-f $(YACC_UNION_SCRIPT) $(HACKT_YACC_UNION_SCRIPT_ARGS) \
		$(HACKT_PARSE_OUTPUT) > $@

parser/instref-union.cc: $(INSTREF_PARSE_OUTPUT) parser/instref.types \
		parser/$(INSTREF_PARSE_ROOT)-real.h
	@if test ! -s parser/instref.types ; then \
		$(ECHO) "parser/instref.types is empty!" ; \
		exit 1 ; \
	fi
	$(AWK) -f $(srcdir)/parser/common-union-type.awk \
		-f $(YACC_UNION_SCRIPT) $(INSTREF_YACC_UNION_SCRIPT_ARGS) \
		$(INSTREF_PARSE_OUTPUT) > $@


# configure accumulated AUTO_CPPFLAGS for dependent package includes
AM_CPPFLAGS = -I$(srcdir) @AUTO_CPPFLAGS@
# will need _build directories for "make distcheck" with auto-generated headers
# the last -Iparser is for the relative path in the build directory


# extremely anal-retentive
if HAVE_GXX
# our good friend, g++
GENERAL_WARN_FLAGS = @FANG_WARN_FLAGS@
WARN_CFLAGS = @FANG_WARN_CFLAGS@
WARN_CXXFLAGS = @FANG_WARN_CXXFLAGS@
# -Wsign-promo
DIALECT_FLAGS = @FANG_DIALECT_FLAGS@
PIPE_FLAG = -pipe
else
# non-GNU compiler: your guess is as good as mine
# pass in whatever happened to succeed from configure tests
GENERAL_WARN_FLAGS = @FANG_WARN_FLAGS@
WARN_CFLAGS = @FANG_WARN_CFLAGS@
WARN_CXXFLAGS = @FANG_WARN_CXXFLAGS@
DIALECT_FLAGS = @FANG_DIALECT_FLAGS@
PIPE_FLAG =
endif
# TODO: would like to have these flags available
# at configure time during compile of conftest's.
# KNOWN ISSUE: for example -ansi -pedantic will disable long long
# but unless these flags are given at configure time (say, by the user)
# configure will test things with the wrong flags, producing wrong results. 

MORE_CFLAGS = $(PIPE_FLAG) $(DIALECT_FLAGS) $(WARN_CFLAGS) $(GENERAL_WARN_FLAGS)
MORE_CXXFLAGS = $(PIPE_FLAG) $(DIALECT_FLAGS) $(WARN_CXXFLAGS) $(GENERAL_WARN_FLAGS)
# These flags are used to cancel out previous warning flags, 
# such exceptions are needed for the automatic lexers and parsers
if HAVE_GXX
PARSER_NOWARN_FLAGS = -Wno-unused -Wno-old-style-cast -Wno-shadow
else
# -w inhibits all warning messages, at least for gcc
PARSER_NOWARN_FLAGS = -w
endif

AM_CFLAGS = $(MORE_CFLAGS)
AM_CXXFLAGS = $(MORE_CXXFLAGS)

# configure accumulated AUTO_LDFLAGS for linking LIBS of dependent packages
AM_LDFLAGS = @AUTO_LDFLAGS@

# now extended to include other important flags
am_cxxflags.h: $(srcdir)/Makefile.am
	@$(ECHO) "#ifndef	AM_CPPFLAGS" > $@
	@$(ECHO) "#define	AM_CPPFLAGS \"$(AM_CPPFLAGS)\"" >> $@
	@$(ECHO) "#endif	// AM_CPPFLAGS" >> $@
	@$(ECHO) "#ifndef	AM_CXXFLAGS" >> $@
	@$(ECHO) "#define	AM_CXXFLAGS \"$(AM_CXXFLAGS)\"" >> $@
	@$(ECHO) "#endif	// AM_CXXFLAGS" >> $@
	@$(ECHO) "#ifndef	AM_LDFLAGS" >> $@
	@$(ECHO) "#define	AM_LDFLAGS \"$(AM_LDFLAGS)\"" >> $@
	@$(ECHO) "#endif	// AM_LDFLAGS" >> $@

# flags needed to produce .output from yacc/bison
AM_YFLAGS = -d -t -v
AM_LFLAGS = 

# for occasional debugging
SAVETEMP = $(CXXCOMPILE) -v -save-temps
.cc.ii:
	$(SAVETEMP) -c $<
	@$(ECHO) ".ii is placed in local directory."

# doesn't work
# YACC_PREFIX = -DYACC_PREFIX=hackt_yy
# libhackt_la_CPPFLAGS = $(YACC_PREFIX) $(AM_CPPFLAGS)

MORE_BOGUS_CPPFLAGS =
MORE_BOGUS_CXXFLAGS =
if HAVE_BYACC
# we don't care about libbogus, whatever it takes to make it compile
MORE_BOGUS_CPPFLAGS += -DYYDEBUG=0
MORE_BOGUS_CXXFLAGS += -Wno-error
endif
BOGUS_CPPFLAGS = -DLIBBOGUS $(AM_CPPFLAGS) $(MORE_BOGUS_CPPFLAGS)
BOGUS_CXXFLAGS = $(AM_CXXFLAGS) $(PARSER_NOWARN_FLAGS) $(MORE_BOGUS_CXXFLAGS)
# *COUGH* *HACK*:
# LIBBOGUS tells lexer/hackt-lex.cc to use un-transformed symbol names

# the -include is necessary because flex doesn't respectfully
# include user header files early enough to rename declarations ^@#!%&!@^&%
# really, this isn't necessary since we've prevented yy-name conflicts
# by compiling each lexer/parser pair into a separate bogus convenience library
libbogus_la_CPPFLAGS = $(BOGUS_CPPFLAGS) \
	-include parser/hackt-prefix.h
libbogus_la_CXXFLAGS = $(BOGUS_CXXFLAGS)
libbogus2_la_CPPFLAGS = $(BOGUS_CPPFLAGS) \
	-include parser/instref-prefix.h
libbogus2_la_CXXFLAGS = $(BOGUS_CXXFLAGS)
# here we give the exceptional flags to the lexer and parser, 
# which are generated automatically by yacc/bison/[f]lex for 
# traditional C compilers.  (Not the cleanest code ever generated.)
# libhacktparsers_la_CPPFLAGS = $(AM_CPPFLAGS)
libhacktparsers_la_CXXFLAGS = $(AM_CXXFLAGS) $(PARSER_NOWARN_FLAGS)

# is required to be set for Make.hchk-tail.am
EMPTY_SOURCE = $(srcdir)/test/header_test.cc

# there are a few headers we want exempt from stand-alone testing
# what about their dependencies?  
# automake produces empty placeholders (never updated) for them initially, 
# so make will not die.

common/devel_switches.hchk:
	@$(TOUCH) $@

Object/devel_switches.hchk:
	@$(TOUCH) $@

../config.hchk:
	@$(TOUCH) $@

EXTRA_DIST += local.cvsignore \
	parser/local.cvsignore \
	parser/lexyacc-prefix.awk \
	parser/bison-output-to-C.awk \
	parser/common-output-to-C.awk \
	parser/common-union-type.awk \
	parser/yacc-union-type.awk \
	parser/bison-union-type.awk \
	parser/yyerror_bison_hack.awk \
	parser/yygrowstack_yacc_hack.awk \
	parser/patch_byacc.awk \
	parser/purify_flex.awk \
	parser/purify_yacc.awk \
	parser/try_lex_catch.awk \
	parser/NOTES \
	parser/hackt-parse.yy.in \
	lexer/local.cvsignore \
	lexer/flex_lexer_state.h \
	lexer/purify_flex.awk \
	test/local.cvsignore \
	test/header_test.cc \
	test/getopt_test.sh \
	test/getopt_test.stderr \
	common/README \
	scripts/filter_namespaces.sed \
	scripts/deps_to_dot.awk.in \
	AST/README \
	Object/README \
	Object/common/README \
	Object/def/README \
	Object/expr/README \
	Object/inst/README \
	Object/lang/README \
	Object/traits/README \
	Object/type/README \
	Object/ref/README \
	Object/unroll/README \
	ChangeLog \
	README \
	NOTES \
	BUGS \
	TODO \
	wc-l \
	sim/README \
	sim/prsim/README

TESTS += hackt_persistent_table.sh test/getopt_test.test

installcheck-local:
	@list=$(bin_PROGRAMS) ; \
	for p in $$list ; do \
		p1=`echo $$p|$(SED) 's/$(EXEEXT)$$//'`; \
		if test -f $$p || test -f $$p1 ; then \
			f=`echo "$$p1" | $(SED) 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
			run=$(DESTDIR)$(bindir)/$$f ; \
			if test ! -f $$run ; then \
				$(ECHO) "*** DID YOU FORGET TO make install FIRST? ***" ; \
			fi ; \
			$(ECHO) "======== running: $$run ================" ; \
			$$run || : ; \
			$(ECHO) "======== running: $$run version ========" ; \
			$$run version ; \
		else : ; \
		fi; \
	done
	@$(ECHO) "======== end of installcheck ========"

# test/getopt_test.test
CLEANFILES += $(AUTOHEADERS)
DISTCLEANFILES += hackt_persistent_table.sh $(VERSIONHEADERS)
AUTO_IGNORE += $(TESTS) $(PROGRAMS) $(LTLIBRARIES) $(CONFIG_PARSERS)

test/getopt_test.test: getopt_test test/getopt_test.sh
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "$(srcdir)/$*.sh > $*.output 2>&1" >> $@
	@$(ECHO) "$(DIFF) -u $(srcdir)/$*.stderr $*.output > $*.diff" >> $@
	@$(ECHO) "if [ -s $*.diff ]" >> $@
	@$(ECHO) then >> $@
		@$(ECHO) "$(ECHO) \"libc getopt behavior differs from expectation!\"" >> $@
		@$(ECHO) "$(CAT) $*.diff" >> $@
		@$(ECHO) "exit 1" >> $@
	@$(ECHO) fi >> $@
	@$(CHMOD) +x $@

DISTCLEANFILES += test/getopt_test.test \
	test/getopt_test.diff \
	test/getopt_test.output

hackt_persistent_table.sh: hackt
	@$(ECHO) "#!/bin/sh" > $@
	@$(ECHO) "./hackt dump_persistent_table" >> $@
	@$(CHMOD) +x $@

# choosing not to distribute lex/yacc-generated sources for now
CLEANPARSER = \
	parser/$(HACKT_PARSE_ROOT).cc \
	parser/$(HACKT_PARSE_ROOT).h \
	parser/$(HACKT_PARSE_ROOT)-real.cc \
	parser/$(HACKT_PARSE_ROOT)-real.h \
	parser/$(HACKT_PARSE_ROOT).output \
	parser/$(HACKT_PARSE_ROOT).output.h \
	parser/hackt-union.cc \
	parser/hackt.types \
	parser/$(INSTREF_PARSE_ROOT).cc \
	parser/$(INSTREF_PARSE_ROOT).h \
	parser/$(INSTREF_PARSE_ROOT)-real.cc \
	parser/$(INSTREF_PARSE_ROOT)-real.h \
	parser/$(INSTREF_PARSE_ROOT).output \
	parser/$(INSTREF_PARSE_ROOT).output.h \
	parser/instref-union.cc \
	parser/instref.types

CLEANLEXER = \
	lexer/$(HACKT_LEX_ROOT)-real.cc \
	lexer/$(HACKT_LEX_ROOT).cc \
	lexer/$(INSTREF_LEX_ROOT)-real.cc \
	lexer/$(INSTREF_LEX_ROOT).cc

libs: $(LTLIBRARIES)

DISTCLEANFILES += $(CLEANPARSER) $(CLEANLEXER)

OBJECT_DIRS = Object Object/common Object/expr Object/def Object/inst \
	Object/lang Object/ref Object/traits Object/type Object/unroll

SIM_DIRS = sim sim/prsim

CLEANSUBDIRS += lexer parser AST $(OBJECT_DIRS) $(SIM_DIRS)

clean-parser:
	-$(RM) $(CLEANPARSER)
	-$(RM) parser/*.$(OBJEXT) parser/*.lo

clean-lexer:
	-$(RM) $(CLEANLEXER)
	-$(RM) lexer/*.$(OBJEXT) lexer/*.lo

clean-AST:
	-$(RM) AST/*.$(OBJEXT)
	-$(RM) AST/*.lo

# could just rm `find ... `
clean-Object:
	for d in $(OBJECT_DIRS) ; do \
		$(RM) $$d/*.$(OBJEXT) ; \
		$(RM) $$d/*.lo ; \
	done

clean-sim:
	for d in $(SIM_DIRS) ; do \
		$(RM) $$d/*.$(OBJEXT) ; \
		$(RM) $$d/*.lo ; \
	done

# implies CLEANFILES
clean-local: clean-AST clean-Object clean-lexer clean-parser clean-sim \
		clean-header-tests
	for d in $(CLEANSUBDIRS); do \
		$(RM) $$d/*.loT ; \
	done

# cvsignore targets
lexer/.cvsignore: .cvsignore lexer/local.cvsignore
	$(CAT) .cvsignore $(srcdir)/lexer/local.cvsignore > $@
parser/.cvsignore: .cvsignore parser/local.cvsignore
	$(CAT) .cvsignore $(srcdir)/parser/local.cvsignore > $@
common/.cvsignore: .cvsignore
	$(CP) $? $@
Object/.cvsignore: .cvsignore
	$(CP) $? $@
Object/common/.cvsignore: .cvsignore
	$(CP) $? $@
Object/def/.cvsignore: .cvsignore
	$(CP) $? $@
Object/expr/.cvsignore: .cvsignore
	$(CP) $? $@
Object/inst/.cvsignore: .cvsignore
	$(CP) $? $@
Object/lang/.cvsignore: .cvsignore
	$(CP) $? $@
Object/ref/.cvsignore: .cvsignore
	$(CP) $? $@
Object/traits/.cvsignore: .cvsignore
	$(CP) $? $@
Object/type/.cvsignore: .cvsignore
	$(CP) $? $@
Object/unroll/.cvsignore: .cvsignore
	$(CP) $? $@
AST/.cvsignore: .cvsignore
	$(CP) $? $@
main/.cvsignore: .cvsignore
	$(CP) $? $@
sim/.cvsignore: .cvsignore
	$(CP) $? $@
sim/prsim/.cvsignore: .cvsignore
	$(CP) $? $@
test/.cvsignore: .cvsignore test/local.cvsignore
	@$(CAT) .cvsignore $(srcdir)/test/local.cvsignore > $@

# files to ignore in subdirectories
# can we generate this from suffix appending?
SUBDIR_CVSIGNORE += lexer/.cvsignore parser/.cvsignore \
	common/.cvsignore \
	Object/.cvsignore Object/common/.cvsignore \
	Object/def/.cvsignore Object/expr/.cvsignore \
	Object/inst/.cvsignore Object/lang/.cvsignore Object/ref/.cvsignore \
	Object/traits/.cvsignore Object/type/.cvsignore \
	Object/unroll/.cvsignore \
	AST/.cvsignore main/.cvsignore \
	sim/.cvsignore sim/prsim/.cvsignore \
	test/.cvsignore

all: cvsignore

cvsignore: $(SUBDIR_CVSIGNORE)

clean-cvsignore: clean-cvsignore-subdirs

clean-cvsignore-subdirs:
	-$(RM) $(SUBDIR_CVSIGNORE)

clean-libs:
	-$(RM) $(noinst_LTLIBRARIES)

DISTCLEANFILES += $(SUBDIR_CVSIGNORE) $(CONFIG_PARSERS)
DISTCLEANDIRS += $(DEPDIR)

dist-hook:
	for f in $(DISTCLEANFILES) $(CLEANFILES); do \
		$(RM) $(distdir)/$$f ; \
	done

# useful for rapidly turning off debugging
show-stacktrace-sources: force
	-$(GREP) ENABLE_STACKTRACE */{,*}/*.{tcc,cc} | $(GREP) 1 | \
		$(GREP) -v "util/test" | $(GREP) -v "util/stacktrace"

help-local:
	-@$(CALLMAKE) help-check-headers 2> /dev/null
	@$(ECHO) "Local make targets:"
	@$(ECHO) "    hackt: the main executable"
	@$(ECHO) "    libs: all (libtool) libraries"
	@$(ECHO) "    libhackt.la: core library"
	@$(ECHO) "    libhacktparsers.la: lexers/parsers library"
	@$(ECHO) "    libhacktexec.la: subprogram library"
	@$(ECHO) "    libfangutil.la: common utilities library"
	@$(ECHO) "    clean-AST: cleans AST subdir's objects"
	@$(ECHO) "    clean-Object: cleans Object subdir's objects"
	@$(ECHO) "    clean-lexer: cleans lexer subdir's objects"
	@$(ECHO) "    clean-parser: cleans parser subdir's objects"
	@$(ECHO) "    clean-libs: cleans all libraries and archives"
	@$(ECHO) "    show-stacktrace-sources: grep for debug-enabled sources"
	@$(ECHO) "Local echo-* targets:"
	@$(ECHO) "    libhacktexec-sources"

# standard targets
include $(srcdir)/Make.hchk-tail.am
# includes "Make.global"

