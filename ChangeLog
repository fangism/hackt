"ChangeLog"

2004-12-11	David Fang	<fangism@users.sourceforge.net>

	* Split process and channel instance collections into 
	  dimension-specific subclasses.  

	* Working on phasing out the depth (dimensions) member
	  of instance_collection_base... done!
	  But at a minor cost :(.  
	  Had to de-inline dimensions() in all instance_collections
	  to force symbols to be generated.  
	  The rememdy (if overhead is high) is to cache the 
	  dimensions in a pseudo-const field of instance_collection_base.  
	  (But wait, didn't we just eliminate it?)

	* Lessons learned: 
	  1) Inline virtual functions bad idea, because the base classes
		will be missing the symbols to inlined functions.  
	  2) Calling virtual functions of a class during its construction
		is a no-no, will result in "pure virtual method called"
		run-time abort trap.  Beware of indirect calls to 
		virtual functions through other functions as well.  

	* Some more code clean-up, making base classes persistence
	  helper methods named consistently with _base.  
	  Privatized some methods that need not be visible.  


2004-12-11	David Fang	<fangism@users.sourceforge.net>

	* Tagging this snapshot as ARTXX-00-01-03-u

	* UPDATED persistent_object management slightly.
	  Rather than force user to include static const members
	  within a class, I switched to a less intrusive technique
	  using a new persistent_traits template class.  
	  Now a type is registered by creating an instance of
	  persistent_traits<T>, which is done through a macro.  
	  A single instance of such an object will register the 
	  type (with a supplied hash-string) for the duration of the 
	  program.  (The macro call is unchanged.)  The maintainer 
	  need not declare any additional static members, not even
	  through the old PERSISTENT_STATIC_MEMBERS_DECL.  
	  The persistent_traits template definition may be specialized
	  arbitrarily, so the user need not conform to the same pattern, 
	  although it would save time for specialized maintenance.  
	  Any less effort for the maintainers helps.  


2004-12-10	David Fang	<fangism@users.sourceforge.net>

	* Massively extended the data-type instance collection and reference
	  classes into specialized type, via copy-paste-tweak.  
	  (OMG, nothing broke!)
	  Divided up data instance class files.  
	  datatype_instance_collection is now an abstract parent of
	  many children.  

	* When a datatype reference creates an instance, it now
	  correctly resolves typedefs to generate the correct class
	  of instance collections.  

	* Standardized parent calls to persistent object management
	  helper methods (collect_transient, write_object, load_object), 
	  named by default with _base.  This dramatically reduces
	  the amount of copy-paste maintenance in children classes.  

	* art_object_type_hash.h: Updated persistent object type keys
	  to reflect extensions to class hierarchy.  

	* TODO: instance reference classes that are similar should
	  be rewritten as templates for trivial generalizability.  
	  Same goes for generic instance collection patterns.  


2004-12-06	David Fang	<fangism@users.sourceforge.net>

	* More code clean-up, header file organization continued...

	* Wrapped some lexer variables and functions in ART::lexer namespace.


2004-12-05	David Fang	<fangism@users.sourceforge.net>

	* Major source tree re-organization, partitioning large header
	  files into chunks, usually pulling out the abstract base classes
	  which need to be visible, where there implementers need not
	  be visible.  
	  Implementation source files (.cc) are kept the same.  

	* Much clean-up and header file pruning.  
	  Slightly smaller objects and binaries. 
	  Slightly faster compile-time.  


2004-12-04	David Fang	<fangism@users.sourceforge.net>

	* Re-organized util/ library directory.  
	  Split many template classes into declarations and definition files. 

	* Added util/STL subdirectory with wrappers to split the 
	  standard containers into declarations and definitions files.  
	  Not terribly useful yet.  Current revision is safe
	  to switch arbitrarily between unified and split headers.  

	* Touched up ART source files to work with new headers.  
	  No functionality has changed.  


2004-12-02	David Fang	<fangism@users.sourceforge.net>

	* Further elaborated on pointer_traits.

	* Improved persistent_object_manager pointer manipulation, 
	  leveraging pointer_traits, resulting in much nicer
	  compile-time specialization and selection.  

	* Split hash_qmap and qmap into declaration (.h) and 
	  definitions (.tcc) files, inlining very few basic
	  methods in the declarations file.  
	  So far, this makes squat different in binary size because
	  the .h file still includes the entire definitions of the
	  base classes.  Will experiment further with STL wrappers...


2004-12-01	David Fang	<fangism@users.sourceforge.net>

	* art_object_instance.{h,cc}: Subclassed pbool_instance_collection
	  into dimension-specific variants.  Currently wrapped 
	  with SUBCLASS_PBOOL_ARRAY, but next revisions will 
	  clean out conditional compilation.  

	* util/indent.{h,cc}: Nifty little auto-indentation library.


2004-11-29	David Fang	<fangism@users.sourceforge.net>

	* Miraculously swapped out old pointer-class system with 
	  the new one, without breaking anything.  

	* Obsolete code is retained in util/obsolete for historical
	  purposes.  


2004-11-23	David Fang	<fangism@users.sourceforge.net>

	* Added some useful data structures to the util library.  

	* Planning restructuring of util/.  
	  Memory management (including pointer classes) relocated to
	  util/memory subdirectory.  


2004-11-06	David Fang	<fangism@users.sourceforge.net>
	
	* Debugged and finished testing the list_vector_pool allocator.  


2004-11-05	David Fang	<fangism@users.sourceforge.net>

	* Minor fixes in template code to make gcc-3.4.0 happy, 
	  changes which make code more standard-compliant. 

	* Recovered from a week of using only Apple gcc-3.3
	  while home directory on FreeBSD metwork was dead
	  on a failed hard drive.  Thank goodness for CVS 
	  (being on separate disk/server was *crucial*.)


2004-11-04	David Fang	<fangism@users.sourceforge.net>

	* art_object_instance.{h,cc}: Subclassed pint_instance_collection
	  into dimension-specific variants.  This is prototype code, 
	  switchable to old method (non-persistent) with SUBCLASS_PINT_ARRAY
	  flag defined in the header file.  
	  (Includes specialization for 0-dimensions.)
	  Will remove this switch after it is deemed stable.  

	* multikey*.h: Completed methods for read/writing multidimensional 
	  map collections to binary streams.  

	* list_vector_pool.h: simple template-based chunk allocator. 
	  Not fully debugged yet, so no warranty.  

	* Renamed some src/util files without the art_ prefix
	  because they are independent w.r.t. this project.  

	* Some general clean-up of obsolete #if 0 code-blocks.  


2004-11-01	David Fang	<fangism@users.sourceforge.net>

	* Insiginificant change.  Added CVS Id tags to all source files.   

	* Standard public class member typedefs added to 
	  hash_qmap and qmap data structures.  


2004-10-25	David Fang	<fangism@users.sourceforge.net>

	* Added auxiliary argument type to peristent object management.
	  This allows one to `escape' into a second-level of constructor 
	  tables, or pass at most one argument to initial allocation, 
	  in (class)::construct_empty().  

	* Auxiliary construction argument allows us to sub-type
	  (e.g. size_t templates) within a single registered type.  

	* art_util.{h,cc,tcc}:
	  Added more utility methods for binary I/O, for generic
	  value-sequence (list-like) persistence, and value-map (map-like)
	  persistence.  
	  Reminder that containers of pointers must still go through
	  the persistent object manager.  

	* Going to sub-type instance collections by dimensions (size_t), 
	  leaving a common abstract interface.  
	  Need this to be strongly and statically typed
	  to be able to manipulate persistent multidimensional maps.  


2004-10-23	David Fang	<fangism@users.sourceforge.net>

	* Added abstract operator wrappers around most STL
	  binary operators to enable use in virtual function table.  
	  Implemented in util/operators.h, used in Object/art_object_expr.*.

	* Copy-paste-modified pint_instance_collection to pbool counterpart, 
	  same with pbool_expression_assignment.  

	* Added to class module a boolean flag to indicate whether
	  entire module has already been (successfully) unrolled.  


2004-10-21	David Fang	<fangism@users.sourceforge.net>

	* Tag: ARTXX-00-01-03-l

	* Fixed parameter index unrolling, correctly detecting
	  unroll time errors, in multidimensional arrays, 
	  such as uninitialized or uninstantiated parameters.  

	* Hand-checked behaviour of artobjunroll on test/parser/param dir.


2004-10-19	David Fang	<fangism@users.sourceforge.net>

	* Finished first draft code for unrolling collections of
	  parameter integers, but remains largely untested.  
	  Most other existing code is unaffected.  
	  (Just needed to commit 2+k lines of code...)


2004-10-18	David Fang	<fangism@users.sourceforge.net>

	* Finished developing and testing classes for detecting
	  compacts subslices of multidimensional sparse maps, 
	  namely multikey_map.  
	  See testing class in util/test/cube_slice.h for rigorous testing.  

	* Split parameter assignments into separate compilation module, 
	  art_object_assign, used to be in art_object_connect.


2004-10-13	David Fang	<fangism@users.sourceforge.net>

	* A day of compiler infamy.  
	  GCC nightmares have forever scarred me.  

	* Minor update on how static global persistent type registry
	  is initialized.  The table itself is maintained as a
	  pointer initialized NULL, and access to it is granted through 
	  a static accessor function that allocates upon first use.  
	  Not making static table as an object because is not guaranteed
	  to be properly initialized in order, if not at all!

	* De-allocation of the type registry is managed by a little
	  hackery using a pointer class.  

	* Template method bug in gcc-3.3.x and earlier was worked around
	  by inserting keyword template in the middle of the member
	  function call.  See persistent_object_manager::get_root<T>().  

	* SEVERE PROBLEM (worked-around) with "artobjdump" and 
	  "artobjunroll" on Apple's gcc-3.3:
	  The ART::entity::module class was only referenced as a 
	  pointer, not a static object, in the main executables' source.  
	  In "artc" and "art++2obj" the module references in main()
	  were local objects, NOT pointers.  
	  Apple's gcc failed to link in the majority of modules 
	  in libart++.la, resulting in failure to properly register
	  any and all persistent types.  
	  This is evidenced by the size of the resulting executable, 
	  which ended up as 1/10 of the size it should have been.  
	  The workaround to force proper linkage was to create
	  an artificial local object of type entity::module. 
	  See art_persistent_table.cc.


2004-10-12	David Fang	<fangism@users.sourceforge.net>

	* MAJOR REWORK:
	  Extracted serializable/persistent object functionality
	  and interface into ART-independent framework classes.  
	  Now in "util/persistent.h" and "util/persistent_object_manager.h".

	* Replaced class type enumeration system ("art_object_type_enum.h")
	  with a static type registration system, where each type
	  calls a static function to register itself with the global
	  type map.  Registration requires a unique type-key (here, a 
	  short string), and a pointer to a (possibly static) allocator
	  of the mapped type.  

	* Rewrote some what() functions in object classes, because it
	  should NOT depend on any members being initialized, such as 'key'.


2004-10-10	David Fang	<fangism@users.sourceforge.net>

	* Re-typed ::write_object() with *const* persistent_object_manager&.

	* Considering re-working persistent object type-enumeration.  
	  Instead of giving each persistent type a number, 
	  give a unique key (string/hash), to avoid collisions in
	  cuncurrent development.  
	  See TODO list for more on rationale.  


2004-10-09	David Fang	<fangism@users.sourceforge.net>

	* Sub-typed param_expression_assignment (now abstract) class into 
	  pbool- and pint- specific versions, porting over old
	  functionality.  
	  Also distinguished right-hand-side expression (source) from the 
	  remaining (instance references) in the list (destinations).  
	  Greatly simplified object_list::make_param_assignment as a result.  
	  Moved type-check for parameter initialization from 
	  pint/pbool_expr::initialize into ::append_param_instance_refence.  
	  Much old code commented out, expunge in next revision.  

	* Minor update of a few old error messages; 3 test expectations
	  files in regression suite were updated, first time any of them 
	  were touched in a long time!

	* Added doxygen file header to most header and source files.  
	  As a reward, Doxygen generates really nice file dependency graphs.  
	  Also did some general header clean-up while I was at it.  
	  Updated namespaces, eliminating all references to `fang', 
	  which was only intended to be temporary.

	* Added some standard typedefs to pointer-classes:
	  value_type, pointer, reference, const_...
	  Now they may be referenced, and used for concept checking.  


2004-10-08	David Fang	<fangism@users.sourceforge.net>

	* NEWS: Returned from long hiatus working on conference paper.  

	* Tailored some multidimensional data structures
	  (multikey, and multikey_[q]map) for near-future use in
	  instance-collection classes.  

	* TODO list is somewhat more structured and comprehensible.
	  (Important!)

	* Initial attempt at unrolling parameters (pints only).  
	  Seems straightforward enough for scalars (0-D), but may
	  take some redesign for robust multidimensional support.  
	  No tests written for `artobjunroll' yet, just spot checks.  

	* Next thing to do: restructure param_expr_assignments to
	  be type-specific (only pints and pbools).  
	  Implement basic parameter assignments.  


2004-09-14	David Fang	<fangism@users.sourceforge.net>

	* Completely redone instantiation_base and subclasses, 
	  now called instance_collection_*.  
	  (~5000 lines diff)
	  instantiation_statement and instance_collection classes
	  are *tightly* coupled now.  
	  Instead of containing list of indices directly, 
	  contains list of instantiation_statements, which contain indices.  
	  Instantiation_statements need a back-reference to the
	  containing instance_collection.  
	  As a result, re-implemented handling of 
	  scopespace::add_instance and context::add_instance.  
	  Miraculously, all regression tests still pass.  

	* In class context, introduced sequential scope stack for 
	  appending sequentially managed items (instances, assignments, 
	  connections) to the right list.  
	  Remember that everything outside of definitions (even in 
	  namespaces) is in the globally sequenced list.  

	* Fundamental_type_reference now creates instantiation_statements
	  in addition to instance_collections (static methods).  

	* Multidimensional data structure interface improvements.  

	* A few more safety checks in persistent_object_manager
	  pointer I/O manipulation.  

	* Expressions objects now load (de-serialize) recursively.  

	* Code is littered with #if code blocks -- next commit will
	  be a mandatory clean-up.  


2004-09-10	David Fang	<fangism@users.sourceforge.net>

	* Major reworking of instance management: all instantiations, 
	  parameters, assignments, connections that appear outside of
	  definitions will be globally ordered into a namespace-independent
	  instance management list, to preserve source ordering.  
	  Each definition will have its own local instance management list.
	  Instance management lists will expand into sequentially scoped 
	  bodies, such as loop scopes and conditional scopes.  
	  Namespaces no longer have separate assignment or connection lists.  
	  (most affected: Object/art_context.* Object/art_object_base.*)

	* class instantiation_statement encapsulates a sequential 
	  addition of instance (possible to an array).

	* Object de/serialization interface now uses class "module" instead
	  of the root namespace.  "module" implements standard
	  de/serialization interface.  

	* Introduced new top-level object "module" which includes a
	  global namespace and a globally ordered instance management list.  
	  Note: type enumeration shifts as a result.  

	* Some more documentation on the language spec, for templates, 
	  typedefs, and type-equivalence.

	* Some general improvements and extensions to algorithm library
	  interface (functors and adapters) in the util/ directory.  

	* Minor insignificant shifts in object class hierarchy.  


2004-09-03	David Fang	<fangism@users.sourceforge.net>

	* Started a documentation directory dox/lang for the language
	  specification documentation, not to be mixed with the 
	  doxygen-generated code reference manual.  

	* Added some rather harmless data structure tests that have been 
	  sitting around for a long time (in src/util/test).  


2004-09-01	David Fang	<fangism@users.sourceforge.net>

	* Reworked connection and assignment management in class scopespace.
	  Now kept in separate lists.  (No more connection_assignment_base.)

	* Some initial groundwork for unrolling parameters and instances.  
	  Some major languauge issues need to be resolved first.  

	* Wrote and tested some data structures for multidimensional maps, 
	  both true multidimensional, and pseudo-multidimensional 
	  (with multidimensional key in a flat map).  
	  Also renamed some namespaces along the way.  

	* Note the change in email address.  :)


2004-08-21	David Fang	<fangism@gmail.com>

	* Release 0.1.3.

	* Completed object de/serialization for core classes.  
	  Recycle old type-check test inputs for object dump diff testing.  
	  New tests read in file, produce object file, and text dump.  
	  Second part takes object file and produces text dump.  
	  Text dumps are compared for consistency.  


2004-08-19	David Fang	<fangism@gmail.com>

	* Wrote majority of (semi-tested) object serialization /
	  deserialization code for Object class hierarchy.  
	  So far regression tests run clean, with self_test_no_file().  

	* The next release (0.1.3) should contain a new set of tests
	  for verifying object integrity through dump-and-load.  


2004-08-13	David Fang	<fangism@gmail.com>

	* Release 0.1.2.

	* Made parser code robust to variations in yacc/bison versions, 
	  updated test expected outputs.  This was not trivial.  
	  Works on FreeBSD yacc/bison-1.875, linux yacc/bison-1.35.  

	* Minor tweaks in configuration and Makefile.am's.  


2004-08-12	David Fang	<fangism@gmail.com>

	* Releasing 0.1.1, the completely GNU-ified version.  

	* Completed porting process, with slightly restructured test suite.
	  Short test scripts are automatically generated by the Makefile
	  and run by "make check".  
	  Tests are now run recursively by directory, and recursion 
	  terminates as soon as there is one failure in a directory.  

	* Considerable effort was spent getting the parser grammar files
	  to work with bison, whereas they were exclusively compiled 
	  with yacc only before.  Even test outputs were augmented
	  to account for differences between yacc and bison.  


2004-08-10	David Fang	<fangism@gmail.com>

	* Took the old flattened source directory, and prepared it
	  for use with automake, autoconf, and libtool.  
	  Moving sources into subdirectories meant severing files
	  from their previous revision history, which should remain
	  in the CVS repository's Attic.  

