"ChangeLog"

2005-01-29	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-04-object-01-01:
	  Implemented (enabled) unrolling for datatypes, added 
	  datatype_instance_collection::dump().
	  Refined error messages during unroll-time errors,
	  in pint/pbool_instance_collection, and updated tests.  
	  New tests in test/parser/array to test unroll-time error catching.  


2005-01-28	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-main-00-04:
	  These revisions merged and converged the revisions on the
	  -parser-00, -util-00, and -object-00 branches.  
	  No issues in merging, since their develop was mostly sequential.

	* ARTXX-00-01-04-main-00-04-object-01-00:
	  Implemented object de/serialization of enum data-type definitions
	  and instances.  Added bunch of tests in test/parser/datatype.
	  Updated definition_base::*_object_base to include the
	  'defined' member flag, which was forgotten before.  
	  Enum members are just treated as strings for binary persistence.  


2005-01-27	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object-00-13:
	  Specialized read/write_value of pbool_instance, which contains
	  bit-fields, same story as bool -- 3 bools "compressed" to 1 char.  
	  (A few tests updated.)

	* ARTXX-00-01-04-object-00-12:
	  In util/IO_utils.{h,cc}, specialized write_value and read_value
	  with <bool> to use write/read_value <char> to ensure that
	  booleans are written out as one byte.  
	  (On darwin-gcc-3.3, passing bool defaulted to using a 4-byte int, 
	  on i686-linux-gcc-3.4, passing bool defaulted to using char.)
	  Gotta ensure platform independence!  

	* ARTXX-00-01-04-object-00-11-merged-fixutil-12:
	  Merged changes from the -fixutil sub-branch (up to -12)
	  into the main object branch.  

	* ARTXX-00-01-04-object-00-10-fixutil-12:
	  Test directory updated for new expected unrolled objects.
	  Differences to due to exclusion of built-in template int
	  definition argument.  (wasn't supposed to be there anyways)
	  Typedef_alias forgot to call scopespace base persistent
	  methods, resulting in fake leak.  Fixed.  
	  This revision should be sufficiently stable (verified on
	  darwin) to commit to the parent branch.  


2005-01-26	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object-00-10-fixutil-10-merged-gcc-01:
	  Merged gcc-3.3 workaround into this parent branch.
	  Enhanced test scripts in src/util/test to be able to write
	  hook filters/scripts in case tests need more than the 
	  default filtering.  
	  This is intended to permit *slightly* different or even
	  non-deterministic behavior of various compilers, 
	  a common variation being LINK-ORDERING and global static
	  module initialization and destruction ordering.  
	  Fortunately, the revisions in this series have made 
	  the libraries extremely robust to "the ordering problem"
	  with explicit dependence macros.  
	  Slowly, we'll work our back out of "fixutil" to the parent branch.


2005-01-25	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object-00-10-fixutil-09-gcc:
	  New quick branch spawned off to work around a gcc-3.3 bug.
	  (Not a problem in gcc-3.4)
	  Problem is related to friend function formal parameter misuse.
	  Problem can be demonstrated by
	  "util/test/friend_function_formal_bug.cc" in gcc-3.3.
	  Fixed, and merged back into -fixutil-10.

	* ARTXX-00-01-04-object-00-10-fixutil-08:
	  Been spending a few days fixing up a mysterious pseudo
	  memory leak (*GASP*).  The problem is cause by improper handling
	  of the built-in datatype definitions.  The whole definition
	  contents were still written out, which cause bad reconstruction.  
	  Data-type references have special handling for built-in types.
	  This snapshot has fixed it, but kept all the extraneous 
	  debugging options on.  After more testing, will gradually
	  recede the debugging level.  


2005-01-22	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object-00-09:
	  Merged changes from -fixutil sub-branch, up to its -03 revision.
	  Net result: pool-allocate pint_const and pbool_const, 
	  but we made many side improvements along the way.

	* The lesson of the day is "function-local static."

	* ARTXX-00-01-04-object-00-08-fixutil:
	  Sub-branch created for introducing new improvements and fixes to
	  the util library.  
	  Modules affected: stacktrace, list_vector_pool, what.
	  list_vector_pool: introduced more robust version of macros
		for overriding new and delete operators
		-- new version is practically immune to adverse ordering
		of global static initialization, which is an issue when
		cross-module allocators are invoked; there must be a way
		to guarantee on-demand initialization:
			solution: function-local static instances!
		observation: consequence: out of conservativeness, 
			such static allocators will not be destroyed
			upon program termination IF the pool is referenced
			by multiple modules.  (won't be able to get leak 
			diagnostics from such pools)
		side note: tried and abandoned a reference-count scheme.
	what: updated interface and default macro definition
		now must call ::name() by function (no arg), 
		to match the typeinfo interface.  
		All definitions of name() store function-local static
		copies of the string, which are initialized upon 
		first entry to the function, so performance is still
		very efficient.
		This revision should be robust to all link-orderings
		so it is safe to reference ::name across modules.  
	stacktrace: replaced class static stack structures
		with function-local static objects.
		This makes stacktrace safe to use for debugging
		during static initialization and destruction.  
		+ New macros STACKTRACE_BRIEF and STACKTRACE_VERBOSE
		so user need not pass custom string everywhere.  
		+ Also added ostream check protection, in case ostream
		is destroyed before a trace is printed.  
	persistent_object_manager:
		you guessed it, replaced static members 
		(reconstruction_function_tbale) with 
		function-local static in the referencing static function.  


2005-01-21	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-objject-00-08:
	  New files: src/Object/art_object_extern_templates.{h,cc}
	  Tried playing around with separate template compilation for 
	  a few classes (multikey, packed_array).
	  Very little reduction in compilation time and final binary size.  
	  Only the smallest, most common classes were factored out.  
	  More signficant dimension-specific, content-type-specific
	  map classes cannot be efficiently collated.  
	  "With great specialization come great replication."


2005-01-20	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object-00-04-cleanup:
	  Many typedef's updated, espcially those involving multikey.
	  Now everything is consistently maintained in a few definitions
	  in "art_object_index.h".  Other minor changes like renaming
	  parent to parent_type.  

	* ARTXX-00-01-04-object-00-05:
	  FINALLY wrote a prototype unroll system for the built-in 
	  datatypes.  Successfully tested basic int<32> instantiations.
	  Created placeholder class unroll_context for use in unrolling.  
	  Not all unroll methods have been adapted to use it yet.  
	  Expressions are unrolled into pint_const_collections
	  (pbool_const_collection to be created).  
	  Also updated util/multikey.* to provide reverse iterator interface.  

	* ARTXX-00-01-04-object-00-06:
	  Removed a TON of empty .stderr files from the repository, 
	  they are now automatically generated and cleaned by
	  the rules in the template makefile Make.test.

	* ARTXX-00-01-04-object-00-07:
	  test-Makefile's pain in the a**...
	  Updated .cvsignore generation to copy template (was linked before)
	  and include additional CLEANFILES, in all test subdirectories.  
	  Re-did Makefile.am's in all test subdirectories:
	  ARTC_TEST_SUBJECTS = $(ARTC_TEST_PASSES) $(ARTC_TEST_FAILURES)
	  This way, ARTC_TEST_FAILURES can be used for EXTRA_DIST, 
	  to avoid having to regenerate extraneous .stderr files.  
	  Perhaps auto-generating .cvsignore everywhere is a good idea...


2005-01-19	David Fang	<fangism@users.sourceforge.net>

	* New sub-branch: ARTXX-00-01-04-object-00-04-cleanup
	  Needed a makeover of typedefs, for sake of consistency
	  (e.g. long vs. int) and future ease of migration to templates.


2005-01-18	David Fang	<fangism@users.sourceforge.net>

	* ARTXX-00-01-04-object:
	  Added unroll tests for namespace subdirectory.  
	  Not exciting until example with int<>s are introduced.  

	* Created branch: ARTXX-00-01-04-util
	  This branch is for modifications to the utils library that
	  do not concern ART directly.  

	* Added util/numeric/integer_traits.h for compile-time evaluations.  
	  Some useless and fun code, like compile-time primality.  

	* Added util/ifthenelse.h for compile-time type and value selection.  

	* Merged patches to the utils from -object-00-03 to -util.


2005-01-17	David Fang	<fangism@users.sourceforge.net>

	* RELEASE 0.1.4
	  The root tag for this series is ARTXX-00-01-04.

	* Created branch: ARTXX-00-01-04-parser
	  This branch is intended for modifications to the front-end
	  lexer and parser.

	* Created branch: ARTXX-00-01-04-object
	  This branch is intended for updates to the type-checker, 
	  unroller, and object system of the compiler.  

	* ARTXX-00-01-04-parser:
	  Updated lexer: yy_current_buffer -> YY_CURRRENT_BUFFER
	  The macro's definition differs slightly between the current stable
	  version of flex (2.5.4) and the development version (2.5.31).
	  This maintains compatibility.  

	* Added LEX and YACC to configure.in with AC_ARG_VAR.

	* ARTXX-00-01-04-object:
	  Revised test *.sh check test-scripts.  
	  Introduced (preliminary) unrolling test, finally!  
	  Need to write {bool,int}_instance_collection::unroll().  

	* Added unroll tests to tests/parser/param directory.
	  Updated artobjunroll-expect.sh script to handle 
		  expected unroll errors.
	  Test suite is coming along...

	* Minor stuff:
	  In util/indent.cc: fixed disable_indent.
	  Updated dump() method to use better indentation in
		many Object class definitions.
	  artobjdump and artobjunroll handles exceptions from unrolling, 
		and also if input object file is empty.


2005-01-16	David Fang	<fangism@users.sourceforge.net>

	* FIXED: issue with __PRETTY_FUNCTION__ (linux-gcc only).
	  In src/Object/art_built_ins.cc, an innocent assert statement
	  (commented out) created an undefined reference to the 
	  __PRETTY_FUNCTION__ symbol, which is NEVER SUPPOSED TO EXIST, 
	  because it is a reserved MACRO internal to the compiler.
	  Removing the assertion statement suppressed the faulty symbol.  
	  Can you say, 'WTF'?


2005-01-15	David Fang	<fangism@users.sourceforge.net>

	* Added macros for convenient default use of list_vector_pool, 
	  in-class static member declarations and definitions.  

	* Added memory leak diagnostics to list_vector_pool:
	  basically size of free-list should be equal to peak usage, 
	  else there's a dangling pointer to an element in an allocated
	  region.  This is non-fatal (as long as the memory is not touched)
	  because deallocate() uses lazy destruction, i.e. only destroys
	  upon allocation off of the free-list.  

	* Fixed premature memory deallocation of assignment and 
	  connection objects in context::add_assignment and ::add_connection, 
	  in "art_context.cc".

	* Updated src/util/test/test-expect.sh:
	  uses test/address_filter.sed to filter out addresses which will
	  vary on every system.  

	* PROBLEM (solved): 
	  Upon exit(1) of program, sometimes memory leak is diagnosed.  
	  check reports unaccounted token_char's (among other types)
	  for *some* tests, whereas check doesn't find any problems.  
	  May have to do with destructor behavior upon exit.  
	  IDEA: may need to replace exit() with throw() to ensure
	  proper stack cleanup.  

	* SOLUTION (to the above PROBLEM):
	  Problem was indeed in premature exit(), which doesn't clean up
	  the call-stack objects, and jumps straight to the end of main().
	  Exception unwinding, on the other hand, guarantees proper
	  stack clean-up.  Thus we catch a general exception at main()
	  to delay exit/returning from main until stack objects are 
	  properly destroyed.  
	  I've globally replaced exit(1) with throw std::exception()
	  to accomplish simple, yet safe, termination.  
	  In "macros.h", THROW_EXIT means "throw generic exception
	  with intention of exit(1)-ing."

	* Fixed yet another problem with pointer-classes.
	  There was an implicit conversion from never_ptr to excl_ptr
	  through excl_ptr_ref, which should not have existed, 
	  and no longer exists.  pointer_classes_test is updated
	  to reflect this.  No other compiler code is affected by this, 
	  fortunately.  (Also cleaned up much obsolete code in
	  "pointer_classes.h")

	* To fix: why do I get undefined references to __PRETTY_FUNCTION__
	  when compiling for linux?  (something to do with std::alloc?)


2005-01-14	David Fang	<fangism@users.sourceforge.net>

	* Solved global static initialization ordering problem w.r.t. 
	  stacktrace.  Previously, stacktrace was only usable for tracing 
	  functions AFTER global initializations were complete.
	  We were able to trace some static initialization calls because 
	  we got lucky, and stacktrace's static objects happened to be 
	  initialized early enough.  Now it is reliably usable to debug 
	  static initialization-time function calls.  

	* memory/pointer_classes.h: intentionally declared an explicit, 
	  private, undefined const-reference copy constructor, because
	  the default action (which was actually implicitly used!)
	  copies member-for-member, which violates exclusion.  
	  This may fix other hidden problems.  

	* Added partial specializations for util::what template, 
	  pointer, reference, const-ness.  
	  Only one module has trouble with static initializations:
	  art_parser_definition.cc, don't know why yet...

	* Some minor fixes in util template library, compile-time
	  problems discovered with gcc-3.4.0, due to improved two-phase
	  template definition evaluation.  

	* MAJOR PROBLEM: severe crashes on FreeBSD-3.4/gcc-3.4.0, 
	  currently investigating.  


2005-01-13	David Fang	<fangism@users.sourceforge.net>

	* Cleaned up the AST/* headers and definitions, with some corrections.
	  De-virtualized some methods that did not require it.  
	  Converted CHP/HSE class members to pointer-classes.  
	  Purged unnecessary repetitive declarations.  
	  Applied NEVER_NULL and INVARIANT macros gratuitously.  

	* Specialized util::what for most classes in the ART::parser
	  namespace.

	* Globally changed node::check_build's signature to
	  never_ptr<const object> check_build(context& c) const;

	* More clean up in the src/Object directory, 
	  replaced assert() with NEVER_NULL and INVARIANT macros.  

	* Added some notes regarding parser in src/parser/NOTES.  

	* Tested everything with bison-2.0 -generated parser, all good!

	* Added -ansi compilation flag to everything.  


2005-01-12	David Fang	<fangism@users.sourceforge.net>

	* Massive clean up of code in the src/Object directory.

	* Changed many function / method prototypes to pass
	  excl_ptr arguments by reference, 
	  count_ptr arguments by const reference, 
	  never_ptr arguments by const.

	* Bunch of formatting improvement for readability.  

	* Spotty documentation added, always going to be behind on this...

	* Tomorrow: the AST directory clean-up.

	* Soon: release 0.1.4


2005-01-11	David Fang	<fangism@users.sourceforge.net>

	* MAJOR BUG FIXED: memory management by pointer classes corrected.
	  Basically, ownership transfer failed in a few cases where they were
	  expected to have occured. 

	* memory/pointer_classes.h: 
	  Eliminated empty copy constructor for excl_ptr.  
	  Specialized std::_Construct for only sticky_ptr's
	  because no copy-constructor exists, and the standard containers
	  require copy-constructability.  
	  Overloading _Construct works around the problem with an 
	  explicit const-cast to guarantee that placement construction
	  (with value to assign) is done with transfer semantics.  

	* stacktrace more developed, simple and solid.
	  Added method for accessing the current output stream, 
	  using macro STACKTRACE_STREAM.
	  Eliminated construction with const char* to avoid ambiguity
	  with the constructor that accepts std::string.
	  Default what<T>::name is const char*, not const char[].  

	* list_vector_pool optionally uses util::what for producing 
	  useful verbose messages.
	  NOTE however, that automatic instantiation of what<T>::name
	  does NOT guarantee that it is statically constructed before
	  it is referenced, EVEN WITHIN THE SAME MODULE!  
	  You must explicitly instantiate the template class what
	  before it's first use in a module to guarantee correct ordering.  
	  Specialization of what<T> also accomplishes this, assuming
	  it retains a ::name member.

	* Lots more debug stacktracing code added everywhere (turned off).

	* Changed several (not all, yet) function prototypes that 
	  take excl_ptr by value and now take excl_ptr arguments by reference.  

	* ART::parser::token_char are allocated with its own 
	  static memory pool.  

	* ART::entity::data_instantiation_statement are allocated
	  with its own memory pool.  

	* Many single argument constructors were made explicit to
	  prevent promiscuous conversions.  

	* Fixed built-in datatype int initialization, guarantee
	  that memory is not immediately deallocated upon construction.  
	  (More remnants of debug code too.)

	* Next commit will clean up some debug code, promise.  
	  Will tag ARTXX-00-01-03-x.


2005-01-06	David Fang	<fangism@users.sourceforge.net>

	* MAJOR BUG: see the 2005-01-05 entry of src/NOTES.  
	  Will address the pointer class bug after isolation.  
	  (release vs. reset in destructor)
	  Much debugging code in-place is commented out.  
	  MUST FIX this before release 0.1.4.

	* Many instance reference constructors no longer need a
	  NULL index argument, just uses default of NULL.


2005-01-02	David Fang	<fangism@users.sourceforge.net>

	* New way of "naming" classes for using a "what" trait-like class.
	  By default it uses typeinfo's built-in .name() function, 
	  but may be partially specialized and overridden, especially if
	  name is mangled.  

	* Experimented around with allocating new tokens (token_char)
	  using list_vector_pool, accomplished with overloaded new/delete
	  static member operators.  
	  
	* Parser bothers freeing memory of symbol stack tokens and symbols
	  before exit(1) on error.  (Not necessary, but a good exercise.)


2004-12-24	David Fang	<fangism@users.sourceforge.net>

	* New expression class for multidimensional collections
	  of constant integers, pint_const_collection, which is implemented
	  as packed_array_generic.  (will add pbool_const_collection next)
	  Thinking of reworking expr class hierarchy...

	* IO_utils.{h,tcc}: replaced template signatures with 
	  template template parameters with simpler non-template parameter
	  class with explicit concept requirements in the implementation
	  definitions.  Added write_array for valarray, or anything similar
	  that doesn't have an iterator interface, relying only on
	  random access.  write_array is complemented by 
	  read_sequence_resize().  
	  Consider future container traits to avoid multiple definition 
	  names -- consolidation is good.  

	* multikey.{h,tcc}: added comparison and addition and subtraction
	  operator overloads.  

	* packed_array.{h,tcc}: some methods should've been public.
	  added ostream-write and istream-read methods to 
	  packed_array_generic.  
	  Minor bug fix in constructing coeffs member when size_t argument
	  is 0 (zero-detection for unsigned size-1).  


2004-12-22	David Fang	<fangism@users.sourceforge.net>

	* Eliminated last template argument of multikey, the default value. 
	  Constructors take an optional default value argument.  


2004-12-20	David Fang	<fangism@users.sourceforge.net>

	* Split multikey into declaration and definition files, 
	  actually reduced object sizes.  Also cleaned up header file
	  inclusion as a result.  

	* Added multikey_generic for variable dimension interface, 
	  which just uses valarray functionality.

	* Added packed_array_generic, updated tests to include it.

	* Finished moving structures in the util directory to the
	  util namespace.  From now on, new definitions in here
	  should be in the util namespace, or a subnamespace thereof.  


2004-12-15	David Fang	<fangism@users.sourceforge.net>

	* Revised multikey_qmap to be a specialization of 
	  multikey_map, resulting in less code bloat.  

	* More massive clean up of namespace usage in header and
	  source files.  

	* Added draft of packed_array structure (untested).  


2004-12-12	David Fang	<fangism@users.sourceforge.net>

	* Removed virtual size_t dimensions() const = 0 from
	  all children of instance_collection_base, in favor of caching
	  a const size_t dimension member per collection.  
	  This field, however, is not stored persistently, and is 
	  set upon construction as a run-time constant per collection object.  


2004-12-11	David Fang	<fangism@users.sourceforge.net>

	* Split process and channel instance collections into 
	  dimension-specific subclasses.  

	* Working on phasing out the depth (dimensions) member
	  of instance_collection_base... done!
	  But at a minor cost :(.  
	  Had to de-inline dimensions() in all instance_collections
	  to force symbols to be generated.  
	  The rememdy (if overhead is high) is to cache the 
	  dimensions in a pseudo-const field of instance_collection_base.  
	  (But wait, didn't we just eliminate it?)

	* Lessons learned: 
	  1) Inline virtual functions bad idea, because the base classes
		will be missing the symbols to inlined functions.  
	  2) Calling virtual functions of a class during its construction
		is a no-no, will result in "pure virtual method called"
		run-time abort trap.  Beware of indirect calls to 
		virtual functions through other functions as well.  

	* Some more code clean-up, making base classes persistence
	  helper methods named consistently with _base.  
	  Privatized some methods that need not be visible.  


2004-12-11	David Fang	<fangism@users.sourceforge.net>

	* Tagging this snapshot as ARTXX-00-01-03-u

	* UPDATED persistent_object management slightly.
	  Rather than force user to include static const members
	  within a class, I switched to a less intrusive technique
	  using a new persistent_traits template class.  
	  Now a type is registered by creating an instance of
	  persistent_traits<T>, which is done through a macro.  
	  A single instance of such an object will register the 
	  type (with a supplied hash-string) for the duration of the 
	  program.  (The macro call is unchanged.)  The maintainer 
	  need not declare any additional static members, not even
	  through the old PERSISTENT_STATIC_MEMBERS_DECL.  
	  The persistent_traits template definition may be specialized
	  arbitrarily, so the user need not conform to the same pattern, 
	  although it would save time for specialized maintenance.  
	  Any less effort for the maintainers helps.  


2004-12-10	David Fang	<fangism@users.sourceforge.net>

	* Massively extended the data-type instance collection and reference
	  classes into specialized type, via copy-paste-tweak.  
	  (OMG, nothing broke!)
	  Divided up data instance class files.  
	  datatype_instance_collection is now an abstract parent of
	  many children.  

	* When a datatype reference creates an instance, it now
	  correctly resolves typedefs to generate the correct class
	  of instance collections.  

	* Standardized parent calls to persistent object management
	  helper methods (collect_transient, write_object, load_object), 
	  named by default with _base.  This dramatically reduces
	  the amount of copy-paste maintenance in children classes.  

	* art_object_type_hash.h: Updated persistent object type keys
	  to reflect extensions to class hierarchy.  

	* TODO: instance reference classes that are similar should
	  be rewritten as templates for trivial generalizability.  
	  Same goes for generic instance collection patterns.  


2004-12-06	David Fang	<fangism@users.sourceforge.net>

	* More code clean-up, header file organization continued...

	* Wrapped some lexer variables and functions in ART::lexer namespace.


2004-12-05	David Fang	<fangism@users.sourceforge.net>

	* Major source tree re-organization, partitioning large header
	  files into chunks, usually pulling out the abstract base classes
	  which need to be visible, where there implementers need not
	  be visible.  
	  Implementation source files (.cc) are kept the same.  

	* Much clean-up and header file pruning.  
	  Slightly smaller objects and binaries. 
	  Slightly faster compile-time.  


2004-12-04	David Fang	<fangism@users.sourceforge.net>

	* Re-organized util/ library directory.  
	  Split many template classes into declarations and definition files. 

	* Added util/STL subdirectory with wrappers to split the 
	  standard containers into declarations and definitions files.  
	  Not terribly useful yet.  Current revision is safe
	  to switch arbitrarily between unified and split headers.  

	* Touched up ART source files to work with new headers.  
	  No functionality has changed.  


2004-12-02	David Fang	<fangism@users.sourceforge.net>

	* Further elaborated on pointer_traits.

	* Improved persistent_object_manager pointer manipulation, 
	  leveraging pointer_traits, resulting in much nicer
	  compile-time specialization and selection.  

	* Split hash_qmap and qmap into declaration (.h) and 
	  definitions (.tcc) files, inlining very few basic
	  methods in the declarations file.  
	  So far, this makes squat different in binary size because
	  the .h file still includes the entire definitions of the
	  base classes.  Will experiment further with STL wrappers...


2004-12-01	David Fang	<fangism@users.sourceforge.net>

	* art_object_instance.{h,cc}: Subclassed pbool_instance_collection
	  into dimension-specific variants.  Currently wrapped 
	  with SUBCLASS_PBOOL_ARRAY, but next revisions will 
	  clean out conditional compilation.  

	* util/indent.{h,cc}: Nifty little auto-indentation library.


2004-11-29	David Fang	<fangism@users.sourceforge.net>

	* Miraculously swapped out old pointer-class system with 
	  the new one, without breaking anything.  

	* Obsolete code is retained in util/obsolete for historical
	  purposes.  


2004-11-23	David Fang	<fangism@users.sourceforge.net>

	* Added some useful data structures to the util library.  

	* Planning restructuring of util/.  
	  Memory management (including pointer classes) relocated to
	  util/memory subdirectory.  


2004-11-06	David Fang	<fangism@users.sourceforge.net>
	
	* Debugged and finished testing the list_vector_pool allocator.  


2004-11-05	David Fang	<fangism@users.sourceforge.net>

	* Minor fixes in template code to make gcc-3.4.0 happy, 
	  changes which make code more standard-compliant. 

	* Recovered from a week of using only Apple gcc-3.3
	  while home directory on FreeBSD metwork was dead
	  on a failed hard drive.  Thank goodness for CVS 
	  (being on separate disk/server was *crucial*.)


2004-11-04	David Fang	<fangism@users.sourceforge.net>

	* art_object_instance.{h,cc}: Subclassed pint_instance_collection
	  into dimension-specific variants.  This is prototype code, 
	  switchable to old method (non-persistent) with SUBCLASS_PINT_ARRAY
	  flag defined in the header file.  
	  (Includes specialization for 0-dimensions.)
	  Will remove this switch after it is deemed stable.  

	* multikey*.h: Completed methods for read/writing multidimensional 
	  map collections to binary streams.  

	* list_vector_pool.h: simple template-based chunk allocator. 
	  Not fully debugged yet, so no warranty.  

	* Renamed some src/util files without the art_ prefix
	  because they are independent w.r.t. this project.  

	* Some general clean-up of obsolete #if 0 code-blocks.  


2004-11-01	David Fang	<fangism@users.sourceforge.net>

	* Insiginificant change.  Added CVS Id tags to all source files.   

	* Standard public class member typedefs added to 
	  hash_qmap and qmap data structures.  


2004-10-25	David Fang	<fangism@users.sourceforge.net>

	* Added auxiliary argument type to peristent object management.
	  This allows one to `escape' into a second-level of constructor 
	  tables, or pass at most one argument to initial allocation, 
	  in (class)::construct_empty().  

	* Auxiliary construction argument allows us to sub-type
	  (e.g. size_t templates) within a single registered type.  

	* art_util.{h,cc,tcc}:
	  Added more utility methods for binary I/O, for generic
	  value-sequence (list-like) persistence, and value-map (map-like)
	  persistence.  
	  Reminder that containers of pointers must still go through
	  the persistent object manager.  

	* Going to sub-type instance collections by dimensions (size_t), 
	  leaving a common abstract interface.  
	  Need this to be strongly and statically typed
	  to be able to manipulate persistent multidimensional maps.  


2004-10-23	David Fang	<fangism@users.sourceforge.net>

	* Added abstract operator wrappers around most STL
	  binary operators to enable use in virtual function table.  
	  Implemented in util/operators.h, used in Object/art_object_expr.*.

	* Copy-paste-modified pint_instance_collection to pbool counterpart, 
	  same with pbool_expression_assignment.  

	* Added to class module a boolean flag to indicate whether
	  entire module has already been (successfully) unrolled.  


2004-10-21	David Fang	<fangism@users.sourceforge.net>

	* Tag: ARTXX-00-01-03-l

	* Fixed parameter index unrolling, correctly detecting
	  unroll time errors, in multidimensional arrays, 
	  such as uninitialized or uninstantiated parameters.  

	* Hand-checked behaviour of artobjunroll on test/parser/param dir.


2004-10-19	David Fang	<fangism@users.sourceforge.net>

	* Finished first draft code for unrolling collections of
	  parameter integers, but remains largely untested.  
	  Most other existing code is unaffected.  
	  (Just needed to commit 2+k lines of code...)


2004-10-18	David Fang	<fangism@users.sourceforge.net>

	* Finished developing and testing classes for detecting
	  compacts subslices of multidimensional sparse maps, 
	  namely multikey_map.  
	  See testing class in util/test/cube_slice.h for rigorous testing.  

	* Split parameter assignments into separate compilation module, 
	  art_object_assign, used to be in art_object_connect.


2004-10-13	David Fang	<fangism@users.sourceforge.net>

	* A day of compiler infamy.  
	  GCC nightmares have forever scarred me.  

	* Minor update on how static global persistent type registry
	  is initialized.  The table itself is maintained as a
	  pointer initialized NULL, and access to it is granted through 
	  a static accessor function that allocates upon first use.  
	  Not making static table as an object because is not guaranteed
	  to be properly initialized in order, if not at all!

	* De-allocation of the type registry is managed by a little
	  hackery using a pointer class.  

	* Template method bug in gcc-3.3.x and earlier was worked around
	  by inserting keyword template in the middle of the member
	  function call.  See persistent_object_manager::get_root<T>().  

	* SEVERE PROBLEM (worked-around) with "artobjdump" and 
	  "artobjunroll" on Apple's gcc-3.3:
	  The ART::entity::module class was only referenced as a 
	  pointer, not a static object, in the main executables' source.  
	  In "artc" and "art++2obj" the module references in main()
	  were local objects, NOT pointers.  
	  Apple's gcc failed to link in the majority of modules 
	  in libart++.la, resulting in failure to properly register
	  any and all persistent types.  
	  This is evidenced by the size of the resulting executable, 
	  which ended up as 1/10 of the size it should have been.  
	  The workaround to force proper linkage was to create
	  an artificial local object of type entity::module. 
	  See art_persistent_table.cc.


2004-10-12	David Fang	<fangism@users.sourceforge.net>

	* MAJOR REWORK:
	  Extracted serializable/persistent object functionality
	  and interface into ART-independent framework classes.  
	  Now in "util/persistent.h" and "util/persistent_object_manager.h".

	* Replaced class type enumeration system ("art_object_type_enum.h")
	  with a static type registration system, where each type
	  calls a static function to register itself with the global
	  type map.  Registration requires a unique type-key (here, a 
	  short string), and a pointer to a (possibly static) allocator
	  of the mapped type.  

	* Rewrote some what() functions in object classes, because it
	  should NOT depend on any members being initialized, such as 'key'.


2004-10-10	David Fang	<fangism@users.sourceforge.net>

	* Re-typed ::write_object() with *const* persistent_object_manager&.

	* Considering re-working persistent object type-enumeration.  
	  Instead of giving each persistent type a number, 
	  give a unique key (string/hash), to avoid collisions in
	  cuncurrent development.  
	  See TODO list for more on rationale.  


2004-10-09	David Fang	<fangism@users.sourceforge.net>

	* Sub-typed param_expression_assignment (now abstract) class into 
	  pbool- and pint- specific versions, porting over old
	  functionality.  
	  Also distinguished right-hand-side expression (source) from the 
	  remaining (instance references) in the list (destinations).  
	  Greatly simplified object_list::make_param_assignment as a result.  
	  Moved type-check for parameter initialization from 
	  pint/pbool_expr::initialize into ::append_param_instance_refence.  
	  Much old code commented out, expunge in next revision.  

	* Minor update of a few old error messages; 3 test expectations
	  files in regression suite were updated, first time any of them 
	  were touched in a long time!

	* Added doxygen file header to most header and source files.  
	  As a reward, Doxygen generates really nice file dependency graphs.  
	  Also did some general header clean-up while I was at it.  
	  Updated namespaces, eliminating all references to `fang', 
	  which was only intended to be temporary.

	* Added some standard typedefs to pointer-classes:
	  value_type, pointer, reference, const_...
	  Now they may be referenced, and used for concept checking.  


2004-10-08	David Fang	<fangism@users.sourceforge.net>

	* NEWS: Returned from long hiatus working on conference paper.  

	* Tailored some multidimensional data structures
	  (multikey, and multikey_[q]map) for near-future use in
	  instance-collection classes.  

	* TODO list is somewhat more structured and comprehensible.
	  (Important!)

	* Initial attempt at unrolling parameters (pints only).  
	  Seems straightforward enough for scalars (0-D), but may
	  take some redesign for robust multidimensional support.  
	  No tests written for `artobjunroll' yet, just spot checks.  

	* Next thing to do: restructure param_expr_assignments to
	  be type-specific (only pints and pbools).  
	  Implement basic parameter assignments.  


2004-09-14	David Fang	<fangism@users.sourceforge.net>

	* Completely redone instantiation_base and subclasses, 
	  now called instance_collection_*.  
	  (~5000 lines diff)
	  instantiation_statement and instance_collection classes
	  are *tightly* coupled now.  
	  Instead of containing list of indices directly, 
	  contains list of instantiation_statements, which contain indices.  
	  Instantiation_statements need a back-reference to the
	  containing instance_collection.  
	  As a result, re-implemented handling of 
	  scopespace::add_instance and context::add_instance.  
	  Miraculously, all regression tests still pass.  

	* In class context, introduced sequential scope stack for 
	  appending sequentially managed items (instances, assignments, 
	  connections) to the right list.  
	  Remember that everything outside of definitions (even in 
	  namespaces) is in the globally sequenced list.  

	* Fundamental_type_reference now creates instantiation_statements
	  in addition to instance_collections (static methods).  

	* Multidimensional data structure interface improvements.  

	* A few more safety checks in persistent_object_manager
	  pointer I/O manipulation.  

	* Expressions objects now load (de-serialize) recursively.  

	* Code is littered with #if code blocks -- next commit will
	  be a mandatory clean-up.  


2004-09-10	David Fang	<fangism@users.sourceforge.net>

	* Major reworking of instance management: all instantiations, 
	  parameters, assignments, connections that appear outside of
	  definitions will be globally ordered into a namespace-independent
	  instance management list, to preserve source ordering.  
	  Each definition will have its own local instance management list.
	  Instance management lists will expand into sequentially scoped 
	  bodies, such as loop scopes and conditional scopes.  
	  Namespaces no longer have separate assignment or connection lists.  
	  (most affected: Object/art_context.* Object/art_object_base.*)

	* class instantiation_statement encapsulates a sequential 
	  addition of instance (possible to an array).

	* Object de/serialization interface now uses class "module" instead
	  of the root namespace.  "module" implements standard
	  de/serialization interface.  

	* Introduced new top-level object "module" which includes a
	  global namespace and a globally ordered instance management list.  
	  Note: type enumeration shifts as a result.  

	* Some more documentation on the language spec, for templates, 
	  typedefs, and type-equivalence.

	* Some general improvements and extensions to algorithm library
	  interface (functors and adapters) in the util/ directory.  

	* Minor insignificant shifts in object class hierarchy.  


2004-09-03	David Fang	<fangism@users.sourceforge.net>

	* Started a documentation directory dox/lang for the language
	  specification documentation, not to be mixed with the 
	  doxygen-generated code reference manual.  

	* Added some rather harmless data structure tests that have been 
	  sitting around for a long time (in src/util/test).  


2004-09-01	David Fang	<fangism@users.sourceforge.net>

	* Reworked connection and assignment management in class scopespace.
	  Now kept in separate lists.  (No more connection_assignment_base.)

	* Some initial groundwork for unrolling parameters and instances.  
	  Some major languauge issues need to be resolved first.  

	* Wrote and tested some data structures for multidimensional maps, 
	  both true multidimensional, and pseudo-multidimensional 
	  (with multidimensional key in a flat map).  
	  Also renamed some namespaces along the way.  

	* Note the change in email address.  :)


2004-08-21	David Fang	<fangism@gmail.com>

	* Release 0.1.3.

	* Completed object de/serialization for core classes.  
	  Recycle old type-check test inputs for object dump diff testing.  
	  New tests read in file, produce object file, and text dump.  
	  Second part takes object file and produces text dump.  
	  Text dumps are compared for consistency.  


2004-08-19	David Fang	<fangism@gmail.com>

	* Wrote majority of (semi-tested) object serialization /
	  deserialization code for Object class hierarchy.  
	  So far regression tests run clean, with self_test_no_file().  

	* The next release (0.1.3) should contain a new set of tests
	  for verifying object integrity through dump-and-load.  


2004-08-13	David Fang	<fangism@gmail.com>

	* Release 0.1.2.

	* Made parser code robust to variations in yacc/bison versions, 
	  updated test expected outputs.  This was not trivial.  
	  Works on FreeBSD yacc/bison-1.875, linux yacc/bison-1.35.  

	* Minor tweaks in configuration and Makefile.am's.  


2004-08-12	David Fang	<fangism@gmail.com>

	* Releasing 0.1.1, the completely GNU-ified version.  

	* Completed porting process, with slightly restructured test suite.
	  Short test scripts are automatically generated by the Makefile
	  and run by "make check".  
	  Tests are now run recursively by directory, and recursion 
	  terminates as soon as there is one failure in a directory.  

	* Considerable effort was spent getting the parser grammar files
	  to work with bison, whereas they were exclusively compiled 
	  with yacc only before.  Even test outputs were augmented
	  to account for differences between yacc and bison.  


2004-08-10	David Fang	<fangism@gmail.com>

	* Took the old flattened source directory, and prepared it
	  for use with automake, autoconf, and libtool.  
	  Moving sources into subdirectories meant severing files
	  from their previous revision history, which should remain
	  in the CVS repository's Attic.  

