@c "chpsim/tutorial.texi"
@c $Id: tutorial.texi,v 1.2 2010/04/02 22:17:30 fang Exp $

@node Tutorial
@chapter Tutorial
@cindex tutorial

This chapter demonstrates the basic usage of @command{hacknet}
for generating SPICE-netlists.
A complete description of features and options follows
in the next chapters.

@menu
* Compiling and Running::
* Transistor Ordering::
* Transistor Sizing::
* Transistor Attributes::
* Subcircuits::
* Configuration help::
@end menu

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Compiling and Running
@section Compiling and Running

In this section, you will compile an example of a top-level
circuit into a spice netlist with @hacknet{}.
Write the following HAC file, @file{inv-top.hac}:

@example
bool x, y;
prs @{
  x => y-
@}
@end example

@noindent
Compile the source to an object file:

@example
@shellkbd{haco inv-top.hac inv-top.haco}
@shellkbd{haccreate inv-top.haco inv-top.haco-c}
@end example

@noindent
Generate a netlist:

@example
@shellkbd{hacknet inv-top.haco-c > inv-top.spice}
@end example

@noindent
@hacknet{} normally produces output to @t{stdout}, so its output
should be redirected to a file.
The resulting output should look like:

@example
My:dn:0 !GND x y !GND nch W=5u L=2u
My:up:0 !Vdd x y !Vdd pch W=5u L=2u
@end example

The resulting netlist produces a set of transistors at the top-level.
The @t{!Vdd} and @t{!GND} nodes are implicit power supplies.
The default device types are @t{nch} for NFETs and @t{pch} for PFETs.
Default widths and lengths were chosen because none were specified.  

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Transistor Ordering
@section Transistor Ordering

The netlist produced depends on how production rules are written.
While the boolean operators @code{|} and @code{&} are logically
commutative and associative, the ordering of terms around
@code{&} determine the ordering of transistors between
supply and output.  The leftmost term will be closest to the supply,
and the rightmost term will be directly connected to the output node.
Re-arranging terms around the @code{|} operator produces equivalent 
netlists, though the order in which devices appear in the netlist may change.

One may care about series term ordering for a number of reasons:
performance, signal integrity, charge-sharing.  

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Transistor Sizing
@section Transistor Sizing

The production rule sub-language has enhancements to allow annotation
of netlist attributes.  

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Transistor Attributes
@section Transistor Attributes

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Subcircuits
@section Subcircuits

Process definitions are emitted as subcircuit definitions, 
and can be instantiated with the SPICE @t{X} card.  

Write the following HAC file, @file{inv-def.hac}:

@example
defproc inv(bool x, y) @{
prs @{
  x => y-
@}
@}
@end example

@noindent
Compile the source to an object file as before.  
Since there are no top-level instances, you'll need to tell 
@command{hacknet} what type to emit as the top subcircuit.  

@example
$ hacknet -T 'inv' inv-def.haco-c
@end example

@noindent
should produce:

@example
.subckt inv<> !GND !Vdd x y
My:dn:0 !GND x y !GND nch W=5u L=2u
My:up:0 !Vdd x y !Vdd pch W=5u L=2u
.ends
@end example

@noindent
Use of single-quotes around the type argument is encouraged
(in fact, only required for template parameters to protect the 
@t{<>} characters from being interpreted by the shell).  

Finally, entire hierarchal netlists can be produced by instantiating
subcircuit definitions.  Write the following file @file{invs.hac}, 
and compile it into @file{invs.haco-c}:

@example
import "inv-def.hac";

// pair of inverters
defproc foo(bool a, b, c) @{
inv p(a, b), q(b, c);
@}

foo bar;
@end example

@noindent
Run @command{hacknet}:

@example
$ hacknet invs.haco-c > invs.spice
@end example

@noindent
to produce the following hierarchical netlist.

@example
.subckt inv<> !GND !Vdd x y
My:dn:0 !GND x y !GND nch W=5u L=2u
My:up:0 !Vdd x y !Vdd pch W=5u L=2u
.ends

.subckt foo<> !GND !Vdd a b c
xp !GND !Vdd a b inv<>
xq !GND !Vdd b c inv<>
.ends

xbar !GND !Vdd bar.a bar.b bar.c foo<>
@end example

In this example, there is a top-level instance of type @t{foo} named @t{bar}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@node Configuration help
@section Configuration help

A quick way to list all of the known configuration options with their
default values is:

@example
$ hacknet -d
@end example

@noindent
The output can be pasted into a file for modification.
To use a configuration file, pass the @option{-c} option:

@example
$ hacknet -c my.hacknet-conf inv.haco-c > inv.spice
@end example

