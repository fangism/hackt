"README"
	$Id: README,v 1.13 2006/08/07 16:54:05 fang Exp $

Welcome to HACKT (Hierarchical Asynchronous Circuit Kompiler Toolkit),
a compiler suite for asynchronous system design!  

Fang (fangism)

-------------------------------------------------------------------------------
Getting started:

If you've checked out this project from CVS as opposed to a distribution
tarball (.tar.gz, .tar.bz2), then you'll need the following GNU autotools
installed on your system:

GNUmake-3.79+ is recommended
automake-1.9+
autoconf-2.59+
libtool-1.5+

These may be obtained from gnu.org.  
The first thing to do is run:

./bootstrap

which runs the GNU autotool commands to create a configure script
(from configure.ac) and configurable Makefile.in's (from Makefile.am's).
With a tarball distribution, you won't need to run bootstrap unless
you modify the Makefile.am's or configure.ac.  

The remainder of this section is described in more detail in INSTALL.  
To start the build run "./configure" with your elected options.  
Assuming configure is happy with the system, you're ready to run "make".  
(You should, however, read the next section on requirements and portablility.)

After the build is finished, I strongly recommend running "make check"
from the root directory to run the test suite on the built executables.  

===============================================================================
Requirements and Portability:

To maximize compatibility, the HACKT project is build with the strictest
compiler settings: strictly conforming to the ISO C++ 1998 standard (c++98), 
in particular, GNU extensions are rejected by the -pendantic-error flag.  
In the future, we may decided to upgrade the standard to the C++0x
standard, which is currently in review.  

The following compilers are known to DIE a horrible death and should NOT
be used to compile this project:

	gcc-2.95.x or earlier
	gcc-3.2.x or earlier

The following compilers are supported and recommended:
	gcc-3.3.x, -3.4.x, -4.0.x, -4.1.x
	gcc-4.2-pre (20060610 prerelease in good standing so far)

The following platforms and compilers are actively supported by this project:
	Mac OS X 10.3+, gcc-3.3+ (either Apple* or FSF)
	FreeBSD 4.3+, gcc-3.4+)
	SuSE (or any) linux, gcc-3.3+

* Apple's gcc-4.0 release with OS X 10.4 (build 4061) is buggy and missing
6 months of bug fixes from FSF.  You'll need at least the XCode 2.1 upgrade 
for a working compiler (build 5026).  

These are the platforms to which the developer has access and can maintain
build success and consistency.  
Currently, there are no other known platforms which fail to build and
run the project, but that means they have yet to be discovered.  

To build the source, one need at least bison-1.35 (that's not asking too much),
or some POSIX-compliant implementation of yacc.  
For example, bison-1.28 is known to fail, and is not actively supported(*1).  
Some versions of byaccj (in C mode) have been known to work.  
The YACC variable is used to set the parser generator and may be 
passed to the configure script.  
lex or flex is required to generate the scanner, and may be set using the
LEX configure variable.  

(*1)	The output file produced by bison-1.28 does not conform to 
	standard, it produces name.yy.tab.c instead of y.tab.c, 
	same with the header file.  The yacc rules from automake/autoconf
	do not account for this deviation.  

Supported versions of bison: 1.35, 1.875, 2.0, 2.1
Supported versions of flex: 2.5.4, 2.5.31

Unsupported versions of bison:
	1.28 -- see comment *1
Unsupported versions of flex:
	2.5.33 -- fails -Wundef (__STDC_VERSION__) and -Werror (signed comp.)

===============================================================================
KNOWN ISSUES

2005-12-07:
	The flags used in conftest's during configuration are not
	aware of the AM_CXXFLAGS in src/Makefile.am.
	Some of the results (such as testing for long long) may
	be inconsistent.  
	Workaround: explictly pass the relevant flags to CXXFLAGS
	at configure time to guarantee consistency.
	TODO: find way to coordinate use and selection of flags
	between autoconf and automake.  
	Status: Fixed with autoconf flag tests.

2005-12-07:
	An early release of gcc-3.3 doesn't correctly heed the
	-Wno-unused-parameter flag.  
	(Tested on some sun-sparc-solaris2.9 machine.)
	This causes -Werror to error out unfortunately.  
	If this is the problem, then you need to add -Wno-error
	to CXXFLAGS at configure-time.  
	Also suspecting (not confirmed) a wrong code-generation bug
		in gcc-3.3 (sun-sparc-solaris2.9) 
		when optimizations are *OFF*.  

2005-07-26:
It has been reported that some implementations of libc's getopt don't work
as expected, especially if your name is Chris LaFrieda and you run linux.  
Here's the reason why: from the man (3) page of linux's getopt:
	By  default,  getopt() permutes the contents of argv as it
	scans, so that eventually all the non-options are  at  the
	end.   Two other modes are also implemented.  If the first
	character of optstring is '+' or the environment  variable
	POSIXLY_CORRECT  is  set,  then option processing stops as
	soon as a non-option  argument  is  encountered.   If  the
	first  character of optstring is '-', then each non-option
	argv-element is handled as if it were the argument  of  an
	option  with  character code 1.  (This is used by programs
	that were written to expect options  and  other  argv-eleÂ­
	ments in any order and that care about the ordering of the
	two.)  The special argument '--' forces an end of  option-
	scanning regardless of the scanning mode.
The problem is fixed by passing '+' to enforce POSIX behavior.  

===============================================================================
FOR DEVELOPERS

Makefiles:

This section describes the use of Make.stddef and Make.global makefile
fragments.  Make.stddef is a makefile header whose purpose is to 
define project-wide macros for popular command-line utilities, and to 
initialize standard macro variables that are used to accumulate 
over a makefile, e.g. CLEANFILES.  This relieves one of remembering
where the first definition of some common variables are -- if it's
common, it belongs in Make.stddef.  Make.stddef should be the first
thing included by other makefiles, either directly or indirectly.  
Make.global contains common project-wide Makefile targets.  By including
this at the end of each makefile, you automatically inherit a bunch of
useful targets.  Some of the targets depend on variables that accumulate
since their initializations in Make.stddef, such as AUTO_IGNORE.  
Make.global should be the last make-fragment included in any makefile.  

-------------------------------------------------------------------------------
CVS tags:

If you have cvs read access, then you can select specific versions and 
releases of the art++ package.  

The standard tag names are: ARTXX-##-##-## (for pre-HACKT revisions)
	or HACKT-##-##-## for all new revisions, 
	where ## is a 2 digit number (including leading zeros).  
Eventually, branch tags wil be introduced by appending
	-BRANCHNAME-##-## to the tag names.  
	The first -## of the branch name may be optional, 
	it is sometimes useful to reuse the same branch name with
	a different number to signify a new epoch of revisions with
	the same theme.  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cvsignore (a phony make target to make .cvsignore recursively)

CVS ignore files (.cvsignore) are all semi-automatically generated
in this project.  The rationale behind this is that automake already
knows most of the files that should be ignored because they are 
built (although there are always exceptions).  The Makefile system
uses AUTO_IGNORE as a cumulative list of files to automatically ignore.  
In addition, the generated .cvsignore files depend on a local.cvsignore
file from which it acquires user-defined (non-automatic) files.  
local.cvsignore is also where wildcard patterns belong.  
The local.cvsignore file may also be automatically generated by other 
means, e.g., copying from an existing .cvsignore.  
In all cases, "make cvsignore" creates .cvsignore recursively for all
listed subdirectories, and "make clean-cvsignore" removes them.  

