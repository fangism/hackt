
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	100
	3	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	11	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	15	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	16	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	24	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	25	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	27	##ADDR##	footprnt	0	#HEAD#	#TAIL#	309
	28	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	29	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	30	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	31	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	33	##ADDR##	procdefn	0	#HEAD#	#TAIL#	108
	34	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	35	##ADDR##	prealplh	0	#HEAD#	#TAIL#	29
	36	##ADDR##	prealins	0	#HEAD#	#TAIL#	16
	37	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	38	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	39	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	40	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	41	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	42	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	43	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	45	##ADDR##	sprmvref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	procdefn	0	#HEAD#	#TAIL#	107
	49	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	50	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	51	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	52	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	53	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	55	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	56	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	59	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	60	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	61	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	62	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	63	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	66	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	procdefn	0	#HEAD#	#TAIL#	168
	69	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	70	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	71	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	72	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	73	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	74	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	75	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	76	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	77	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	80	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	81	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	82	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	83	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	84	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	85	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	86	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	87	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	88	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	89	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	91	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	92	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	93	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	95	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	96	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	97	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	98	##ADDR##	footprnt	0	#HEAD#	#TAIL#	370
	99	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	100	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	101	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	102	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	103	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	104	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	105	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	106	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	107	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	108	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	109	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	28
	110	##ADDR##	footprnt	0	#HEAD#	#TAIL#	391
	111	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	112	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	113	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	32
	114	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	115	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	116	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	117	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	118	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	119	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	120	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	121	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	122	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	123	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	29
	124	##ADDR##	footprnt	0	#HEAD#	#TAIL#	412
	125	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	126	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	127	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	36
	128	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	129	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	130	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	131	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	132	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	133	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	134	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	135	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	136	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	137	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	138	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	139	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	140	##ADDR##	footprnt	0	#HEAD#	#TAIL#	433
	141	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	142	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	143	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	40
	144	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	145	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	146	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	147	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	148	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	149	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	150	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	151	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	152	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	153	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	154	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	155	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	156	##ADDR##	procdefn	0	#HEAD#	#TAIL#	105
	157	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	158	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	159	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	160	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	161	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	162	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	163	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	164	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	165	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	166	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	167	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	168	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	169	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	170	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	171	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	172	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	173	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	174	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	175	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	176	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	177	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	178	##ADDR##	prealplh	0	#HEAD#	#TAIL#	29
	179	##ADDR##	prealins	0	#HEAD#	#TAIL#	16
	180	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	181	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	182	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	183	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	184	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	185	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	186	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	187	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	188	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	189	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	190	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	191	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	192	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	193	##ADDR##	sprmvref	0	#HEAD#	#TAIL#	16
	194	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	195	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	196	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	197	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	198	##ADDR##	procdefn	0	#HEAD#	#TAIL#	109
	199	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	200	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	201	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	202	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	203	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	204	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	205	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	206	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	207	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	208	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	209	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	210	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	211	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	212	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	213	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	214	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	215	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	216	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	217	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	218	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	219	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	220	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	221	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	222	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	223	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	224	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	225	##ADDR##	procdefn	0	#HEAD#	#TAIL#	135
	226	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	227	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	228	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	229	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	230	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	231	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	232	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	233	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	234	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	235	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	236	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	237	##ADDR##	chanplch	0	#HEAD#	#TAIL#	28
	238	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	239	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	240	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	241	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	242	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	243	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	244	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	245	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	246	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	247	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	248	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	249	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	250	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	251	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	252	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	253	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	254	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	255	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	256	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	257	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	258	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	259	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	260	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	261	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	262	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	263	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	264	##ADDR##	procdefn	0	#HEAD#	#TAIL#	171
	265	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	266	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	267	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	268	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	269	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	270	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	271	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	272	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	273	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	274	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	275	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	276	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	277	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	278	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	279	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	280	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	281	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	282	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	283	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	284	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	285	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	286	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	287	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	288	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	289	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	290	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	32
	291	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	292	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	293	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	294	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	295	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	296	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	297	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	298	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	299	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	300	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	301	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	302	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	303	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	304	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	305	##ADDR##	nlogicex	0	#HEAD#	#TAIL#	22
	306	##ADDR##	bretcast	0	#HEAD#	#TAIL#	12
	307	##ADDR##	nfuncexp	0	#HEAD#	#TAIL#	22
	308	##ADDR##	nexplist	0	#HEAD#	#TAIL#	20
	309	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	310	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	311	##ADDR##	bretcast	0	#HEAD#	#TAIL#	12
	312	##ADDR##	nfuncexp	0	#HEAD#	#TAIL#	22
	313	##ADDR##	nexplist	0	#HEAD#	#TAIL#	20
	314	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	315	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	316	##ADDR##	footprnt	0	#HEAD#	#TAIL#	543
	317	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	318	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	319	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	320	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	32
	321	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	322	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	323	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	324	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	325	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	326	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	327	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	328	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	329	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	330	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	331	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	332	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	333	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	334	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	335	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	336	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	337	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	338	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	339	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	340	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	341	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	342	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	343	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	344	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	345	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	346	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	347	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	348	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	349	##ADDR##	apbmvref	0	#HEAD#	#TAIL#	29
	350	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	351	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	352	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	353	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	354	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	355	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	356	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	357	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	358	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	359	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	360	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	361	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	362	##ADDR##	apbmvref	0	#HEAD#	#TAIL#	33
	363	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	364	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	365	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	366	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	367	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	368	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	369	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	370	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	371	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	372	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	373	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	374	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	375	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	376	##ADDR##	apbmvref	0	#HEAD#	#TAIL#	25
	377	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	378	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	379	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	380	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	381	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	382	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	383	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	384	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	385	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	386	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	387	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	388	##ADDR##	apbmvref	0	#HEAD#	#TAIL#	37
	389	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	390	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	391	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	392	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	393	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	394	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	395	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	396	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	397	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	398	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	399	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	400	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	401	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	402	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	403	##ADDR##	footprnt	0	#HEAD#	#TAIL#	813
	404	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	405	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	406	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	407	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	408	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	409	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	410	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	411	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	412	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	413	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  11 instantiation-collections
  0 sub-namespaces
  9 definitions
  0 typedefs
  Definitions:
    bool_sink = process-definition (defined) bool_sink(
        chan?(bool<>) B
      )
      In definition "bool_sink", we have: {
      Instances:
        B = chan?(bool<>) bool_sink::B
        b = bool<> bool_sink::b
      unroll sequence: 
        chan?(bool<>) B
        bool<> b
      chp:
        concurrent: {
          *[
            B?(b)
          ]
        }
      footprint: {
        B = channel chan?(bool<>)^0 = bool_sink::B (1) 
        b = bool^0 = bool_sink::b (1) 
        Created state:
        channel instance pool:
        1	bool_sink::B
        bool instance pool:
        1	bool_sink::b
        resolved concurrent actions:
          *[
            B?(b)
          ]
        chp events: {
          event[0]: receive: B?(b), #pred: 1, succ: 0 
        }
      }
      }

    bool_sink_delay = process-definition (defined) bool_sink_delay<
      preal<> D
      >(
        chan?(bool<>) B
      )
      In definition "bool_sink_delay", we have: {
      Parameters:
        D = preal<> bool_sink_delay::D
      Instances:
        B = chan?(bool<>) bool_sink_delay::B
        b = bool<> bool_sink_delay::b
      unroll sequence: 
        chan?(bool<>) B
        bool<> b
      chp:
        concurrent: {
          *[
            [after=D] B?(b)
          ]
        }
      }

    bool_sink_once = process-definition (defined) bool_sink_once<
      pint<> N
      >(
        chan?(bool<>) B
      )
      In definition "bool_sink_once", we have: {
      Parameters:
        N = pint<> bool_sink_once::N
      Instances:
        B = chan?(bool<>) bool_sink_once::B
        b = bool<> bool_sink_once::b
      unroll sequence: 
        chan?(bool<>) B
        bool<> b
      chp:
        concurrent: {
          concurrent i:[0..N-1]: {
            B?(b)
          }
        }
      }

    bool_source = process-definition (defined) bool_source<>
<
      pint<> N
      pbool<> B[0..N-1]
      >(
        chan!(bool<>) S
      )
      In definition "bool_source", we have: {
      Parameters:
        B = pbool<> bool_source::B^1
        N = pint<> bool_source::N
      Instances:
        S = chan!(bool<>) bool_source::S
      unroll sequence: 
        chan!(bool<>) S
      chp:
        concurrent: {
          *[
            concurrent i:[0..N-1]: {
              S!(B[$i])
            }
          ]
        }
      footprint collection: {
        <3, {0,1,0}> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          N = pint^0 value: 3
          S = channel chan!(bool<>)^0 = bool_source::S (1) 
          Created state:
          channel instance pool:
          1	bool_source::S
          resolved concurrent actions:
            *[
              sequential: {
                S!(false)
                S!(true)
                S!(false)
              }
            ]
          chp events: {
            event[0]: send: S!(false), #pred: 1, succ: 2 
            event[1]: send: S!(false), #pred: 1, succ: 0 
            event[2]: send: S!(true), #pred: 1, succ: 1 
          }
        }
        <4, {0,0,0,1}> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 0
              2 = 0
              3 = 1
            }
          N = pint^0 value: 4
          S = channel chan!(bool<>)^0 = bool_source::S (1) 
          Created state:
          channel instance pool:
          1	bool_source::S
          resolved concurrent actions:
            *[
              sequential: {
                S!(false)
                S!(false)
                S!(false)
                S!(true)
              }
            ]
          chp events: {
            event[0]: send: S!(false), #pred: 1, succ: 3 
            event[1]: send: S!(true), #pred: 1, succ: 0 
            event[2]: send: S!(false), #pred: 1, succ: 1 
            event[3]: send: S!(false), #pred: 1, succ: 2 
          }
        }
        <5, {0,1,0,0,0}> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 0
              4 = 0
            }
          N = pint^0 value: 5
          S = channel chan!(bool<>)^0 = bool_source::S (1) 
          Created state:
          channel instance pool:
          1	bool_source::S
          resolved concurrent actions:
            *[
              sequential: {
                S!(false)
                S!(true)
                S!(false)
                S!(false)
                S!(false)
              }
            ]
          chp events: {
            event[0]: send: S!(false), #pred: 1, succ: 4 
            event[1]: send: S!(false), #pred: 1, succ: 0 
            event[2]: send: S!(false), #pred: 1, succ: 1 
            event[3]: send: S!(false), #pred: 1, succ: 2 
            event[4]: send: S!(true), #pred: 1, succ: 3 
          }
        }
        <6, {1,0,0,0,0,0}> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 1
              1 = 0
              2 = 0
              3 = 0
              4 = 0
              5 = 0
            }
          N = pint^0 value: 6
          S = channel chan!(bool<>)^0 = bool_source::S (1) 
          Created state:
          channel instance pool:
          1	bool_source::S
          resolved concurrent actions:
            *[
              sequential: {
                S!(true)
                S!(false)
                S!(false)
                S!(false)
                S!(false)
                S!(false)
              }
            ]
          chp events: {
            event[0]: send: S!(true), #pred: 1, succ: 5 
            event[1]: send: S!(false), #pred: 1, succ: 0 
            event[2]: send: S!(false), #pred: 1, succ: 1 
            event[3]: send: S!(false), #pred: 1, succ: 2 
            event[4]: send: S!(false), #pred: 1, succ: 3 
            event[5]: send: S!(false), #pred: 1, succ: 4 
          }
        }
      }
      }

    bool_source_constant = process-definition (defined) bool_source_constant<>
<
      pbool<> V
      >(
        chan!(bool<>) S
      )
      In definition "bool_source_constant", we have: {
      Parameters:
        V = pbool<> bool_source_constant::V
      Instances:
        S = chan!(bool<>) bool_source_constant::S
      unroll sequence: 
        chan!(bool<>) S
      chp:
        concurrent: {
          *[
            S!(V)
          ]
        }
      }

    bool_source_delay = process-definition (defined) bool_source_delay<>
<
      pint<> N
      pbool<> B[0..N-1]
      preal<> D
      >(
        chan!(bool<>) S
      )
      In definition "bool_source_delay", we have: {
      Parameters:
        B = pbool<> bool_source_delay::B^1
        D = preal<> bool_source_delay::D
        N = pint<> bool_source_delay::N
      Instances:
        S = chan!(bool<>) bool_source_delay::S
      unroll sequence: 
        chan!(bool<>) S
      chp:
        concurrent: {
          *[
            concurrent i:[0..N-1]: {
              [after=D] S!(B[$i])
            }
          ]
        }
      }

    bool_source_once = process-definition (defined) bool_source_once<>
<
      pint<> N
      pbool<> B[0..N-1]
      >(
        chan!(bool<>) S
      )
      In definition "bool_source_once", we have: {
      Parameters:
        B = pbool<> bool_source_once::B^1
        N = pint<> bool_source_once::N
      Instances:
        S = chan!(bool<>) bool_source_once::S
      unroll sequence: 
        chan!(bool<>) S
      chp:
        concurrent: {
          concurrent i:[0..N-1]: {
            S!(B[$i])
          }
        }
      }

    bool_source_shared = process-definition (defined) bool_source_shared<>
<
      pint<> N
      pbool<> B[0..N-1]
      >(
        chan?() Cin
        chan!() Cout
        chan!!(bool<>) S
      )
      In definition "bool_source_shared", we have: {
      Parameters:
        B = pbool<> bool_source_shared::B^1
        N = pint<> bool_source_shared::N
      Instances:
        Cin = chan?() bool_source_shared::Cin
        Cout = chan!() bool_source_shared::Cout
        S = chan!!(bool<>) bool_source_shared::S
      unroll sequence: 
        chan?() Cin
        chan!() Cout
        chan!!(bool<>) S
      chp:
        concurrent: {
          *[
            sequential: {
              Cin?
              concurrent i:[0..N-1]: {
                S!(B[$i])
              }
              Cout!
            }
          ]
        }
      }

    my_foo = process-definition (defined) my_foo(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) C
        chan?(bool<>) D
        chan!(bool<>) G
      )
      In definition "my_foo", we have: {
      Instances:
        A = chan?(bool<>) my_foo::A
        B = chan?(bool<>) my_foo::B
        C = chan?(bool<>) my_foo::C
        D = chan?(bool<>) my_foo::D
        G = chan!(bool<>) my_foo::G
        a = bool<> my_foo::a
        b = bool<> my_foo::b
        c = bool<> my_foo::c
        d = bool<> my_foo::d
      unroll sequence: 
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) C
        chan?(bool<>) D
        chan!(bool<>) G
        bool<> a
        bool<> b
        bool<> c
        bool<> d
      chp:
        concurrent: {
          *[
            sequential: {
              concurrent: {
                A?(a)
                B?(b)
                C?(c)
                D?(d)
              }
              G!(bool(my_gcd(a,b))||bool(my_gcd(c,d)))
            }
          ]
        }
      footprint: {
        A = channel chan?(bool<>)^0 = my_foo::A (1) 
        B = channel chan?(bool<>)^0 = my_foo::B (2) 
        C = channel chan?(bool<>)^0 = my_foo::C (3) 
        D = channel chan?(bool<>)^0 = my_foo::D (4) 
        G = channel chan!(bool<>)^0 = my_foo::G (5) 
        a = bool^0 = my_foo::a (1) 
        b = bool^0 = my_foo::b (2) 
        c = bool^0 = my_foo::c (3) 
        d = bool^0 = my_foo::d (4) 
        Created state:
        channel instance pool:
        1	my_foo::A
        2	my_foo::B
        3	my_foo::C
        4	my_foo::D
        5	my_foo::G
        bool instance pool:
        1	my_foo::a
        2	my_foo::b
        3	my_foo::c
        4	my_foo::d
        resolved concurrent actions:
          *[
            sequential: {
              concurrent: {
                A?(a)
                B?(b)
                C?(c)
                D?(d)
              }
              G!(bool(my_gcd(a,b))||bool(my_gcd(c,d)))
            }
          ]
        chp events: {
          event[0]: fork: , #pred: 1, succ: 3 4 5 6 
          event[1]: send: G!(bool(my_gcd(a,b))||bool(my_gcd(c,d))), #pred: 1, succ: 0 
          event[2]: join: , #pred: 4, succ: 1 
          event[3]: receive: A?(a), #pred: 1, succ: 2 
          event[4]: receive: B?(b), #pred: 1, succ: 2 
          event[5]: receive: C?(c), #pred: 1, succ: 2 
          event[6]: receive: D?(d), #pred: 1, succ: 2 
        }
      }
      }

  Instances:
    A = chan(bool<>) A
    AS = bool_source<> AS
    B = chan(bool<>) B
    BS = bool_source<> BS
    C = chan(bool<>) C
    CS = bool_source<> CS
    D = chan(bool<>) D
    DS = bool_source<> DS
    G = chan(bool<>) G
    GS = bool_sink<> GS
    X = my_foo<> X
}

footprint: {
  A = channel chan(bool<>)^0 = A (1) 
  AS = process bool_source<>^0<4, {0,0,0,1}> = AS (2) (
    S = channel chan!(bool<>)^0 = A (1) 
  )
  B = channel chan(bool<>)^0 = B (2) 
  BS = process bool_source<>^0<5, {0,1,0,0,0}> = BS (3) (
    S = channel chan!(bool<>)^0 = B (2) 
  )
  C = channel chan(bool<>)^0 = C (3) 
  CS = process bool_source<>^0<3, {0,1,0}> = CS (4) (
    S = channel chan!(bool<>)^0 = C (3) 
  )
  D = channel chan(bool<>)^0 = D (4) 
  DS = process bool_source<>^0<6, {1,0,0,0,0,0}> = DS (5) (
    S = channel chan!(bool<>)^0 = D (4) 
  )
  G = channel chan(bool<>)^0 = G (5) 
  GS = process bool_sink<>^0 = GS (6) (
    B = channel chan?(bool<>)^0 = G (5) 
  )
  X = process my_foo<>^0 = X (1) (
    A = channel chan?(bool<>)^0 = A (1) 
    B = channel chan?(bool<>)^0 = B (2) 
    C = channel chan?(bool<>)^0 = C (3) 
    D = channel chan?(bool<>)^0 = D (4) 
    G = channel chan!(bool<>)^0 = G (5) 
  )
  Created state:
  process instance pool:
  1	X
  2	AS<4, {0,0,0,1}>
  3	BS<5, {0,1,0,0,0}>
  4	CS<3, {0,1,0}>
  5	DS<6, {1,0,0,0,0,0}>
  6	GS
  channel instance pool:
  1	A
  2	B
  3	C
  4	D
  5	G
}
