#!hacchpsimguile -b
!#
;; "select-nested-loop-a-01.hacchpsimscm"
;;	$Id: select-nested-loop-a-01.hacchpsimscm,v 1.3 2010/04/06 00:01:26 fang Exp $
;; vi: ft=scheme
;; @haco@ select-nested-loop-a.haco-c
;; @chpsimtrace@ select-nested-loop-a-03.chpsimtrace

;; Developing histogram construction routines

; (use-modules (hackt chpsim-primitives))
(use-modules (hackt chpsim-trace))
(use-modules (hackt chpsim-primitives))
(use-modules (hackt chpsim))
(use-modules (hackt algorithm)) ; for list-flatten
(use-modules (hackt streams))
(use-modules (ice-9 streams))
; (use-modules (srfi srfi-1))	; for alist (associative lists

(define trace-name "select-nested-loop-a-03.chpsimtrace")
; (define rand-trace (hac:open-chpsim-trace-accessor trace-name))

"critical-path:"
(define crit (chpsim-trace-critical-path trace-name))
(stream-for-each-display-newline crit)

"all static events:"
; (define all-static-events-stream (static-event-stream))
(stream-for-each-display-newline all-static-events-stream)

(define select-events
  (stream-filter (lambda (e) (hac:chpsim-event-select? (cdr e)))
    all-static-events-stream)
)
"all select-events:"
(stream-for-each-display-newline select-events)

"successors (cdr) of select events (car):"
(define select-successor-lists
  (stream-map (lambda (e) (cons (car e) (hac:chpsim-event-successors (cdr e))))
    select-events)
)
(stream-for-each-display-newline select-successor-lists)

"list of successor lists, associated by common predecessor:"
(define ll (stream->list select-successor-lists))
ll

"re-structure into branch-predecessor pairs association:"
(define ll-reverse-assoc-succ (map 
  (lambda (a) 
    (map 
      (lambda (b) (cons b (car a)))
      (cdr a)
    )
  )
ll)
)
ll-reverse-assoc-succ

"flatten into single associative list:"
(define assoc-pred (list-flatten ll-reverse-assoc-succ))
assoc-pred
; unordered

"and sort (predecessor cdr is branch):"
; (set! assoc-pred (sort! assoc-pred (lambda (s t) (< (car s) (car t)))))
(define sorted-assoc-pred (sort-list assoc-pred (lambda (s t) (< (car s) (car t)))))
sorted-assoc-pred

"do some associative lookups O(n):"
(assoc-ref sorted-assoc-pred 7)
(assoc-ref sorted-assoc-pred 8)
(assoc-ref sorted-assoc-pred 9)
(assoc-ref sorted-assoc-pred 10)
; expect not found
"do some list lookups on list of successor-lists:"
(assoc-ref ll 9)
(assoc-ref ll 10)
(assoc-ref ll 16)
(assoc-ref ll 17)

"make a zero-initialized histogram from successor-lists:"
(define ll-histo
(map
  (lambda (x)
    (cons (car x)
      (map (lambda (y) (cons y 0)) (cdr x))
    ) ; end cons
  ) ; end lambda
ll) ; end map
) ; end define
ll-histo

