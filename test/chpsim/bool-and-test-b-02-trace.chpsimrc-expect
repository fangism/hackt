Writing simulation trace to "bool-and-test-b-02.chpsimtrace".
	0	0	0	null
Out : chan(bool<>) Out = (0) [empty]
	1	8	1	
Out : chan(bool<>) Out = (0) [empty]
	2	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	2	9	3	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	2	12	4	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	7	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (0) [empty]
	7	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (0) [empty]
	7	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (0) [empty]
	9	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	9	11	3	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	9	15	4	bool_source::S!(false)
Out : chan(bool<>) Out = (0) [empty]
	20	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	25	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (0) [empty]
	25	3	1	
Out : chan(bool<>) Out = (0) [empty]
	27	2	1	bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3])
Out : chan(bool<>) Out = (1) [full]
	28	8	1	
Out : chan(bool<>) Out = (1) [full]
	32	17	6	bool_sink::B?(bool_sink::b)
Out : chan(bool<>) Out = (1) [empty]
	33	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (1) [empty]
	33	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (1) [empty]
	33	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (1) [empty]
	35	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	35	10	3	bool_source::S!(false)
Out : chan(bool<>) Out = (1) [empty]
	35	14	4	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	45	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	50	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (1) [empty]
	50	3	1	
Out : chan(bool<>) Out = (1) [empty]
	52	2	1	bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3])
Out : chan(bool<>) Out = (0) [full]
	53	8	1	
Out : chan(bool<>) Out = (0) [full]
	57	17	6	bool_sink::B?(bool_sink::b)
Out : chan(bool<>) Out = (0) [empty]
	58	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (0) [empty]
	58	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (0) [empty]
	58	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (0) [empty]
	60	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	60	9	3	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	60	13	4	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	70	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	75	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (0) [empty]
	75	3	1	
Out : chan(bool<>) Out = (0) [empty]
	77	2	1	bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3])
Out : chan(bool<>) Out = (0) [full]
	78	8	1	
Out : chan(bool<>) Out = (0) [full]
	82	17	6	bool_sink::B?(bool_sink::b)
Out : chan(bool<>) Out = (0) [empty]
	83	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (0) [empty]
	83	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (0) [empty]
	83	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (0) [empty]
	85	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	85	11	3	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	85	12	4	bool_source::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	95	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (0) [empty]
	100	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (0) [empty]
	100	3	1	
Out : chan(bool<>) Out = (0) [empty]
	102	2	1	bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3])
Out : chan(bool<>) Out = (1) [full]
	103	8	1	
Out : chan(bool<>) Out = (1) [full]
	107	17	6	bool_sink::B?(bool_sink::b)
Out : chan(bool<>) Out = (1) [empty]
	108	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (1) [empty]
	108	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (1) [empty]
	108	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (1) [empty]
	110	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	110	10	3	bool_source::S!(false)
Out : chan(bool<>) Out = (1) [empty]
	110	15	4	bool_source::S!(false)
Out : chan(bool<>) Out = (1) [empty]
	120	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	125	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (1) [empty]
	125	3	1	
Out : chan(bool<>) Out = (1) [empty]
	127	2	1	bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3])
Out : chan(bool<>) Out = (1) [full]
	128	8	1	
Out : chan(bool<>) Out = (1) [full]
	132	17	6	bool_sink::B?(bool_sink::b)
Out : chan(bool<>) Out = (1) [empty]
	133	4	1	bool_and::A[0]?(bool_and::a[0])
Out : chan(bool<>) Out = (1) [empty]
	133	5	1	bool_and::A[1]?(bool_and::a[1])
Out : chan(bool<>) Out = (1) [empty]
	133	6	1	bool_and::A[2]?(bool_and::a[2])
Out : chan(bool<>) Out = (1) [empty]
	135	1	2	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	135	9	3	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	135	14	4	bool_source::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	145	16	5	[after=20] bool_source_delay::S!(true)
Out : chan(bool<>) Out = (1) [empty]
	150	7	1	bool_and::A[3]?(bool_and::a[3])
Out : chan(bool<>) Out = (1) [empty]
time: 150
Trace file contents: 1 epochs.
		start	start	file	chunk
	epoch	index	time	offset	size
	0	0	0	0	2414
Epoch 0:
	event		event	cause
	index	time	node	index
	0	0	0	0
	1	1	8	0
	2	2	1	0
	3	2	9	0
	4	2	12	0
	5	7	4	2
	6	7	5	3
	7	7	6	4
	8	9	1	5
	9	9	11	6
	10	9	15	7
	11	20	16	0
	12	25	7	11
	13	25	3	12
	14	27	2	13
	15	28	8	14
	16	32	17	14
	17	33	4	15
	18	33	5	15
	19	33	6	15
	20	35	1	17
	21	35	10	18
	22	35	14	19
	23	45	16	12
	24	50	7	23
	25	50	3	24
	26	52	2	25
	27	53	8	26
	28	57	17	26
	29	58	4	27
	30	58	5	27
	31	58	6	27
	32	60	1	29
	33	60	9	30
	34	60	13	31
	35	70	16	24
	36	75	7	35
	37	75	3	36
	38	77	2	37
	39	78	8	38
	40	82	17	38
	41	83	4	39
	42	83	5	39
	43	83	6	39
	44	85	1	41
	45	85	11	42
	46	85	12	43
	47	95	16	36
	48	100	7	47
	49	100	3	48
	50	102	2	49
	51	103	8	50
	52	107	17	50
	53	108	4	51
	54	108	5	51
	55	108	6	51
	56	110	1	53
	57	110	10	54
	58	110	15	55
	59	120	16	48
	60	125	7	59
	61	125	3	60
	62	127	2	61
	63	128	8	62
	64	132	17	62
	65	133	4	63
	66	133	5	63
	67	133	6	63
	68	135	1	65
	69	135	9	66
	70	135	14	67
	71	145	16	60
	72	150	7	71
bool state trace:
	event	global	raw
	index	index	value
	5	1	1
	6	2	1
	7	3	1
	12	4	1
	16	5	1
	17	1	1
	18	2	1
	19	3	0
	24	4	1
	28	5	0
	29	1	1
	30	2	0
	31	3	1
	36	4	1
	40	5	0
	41	1	1
	42	2	1
	43	3	1
	48	4	1
	52	5	1
	53	1	1
	54	2	1
	55	3	1
	60	4	1
	64	5	1
	65	1	1
	66	2	0
	67	3	0
	72	4	1
int state trace:
enum state trace:
channel state trace:
	event	global	raw
	index	index	value
	2	1	1, 
	3	2	1, 
	4	3	1, 
	5	1	[ack]
	6	2	[ack]
	7	3	[ack]
	8	1	1, 
	9	2	1, 
	10	3	0, 
	11	4	1, 
	12	4	[ack]
	14	5	1, 
	16	5	[ack]
	17	1	[ack]
	18	2	[ack]
	19	3	[ack]
	20	1	1, 
	21	2	0, 
	22	3	1, 
	23	4	1, 
	24	4	[ack]
	26	5	0, 
	28	5	[ack]
	29	1	[ack]
	30	2	[ack]
	31	3	[ack]
	32	1	1, 
	33	2	1, 
	34	3	1, 
	35	4	1, 
	36	4	[ack]
	38	5	0, 
	40	5	[ack]
	41	1	[ack]
	42	2	[ack]
	43	3	[ack]
	44	1	1, 
	45	2	1, 
	46	3	1, 
	47	4	1, 
	48	4	[ack]
	50	5	1, 
	52	5	[ack]
	53	1	[ack]
	54	2	[ack]
	55	3	[ack]
	56	1	1, 
	57	2	0, 
	58	3	0, 
	59	4	1, 
	60	4	[ack]
	62	5	1, 
	64	5	[ack]
	65	1	[ack]
	66	2	[ack]
	67	3	[ack]
	68	1	1, 
	69	2	1, 
	70	3	1, 
	71	4	1, 
	72	4	[ack]
note the critical path through the rate-limiting channel, A[3] 
