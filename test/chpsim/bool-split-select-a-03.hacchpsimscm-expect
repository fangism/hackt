"corresponding process IDs of all events:"
(8 1 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 5 6 7)
"corresponding delays of all events:"
(10.0 2.0 2.0 2.0 2.0 2.0 1.0 0.0 2.0 2.0 2.0 2.0 1.0 0.0 5.0 5.0 5.0 5.0 5.0 5.0)
"corresponding #predecessors of all events:"
(0 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1)
"all events belonging to process ID 3:"
(6 . #<raw-chpsim-event-node: fork: , pid: 3, #pred: 1, succ: 14 15 
>)
(7 . #<raw-chpsim-event-node: null: null, pid: 3, #pred: 1, succ: 6 
>)
(8 . #<raw-chpsim-event-node: send: split.O[0]!(split.x), pid: 3, #pred: 1, succ: 7 
channel deps: 3 
>)
(9 . #<raw-chpsim-event-node: send: split.O[1]!(split.x), pid: 3, #pred: 1, succ: 7 
channel deps: 4 
>)
(10 . #<raw-chpsim-event-node: send: split.O[2]!(split.x), pid: 3, #pred: 1, succ: 7 
channel deps: 5 
>)
(11 . #<raw-chpsim-event-node: send: split.O[3]!(split.x), pid: 3, #pred: 1, succ: 7 
channel deps: 6 
>)
(12 . #<raw-chpsim-event-node: select: [ split.c==0 -> ... [] split.c==1 -> ... [] split.c==2 -> ... [] split.c==3 -> ... ], pid: 3, #pred: 1, succ: 8 9 10 11 
int deps: 1 
>)
(13 . #<raw-chpsim-event-node: join: , pid: 3, #pred: 2, succ: 12 
>)
(14 . #<raw-chpsim-event-node: receive: split.C?(split.c), pid: 3, #pred: 1, succ: 13 
channel deps: 2 
>)
(15 . #<raw-chpsim-event-node: receive: split.I?(split.x), pid: 3, #pred: 1, succ: 13 
channel deps: 1 
>)
"all receive events belonging to process ID 3:"
(14 . #<raw-chpsim-event-node: receive: split.C?(split.c), pid: 3, #pred: 1, succ: 13 
channel deps: 2 
>)
(15 . #<raw-chpsim-event-node: receive: split.I?(split.x), pid: 3, #pred: 1, succ: 13 
channel deps: 1 
>)
