// "bool-split.hac"
//	$Id: bool-split.hac,v 1.3 2007/02/05 06:40:28 fang Exp $
// conditional routing

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
	TODO: use log(N) bits for select channel
	This version is written using array indexing on channels.
	An out-of-bounds access should trigger a run-time error.  
 */
template <pint N>
defproc bool_split (chan?(int) C; chan?(bool) I; chan!(bool) O[N]) {
int c;
bool x;
chp {
*[ C?(c),I?(x);
	O[c]!(x)
]
}
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
	Two-way split.
	Specialized to use a bool control channel.  
 */
defproc bool_split_2 (chan?(bool) C, I; chan!(bool) O[2]) {
bool c, x;
chp {
*[ C?(c),I?(x);
	[ c -> O[1]!(x)
	[] else -> O[0]!(x)
	]
]
}
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
	This version is written using deterministic selection.  
	An out-of-bounds access will simply cause deadlock.  
 */
template <pint N>
defproc bool_split_select (chan?(int) C; chan?(bool) I; chan!(bool) O[N]) {
int c;
bool x;
chp {
*[ C?(c),I?(x);
	[ [] i:N: (c == i) -> O[i]!(x) ]
]
}
}

