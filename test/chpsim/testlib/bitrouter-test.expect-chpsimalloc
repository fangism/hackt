Variables: 
bool[1]: "B.lc" 
bool[2]: "B.ld" 
bool[3]: "B.dir" 
int[1]: "B.d" 
chan[1]: "B.L[0]" 
chan[2]: "B.L[1]" 
chan[3]: "B.R[0]" 
chan[4]: "B.R[1]" 

Event graph: 
event[0]: fork: null, #pred: 0, succ: 1 

# process[1]:
event[1]: select: [ #B.L[0] -> ... : #B.L[1] -> ... ], pid: 1, #pred: 1, succ: 10 18 
channel deps: 1 2 
event[2]: null: null, pid: 1, #pred: 1, succ: 1 
event[3]: select: *[ ~B.lc -> ... ], pid: 1, #pred: 1, succ: 5 2 
event[4]: send: B.R[B.d]!(B.lc,B.ld), pid: 1, #pred: 1, succ: 3 
int deps: 1 
channel deps: 3 4 
event[5]: receive: B.L[0]?(B.lc,B.ld), pid: 1, #pred: 1, succ: 4 
channel deps: 1 
event[6]: null: null, pid: 1, #pred: 1, succ: 3 
event[7]: assign: B.d := 1, pid: 1, #pred: 1, succ: 6 
event[8]: assign: B.d := 0, pid: 1, #pred: 1, succ: 6 
event[9]: select: [ B.dir -> ... [] else -> ... ], pid: 1, #pred: 1, succ: 7 8 
event[10]: receive: B.L[0]?(B.lc,B.dir), pid: 1, #pred: 1, succ: 9 
channel deps: 1 
event[11]: select: *[ ~B.lc -> ... ], pid: 1, #pred: 1, succ: 13 2 
event[12]: send: B.R[B.d]!(B.lc,B.ld), pid: 1, #pred: 1, succ: 11 
int deps: 1 
channel deps: 3 4 
event[13]: receive: B.L[1]?(B.lc,B.ld), pid: 1, #pred: 1, succ: 12 
channel deps: 2 
event[14]: null: null, pid: 1, #pred: 1, succ: 11 
event[15]: assign: B.d := 1, pid: 1, #pred: 1, succ: 14 
event[16]: assign: B.d := 0, pid: 1, #pred: 1, succ: 14 
event[17]: select: [ B.dir -> ... [] else -> ... ], pid: 1, #pred: 1, succ: 15 16 
event[18]: receive: B.L[1]?(B.lc,B.dir), pid: 1, #pred: 1, succ: 17 
channel deps: 2 

