WARNING: channel B.L[0] lacks connection to a producer.
WARNING: channel B.L[1] lacks connection to a producer.
WARNING: channel B.R[0] lacks connection to a consumer.
WARNING: channel B.R[1] lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	139
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	11	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	29
	13	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	29
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	CHPndtsl	0	#HEAD#	#TAIL#	24
	33	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	34	##ADDR##	chanprob	0	#HEAD#	#TAIL#	12
	35	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	39	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	40	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	46	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	49	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	52	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	53	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	54	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	55	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	56	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	57	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	58	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	59	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	60	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	61	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	63	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	64	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	66	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	67	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	69	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	72	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	73	##ADDR##	chanprob	0	#HEAD#	#TAIL#	12
	74	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	75	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	76	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	77	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	78	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	79	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	80	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	81	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	82	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	83	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	84	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	85	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	86	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	87	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	88	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	89	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	90	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	91	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	92	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	93	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	94	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	95	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	96	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	97	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	98	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	99	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	100	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	101	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	102	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	103	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	104	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	105	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	106	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	107	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	108	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	109	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	110	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	111	##ADDR##	footprnt	0	#HEAD#	#TAIL#	724
	112	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	28
	113	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	114	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	115	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	116	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	117	##ADDR##	CHPndtsl	0	#HEAD#	#TAIL#	24
	118	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	119	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	120	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	121	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	122	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	123	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	124	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	125	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	126	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	127	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	128	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	129	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	130	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	131	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	132	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	133	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	134	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	135	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	136	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	137	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	138	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	139	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	140	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	141	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	142	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	143	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	144	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	145	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	146	##ADDR##	footprnt	0	#HEAD#	#TAIL#	382
	147	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    bit_router = process-definition (defined) bit_router(
        chan?(bool<>, bool<>) L[0..1]
        chan!(bool<>, bool<>) R[0..1]
      )
      In definition "bit_router", we have: {
      Instances:
        L = chan?(bool<>, bool<>) bit_router::L^1
        R = chan!(bool<>, bool<>) bit_router::R^1
        d = int<1> bit_router::d
        dir = bool<> bit_router::dir
        lc = bool<> bit_router::lc
        ld = bool<> bit_router::ld
      unroll sequence: 
        chan?(bool<>, bool<>) L[0..1]
        chan!(bool<>, bool<>) R[0..1]
        bool<> lc
        bool<> ld
        bool<> dir
        int<1> d
      chp:
        concurrent: {
          *[
            nondeterministic: {
              #L[0] -> sequential: {
                L[0]?(lc,dir)
                deterministic: {
                  dir -> d := 1
                  else -> d := 0
                }
                *[
                  ~lc -> sequential: {
                    L[0]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
              #L[1] -> sequential: {
                L[1]?(lc,dir)
                deterministic: {
                  dir -> d := 1
                  else -> d := 0
                }
                *[
                  ~lc -> sequential: {
                    L[1]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
            }
          ]
        }
      footprint: {
        L = channel chan?(bool<>, bool<>)^1
          {
            [0] = bit_router::L[0] (1) 
            [1] = bit_router::L[1] (2) 
          }
        R = channel chan!(bool<>, bool<>)^1
          {
            [0] = bit_router::R[0] (3) 
            [1] = bit_router::R[1] (4) 
          }
        d = int<1>^0 = bit_router::d (1) 
        dir = bool^0 = bit_router::dir (3) 
        lc = bool^0 = bit_router::lc (1) 
        ld = bool^0 = bit_router::ld (2) 
        Created state:
        channel instance pool:
        1	bit_router::L[0]
        2	bit_router::L[1]
        3	bit_router::R[0]
        4	bit_router::R[1]
        int instance pool:
        1	bit_router::d
        bool instance pool:
        1	bit_router::lc
        2	bit_router::ld
        3	bit_router::dir
        resolved concurrent actions:
          *[
            nondeterministic: {
              #L[0] -> sequential: {
                L[0]?(lc,dir)
                deterministic: {
                  dir -> d := 1
                  else -> d := 0
                }
                *[
                  ~lc -> sequential: {
                    L[0]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
              #L[1] -> sequential: {
                L[1]?(lc,dir)
                deterministic: {
                  dir -> d := 1
                  else -> d := 0
                }
                *[
                  ~lc -> sequential: {
                    L[1]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
            }
          ]
        chp events: {
          event[0]: select: [ #L[0] -> ... : #L[1] -> ... ], #pred: 1, succ: 9 17 
          event[1]: null: null, #pred: 1, succ: 0 
          event[2]: select: *[ ~lc -> ... ], #pred: 1, succ: 4 1 
          event[3]: send: R[d]!(lc,ld), #pred: 1, succ: 2 
          event[4]: receive: L[0]?(lc,ld), #pred: 1, succ: 3 
          event[5]: null: null, #pred: 1, succ: 2 
          event[6]: assign: d := 1, #pred: 1, succ: 5 
          event[7]: assign: d := 0, #pred: 1, succ: 5 
          event[8]: select: [ dir -> ... [] else -> ... ], #pred: 1, succ: 6 7 
          event[9]: receive: L[0]?(lc,dir), #pred: 1, succ: 8 
          event[10]: select: *[ ~lc -> ... ], #pred: 1, succ: 12 1 
          event[11]: send: R[d]!(lc,ld), #pred: 1, succ: 10 
          event[12]: receive: L[1]?(lc,ld), #pred: 1, succ: 11 
          event[13]: null: null, #pred: 1, succ: 10 
          event[14]: assign: d := 1, #pred: 1, succ: 13 
          event[15]: assign: d := 0, #pred: 1, succ: 13 
          event[16]: select: [ dir -> ... [] else -> ... ], #pred: 1, succ: 14 15 
          event[17]: receive: L[1]?(lc,dir), #pred: 1, succ: 16 
        }
      }
      }

  Instances:
    B = bit_router<> B
}

footprint: {
  B = process bit_router<>^0 = B (1) (
    L = channel chan?(bool<>, bool<>)^1
      {
        [0] = B.L[0] (1) 
        [1] = B.L[1] (2) 
      }
    R = channel chan!(bool<>, bool<>)^1
      {
        [0] = B.R[0] (3) 
        [1] = B.R[1] (4) 
      }
  )
  Created state:
  process instance pool:
  1	B
  channel instance pool:
  1	B.L[0]
  2	B.L[1]
  3	B.R[0]
  4	B.R[1]
}
