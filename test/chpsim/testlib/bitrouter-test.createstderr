WARNING: channel B.L[0] lacks connection to a producer.
WARNING: channel B.L[1] lacks connection to a producer.
WARNING: channel B.R[0] lacks connection to a consumer.
WARNING: channel B.R[1] lacks connection to a consumer.
Warnings found (4) while creating complete type <top-level>.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	155
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	15	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	29
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	25	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	29
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	30	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	32	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	33	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	34	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	37	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	CHPndtsl	0	#HEAD#	#TAIL#	24
	41	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	42	##ADDR##	chanprob	0	#HEAD#	#TAIL#	12
	43	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	47	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	48	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	53	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	54	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	nfuncexp	0	#HEAD#	#TAIL#	21
	56	##ADDR##	nexplist	0	#HEAD#	#TAIL#	24
	57	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	61	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	62	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	63	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	65	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	66	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	72	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	73	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	74	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	75	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	76	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	77	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	78	##ADDR##	chanprob	0	#HEAD#	#TAIL#	12
	79	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	80	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	81	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	82	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	83	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	84	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	85	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	86	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	87	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	88	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	89	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	90	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	91	##ADDR##	nfuncexp	0	#HEAD#	#TAIL#	21
	92	##ADDR##	nexplist	0	#HEAD#	#TAIL#	24
	93	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	95	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	96	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	97	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	98	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	100	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	101	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	102	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	103	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	104	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	105	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	106	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	107	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	108	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	109	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	110	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	111	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	112	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	113	##ADDR##	footprnt	0	#HEAD#	#TAIL#	670
	114	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	28
	115	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	116	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	117	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	118	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	119	##ADDR##	CHPndtsl	0	#HEAD#	#TAIL#	24
	120	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	121	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	122	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	123	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	124	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	125	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	126	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	127	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	128	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	129	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	130	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	131	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	132	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	133	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	134	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	135	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	136	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	29
	137	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	28
	138	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	139	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	140	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	141	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	142	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	143	##ADDR##	footprnt	0	#HEAD#	#TAIL#	480
	144	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    bit_router = process-definition (defined) bit_router(
        bool<> !GND
        bool<> !Vdd
        chan?(bool<>, bool<>) L[0..1]
        chan!(bool<>, bool<>) R[0..1]
      )
      In definition "bit_router", we have: {
      Instances:
        !GND = bool<> bit_router::!GND
        !Vdd = bool<> bit_router::!Vdd
        L = chan?(bool<>, bool<>) bit_router::L^1
        R = chan!(bool<>, bool<>) bit_router::R^1
        d = int<1> bit_router::d
        dir = bool<> bit_router::dir
        lc = bool<> bit_router::lc
        ld = bool<> bit_router::ld
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(bool<>, bool<>) L[0..1]
          chan!(bool<>, bool<>) R[0..1]
        )
        bool<> lc
        bool<> ld
        bool<> dir
        int<1> d
      chp:
        concurrent: {
          *[
            nondeterministic: {
              #L[0] -> sequential: {
                L[0]?(lc,dir)
                d := zcond(dir,1,0)
                *[
                  ~lc -> sequential: {
                    L[0]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
              #L[1] -> sequential: {
                L[1]?(lc,dir)
                d := zcond(dir,1,0)
                *[
                  ~lc -> sequential: {
                    L[1]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
            }
          ]
        }
      footprint: {
        !GND = bool^0 = bit_router<>::!GND (1) 
        !Vdd = bool^0 = bit_router<>::!Vdd (2) 
        L = channel chan?(bool<>, bool<>)^1
          {
            [0] = bit_router<>::L[0] (1) 
            [1] = bit_router<>::L[1] (2) 
          }
        R = channel chan!(bool<>, bool<>)^1
          {
            [0] = bit_router<>::R[0] (3) 
            [1] = bit_router<>::R[1] (4) 
          }
        d = int<1>^0 = bit_router<>::d (1) 
        dir = bool^0 = bit_router<>::dir (5) 
        lc = bool^0 = bit_router<>::lc (3) 
        ld = bool^0 = bit_router<>::ld (4) 
        Created state:
        channel instance pool: (4 ports, 0 local, 0 mapped)
        1	bit_router<>::L[0]	
        2	bit_router<>::L[1]	
        3	bit_router<>::R[0]	
        4	bit_router<>::R[1]	
        int instance pool: (0 ports, 1 local, 0 mapped)
        1	bit_router<>::d	
        bool instance pool: (2 ports, 3 local, 0 mapped)
        1	bit_router<>::!GND	
        2	bit_router<>::!Vdd	
        3	bit_router<>::lc	
        4	bit_router<>::ld	
        5	bit_router<>::dir	
        resolved concurrent actions:
          *[
            nondeterministic: {
              #L[0] -> sequential: {
                L[0]?(lc,dir)
                d := zcond(dir,1,0)
                *[
                  ~lc -> sequential: {
                    L[0]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
              #L[1] -> sequential: {
                L[1]?(lc,dir)
                d := zcond(dir,1,0)
                *[
                  ~lc -> sequential: {
                    L[1]?(lc,ld)
                    R[d]!(lc,ld)
                  }
                ]
              }
            }
          ]
        chp events: {
          event[0]: select: [ #L[0] -> ... : #L[1] -> ... ], #pred: 1, succ: 6 11 
          event[1]: null: null, #pred: 1, succ: 0 
          event[2]: select: *[ ~lc -> ... ], #pred: 1, succ: 4 1 
          event[3]: send: R[d]!(lc,ld), #pred: 1, succ: 2 
          event[4]: receive: L[0]?(lc,ld), #pred: 1, succ: 3 
          event[5]: assign: d := zcond(dir,1,0), #pred: 1, succ: 2 
          event[6]: receive: L[0]?(lc,dir), #pred: 1, succ: 5 
          event[7]: select: *[ ~lc -> ... ], #pred: 1, succ: 9 1 
          event[8]: send: R[d]!(lc,ld), #pred: 1, succ: 7 
          event[9]: receive: L[1]?(lc,ld), #pred: 1, succ: 8 
          event[10]: assign: d := zcond(dir,1,0), #pred: 1, succ: 7 
          event[11]: receive: L[1]?(lc,dir), #pred: 1, succ: 10 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    B = bit_router<> B
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  B = process bit_router<>^0 = B (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    L = channel chan?(bool<>, bool<>)^1
      {
        [0] = B.L[0] (1) 
        [1] = B.L[1] (2) 
      }
    R = channel chan!(bool<>, bool<>)^1
      {
        [0] = B.R[0] (3) 
        [1] = B.R[1] (4) 
      }
  )
  Created state:
  process instance pool: (0 ports, 1 local, 0 mapped)
  1	B	bit_router<>
    channel: 1,2,3,4
    bool: 1,2
  channel instance pool: (0 ports, 4 local, 0 mapped)
  1	B.L[0]	
  2	B.L[1]	
  3	B.R[0]	
  4	B.R[1]	
  private sub-int index map:
    (1 -> 0)
    (2 -> 1)
  bool instance pool: (0 ports, 2 local, 3 mapped)
  1	!GND	
  2	!Vdd	
  private sub-bool index map:
    (1 -> 0)
    (2 -> 3)
}
