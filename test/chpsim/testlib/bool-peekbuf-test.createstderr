WARNING: channel A.L lacks connection to a producer.
WARNING: channel A.R lacks connection to a consumer.
WARNING: channel B.L lacks connection to a producer.
WARNING: channel B.R lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	117
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	13	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	19	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	20	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	21	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	24	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	26	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	358
	29	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	30	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	31	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	32	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	34	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	35	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	36	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	37	##ADDR##	procdefn	0	#HEAD#	#TAIL#	122
	38	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	39	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	40	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	41	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	42	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	43	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	44	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	45	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	46	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	47	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	51	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	52	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	54	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	55	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	56	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	58	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	footprnt	0	#HEAD#	#TAIL#	394
	61	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	62	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	64	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	65	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	66	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	67	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	68	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	69	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	70	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	71	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	72	##ADDR##	footprnt	0	#HEAD#	#TAIL#	422
	73	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	74	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    bool_peekbuf = process-definition (defined) bool_peekbuf(
        chan?(bool<>) L
        chan!(bool<>) R
      )
      In definition "bool_peekbuf", we have: {
      Instances:
        L = chan?(bool<>) bool_peekbuf::L
        R = chan!(bool<>) bool_peekbuf::R
        x = bool<> bool_peekbuf::x
      unroll sequence: 
        chan?(bool<>) L
        chan!(bool<>) R
        bool<> x
      chp:
        concurrent: {
          *[
            sequential: {
              L#(x)
              L?
              R!(x)
            }
          ]
        }
      footprint: {
        L = channel chan?(bool<>)^0 = bool_peekbuf::L (1) 
        R = channel chan!(bool<>)^0 = bool_peekbuf::R (2) 
        x = bool^0 = bool_peekbuf::x (1) 
        Created state:
        channel instance pool:
        1	bool_peekbuf::L
        2	bool_peekbuf::R
        bool instance pool:
        1	bool_peekbuf::x
        resolved concurrent actions:
          *[
            sequential: {
              L#(x)
              L?
              R!(x)
            }
          ]
        chp events: {
          event[0]: peek: L#(x), #pred: 1, succ: 2 
          event[1]: send: R!(x), #pred: 1, succ: 0 
          event[2]: receive: L?, #pred: 1, succ: 1 
        }
      }
      }

    bool_peekbuf_fast = process-definition (defined) bool_peekbuf_fast(
        chan?(bool<>) L
        chan!(bool<>) R
      )
      In definition "bool_peekbuf_fast", we have: {
      Instances:
        L = chan?(bool<>) bool_peekbuf_fast::L
        R = chan!(bool<>) bool_peekbuf_fast::R
        x = bool<> bool_peekbuf_fast::x
      unroll sequence: 
        chan?(bool<>) L
        chan!(bool<>) R
        bool<> x
      chp:
        concurrent: {
          *[
            sequential: {
              L#(x)
              concurrent: {
                L?
                R!(x)
              }
            }
          ]
        }
      footprint: {
        L = channel chan?(bool<>)^0 = bool_peekbuf_fast::L (1) 
        R = channel chan!(bool<>)^0 = bool_peekbuf_fast::R (2) 
        x = bool^0 = bool_peekbuf_fast::x (1) 
        Created state:
        channel instance pool:
        1	bool_peekbuf_fast::L
        2	bool_peekbuf_fast::R
        bool instance pool:
        1	bool_peekbuf_fast::x
        resolved concurrent actions:
          *[
            sequential: {
              L#(x)
              concurrent: {
                L?
                R!(x)
              }
            }
          ]
        chp events: {
          event[0]: peek: L#(x), #pred: 1, succ: 4 
          event[1]: join: , #pred: 2, succ: 0 
          event[2]: receive: L?, #pred: 1, succ: 1 
          event[3]: send: R!(x), #pred: 1, succ: 1 
          event[4]: fork: , #pred: 1, succ: 2 3 
        }
      }
      }

  Instances:
    A = bool_peekbuf<> A
    B = bool_peekbuf_fast<> B
}

footprint: {
  A = process bool_peekbuf<>^0 = A (1) (
    L = channel chan?(bool<>)^0 = A.L (1) 
    R = channel chan!(bool<>)^0 = A.R (2) 
  )
  B = process bool_peekbuf_fast<>^0 = B (2) (
    L = channel chan?(bool<>)^0 = B.L (3) 
    R = channel chan!(bool<>)^0 = B.R (4) 
  )
  Created state:
  process instance pool:
  1	A
  2	B
  channel instance pool:
  1	A.L
  2	A.R
  3	B.L
  4	B.R
}
