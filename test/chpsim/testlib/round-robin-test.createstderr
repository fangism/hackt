WARNING: channel RR1.Cin lacks connection to a producer.
WARNING: channel RR1.Cout lacks connection to a consumer.
WARNING: channel RR2.Cin lacks connection to a producer.
WARNING: channel RR2.Cout lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	111
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	28
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	9	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	11	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	13	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	14	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	15	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	16	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	18	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	footprnt	0	#HEAD#	#TAIL#	340
	20	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	12
	21	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	22	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	24	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	25	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	26	##ADDR##	procdefn	0	#HEAD#	#TAIL#	130
	27	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	28	##ADDR##	chanplch	0	#HEAD#	#TAIL#	28
	29	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	30	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	31	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	32	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	33	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	34	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	35	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	36	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	37	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	38	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	41	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	44	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	45	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	47	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	footprnt	0	#HEAD#	#TAIL#	416
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	51	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	52	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	53	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	54	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	55	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	56	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	57	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	58	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	59	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	60	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	61	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	62	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	63	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	64	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	65	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	footprnt	0	#HEAD#	#TAIL#	434
	69	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	70	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	71	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    round_robin_source = process-definition (defined) round_robin_source(
        chan?() Cin
        chan!() Cout
      )
      In definition "round_robin_source", we have: {
      Instances:
        Cin = chan?() round_robin_source::Cin
        Cout = chan!() round_robin_source::Cout
      unroll sequence: 
        ports: (
          chan?() Cin
          chan!() Cout
        )
      chp:
        concurrent: {
          *[
            sequential: {
              Cout!
              Cin?
            }
          ]
        }
      footprint: {
        Cin = channel chan?()^0 = round_robin_source<>::Cin (1) 
        Cout = channel chan!()^0 = round_robin_source<>::Cout (2) 
        Created state:
        channel instance pool:
        1	round_robin_source<>::Cin
        2	round_robin_source<>::Cout
        resolved concurrent actions:
          *[
            sequential: {
              Cout!
              Cin?
            }
          ]
        chp events: {
          event[0]: send: Cout!, #pred: 1, succ: 1 
          event[1]: receive: Cin?, #pred: 1, succ: 0 
        }
      }
      }

    round_robin_source_finite = process-definition (defined) round_robin_source_finite<>
<
      pint<> N
      >(
        chan?() Cin
        chan!() Cout
      )
      In definition "round_robin_source_finite", we have: {
      Parameters:
        N = pint<> round_robin_source_finite::N
      Instances:
        Cin = chan?() round_robin_source_finite::Cin
        Cout = chan!() round_robin_source_finite::Cout
      unroll sequence: 
        ports: (
          chan?() Cin
          chan!() Cout
        )
      chp:
        concurrent: {
          concurrent i:[0..N-1]: {
            sequential: {
              Cout!
              Cin?
            }
          }
        }
      footprint collection: {
        <3> {
          Cin = channel chan?()^0 = round_robin_source_finite<3>::Cin (1) 
          Cout = channel chan!()^0 = round_robin_source_finite<3>::Cout (2) 
          N = pint^0 value: 3
          Created state:
          channel instance pool:
          1	round_robin_source_finite<3>::Cin
          2	round_robin_source_finite<3>::Cout
          resolved concurrent actions:
            sequential: {
              sequential: {
                Cout!
                Cin?
              }
              sequential: {
                Cout!
                Cin?
              }
              sequential: {
                Cout!
                Cin?
              }
            }
          chp events: {
            event[0]: send: Cout!, #pred: 1, succ: 4 
            event[1]: send: Cout!, #pred: 1, succ: 5 
            event[2]: receive: Cin?, #pred: 1, succ: 1 
            event[3]: send: Cout!, #pred: 1, succ: 2 
            event[4]: receive: Cin?, #pred: 1, succ: 3 
            event[5]: receive: Cin?, #pred: 1, succ: 
          }
        }
      }
      }

  Instances:
    RR1 = round_robin_source<> RR1
    RR2 = round_robin_source_finite<> RR2
}

footprint: {
  RR1 = process round_robin_source<>^0 = RR1 (1) (
    Cin = channel chan?()^0 = RR1.Cin (1) 
    Cout = channel chan!()^0 = RR1.Cout (2) 
  )
  RR2 = process round_robin_source_finite<>^0<3> = RR2 (2) (
    Cin = channel chan?()^0 = RR2.Cin (3) 
    Cout = channel chan!()^0 = RR2.Cout (4) 
  )
  Created state:
  process instance pool:
  1	RR1
  2	RR2<3>
  channel instance pool:
  1	RR1.Cin
  2	RR1.Cout
  3	RR2.Cin
  4	RR2.Cout
}
