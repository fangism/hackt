WARNING: channel RR1.Cin lacks connection to a producer.
WARNING: channel RR1.Cout lacks connection to a consumer.
WARNING: channel RR2.Cin lacks connection to a producer.
WARNING: channel RR2.Cout lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	7	##ADDR##	procdefn	0	#HEAD#	#TAIL#	139
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	11	##ADDR##	chanplch	0	#HEAD#	#TAIL#	28
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	19	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	21	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	22	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	23	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	24	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	26	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	footprnt	0	#HEAD#	#TAIL#	372
	28	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	12
	29	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	30	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	32	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	34	##ADDR##	procdefn	0	#HEAD#	#TAIL#	158
	35	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	36	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	37	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	38	##ADDR##	chanplch	0	#HEAD#	#TAIL#	28
	39	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	40	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	41	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	42	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	44	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	45	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	46	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	47	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	49	##ADDR##	CHPlopac	0	#HEAD#	#TAIL#	25
	50	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	51	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	54	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	57	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	58	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	60	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	footprnt	0	#HEAD#	#TAIL#	448
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	64	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	65	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	66	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	67	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	68	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	69	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	70	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	71	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	72	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	73	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	74	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	75	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	77	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	78	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	79	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	80	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	81	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	82	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	83	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	84	##ADDR##	footprnt	0	#HEAD#	#TAIL#	574
	85	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    round_robin_source = process-definition (defined) round_robin_source(
        bool<> !GND
        bool<> !Vdd
        chan?() Cin
        chan!() Cout
      )
      In definition "round_robin_source", we have: {
      Instances:
        !GND = bool<> round_robin_source::!GND
        !Vdd = bool<> round_robin_source::!Vdd
        Cin = chan?() round_robin_source::Cin
        Cout = chan!() round_robin_source::Cout
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?() Cin
          chan!() Cout
        )
      chp:
        concurrent: {
          *[
            sequential: {
              Cout!
              Cin?
            }
          ]
        }
      footprint: {
        !GND = bool^0 = round_robin_source<>::!GND (1) 
        !Vdd = bool^0 = round_robin_source<>::!Vdd (2) 
        Cin = channel chan?()^0 = round_robin_source<>::Cin (1) 
        Cout = channel chan!()^0 = round_robin_source<>::Cout (2) 
        Created state:
        channel instance pool:
        1	round_robin_source<>::Cin
        2	round_robin_source<>::Cout
        bool instance pool:
        1	round_robin_source<>::!GND
        2	round_robin_source<>::!Vdd
        resolved concurrent actions:
          *[
            sequential: {
              Cout!
              Cin?
            }
          ]
        chp events: {
          event[0]: send: Cout!, #pred: 1, succ: 1 
          event[1]: receive: Cin?, #pred: 1, succ: 0 
        }
      }
      }

    round_robin_source_finite = process-definition (defined) round_robin_source_finite<>
<
      pint<> N
      >(
        bool<> !GND
        bool<> !Vdd
        chan?() Cin
        chan!() Cout
      )
      In definition "round_robin_source_finite", we have: {
      Parameters:
        N = pint<> round_robin_source_finite::N
      Instances:
        !GND = bool<> round_robin_source_finite::!GND
        !Vdd = bool<> round_robin_source_finite::!Vdd
        Cin = chan?() round_robin_source_finite::Cin
        Cout = chan!() round_robin_source_finite::Cout
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?() Cin
          chan!() Cout
        )
      chp:
        concurrent: {
          concurrent i:[0..N-1]: {
            sequential: {
              Cout!
              Cin?
            }
          }
        }
      footprint collection: {
        <3> {
          !GND = bool^0 = round_robin_source_finite<3>::!GND (1) 
          !Vdd = bool^0 = round_robin_source_finite<3>::!Vdd (2) 
          Cin = channel chan?()^0 = round_robin_source_finite<3>::Cin (1) 
          Cout = channel chan!()^0 = round_robin_source_finite<3>::Cout (2) 
          N = pint^0 value: 3
          Created state:
          channel instance pool:
          1	round_robin_source_finite<3>::Cin
          2	round_robin_source_finite<3>::Cout
          bool instance pool:
          1	round_robin_source_finite<3>::!GND
          2	round_robin_source_finite<3>::!Vdd
          resolved concurrent actions:
            sequential: {
              sequential: {
                Cout!
                Cin?
              }
              sequential: {
                Cout!
                Cin?
              }
              sequential: {
                Cout!
                Cin?
              }
            }
          chp events: {
            event[0]: send: Cout!, #pred: 1, succ: 4 
            event[1]: send: Cout!, #pred: 1, succ: 5 
            event[2]: receive: Cin?, #pred: 1, succ: 1 
            event[3]: send: Cout!, #pred: 1, succ: 2 
            event[4]: receive: Cin?, #pred: 1, succ: 3 
            event[5]: receive: Cin?, #pred: 1, succ: 
          }
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    RR1 = round_robin_source<> RR1
    RR2 = round_robin_source_finite<> RR2
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  RR1 = process round_robin_source<>^0 = RR1 (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    Cin = channel chan?()^0 = RR1.Cin (1) 
    Cout = channel chan!()^0 = RR1.Cout (2) 
  )
  RR2 = process round_robin_source_finite<>^0<3> = RR2 (2) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    Cin = channel chan?()^0 = RR2.Cin (3) 
    Cout = channel chan!()^0 = RR2.Cout (4) 
  )
  Created state:
  process instance pool:
  1	RR1
  2	RR2<3>
  channel instance pool:
  1	RR1.Cin
  2	RR1.Cout
  3	RR2.Cin
  4	RR2.Cout
  bool instance pool:
  1	!GND
  2	!Vdd
}
