Variables: 
bool[1]: "A.a[0]" 
bool[2]: "A.a[1]" 
bool[3]: "A.a[2]" 
bool[4]: "A.a[3]" 
bool[5]: "Z.b" 
chan[1]: "In[0]" 
chan[2]: "In[1]" 
chan[3]: "In[2]" 
chan[4]: "In[3]" 
chan[5]: "Out" 

Event graph: 
event[0]: fork: null, pid: 0, #pred: 0, succ: 8 1 9 12 16 17 
event[1]: send: bool_source::S!(true), pid: 2, #pred: 1, succ: 1 
channel deps: 1 
event[2]: send: bool_and::O!(bool_and::a[0]&&bool_and::a[1]&&bool_and::a[2]&&bool_and::a[3]), pid: 1, #pred: 1, succ: 8 
channel deps: 5 
event[3]: null: , pid: 1, #pred: 4, succ: 2 
event[4]: receive: bool_and::A[0]?(bool_and::a[0]), pid: 1, #pred: 1, succ: 3 
channel deps: 1 
event[5]: receive: bool_and::A[1]?(bool_and::a[1]), pid: 1, #pred: 1, succ: 3 
channel deps: 2 
event[6]: receive: bool_and::A[2]?(bool_and::a[2]), pid: 1, #pred: 1, succ: 3 
channel deps: 3 
event[7]: receive: bool_and::A[3]?(bool_and::a[3]), pid: 1, #pred: 1, succ: 3 
channel deps: 4 
event[8]: fork: , pid: 1, #pred: 1, succ: 4 5 6 7 
event[9]: send: bool_source::S!(true), pid: 3, #pred: 1, succ: 11 
channel deps: 2 
event[10]: send: bool_source::S!(false), pid: 3, #pred: 1, succ: 9 
channel deps: 2 
event[11]: send: bool_source::S!(true), pid: 3, #pred: 1, succ: 10 
channel deps: 2 
event[12]: send: bool_source::S!(true), pid: 4, #pred: 1, succ: 15 
channel deps: 3 
event[13]: send: bool_source::S!(true), pid: 4, #pred: 1, succ: 12 
channel deps: 3 
event[14]: send: bool_source::S!(true), pid: 4, #pred: 1, succ: 13 
channel deps: 3 
event[15]: send: bool_source::S!(false), pid: 4, #pred: 1, succ: 14 
channel deps: 3 
event[16]: send: bool_source::S!(true), pid: 5, #pred: 1, succ: 16 
channel deps: 4 
event[17]: receive: bool_sink::B?(bool_sink::b), pid: 6, #pred: 1, succ: 17 
channel deps: 5 

