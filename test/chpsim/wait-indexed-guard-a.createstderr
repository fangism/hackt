
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	6	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	7	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	8	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	15	##ADDR##	apimvref	0	#HEAD#	#TAIL#	29
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	24	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	28	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	29	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	30	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	33	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	36	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	37	##ADDR##	CHPwait_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	nrelatex	0	#HEAD#	#TAIL#	22
	39	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	44	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	47	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	48	##ADDR##	nrelatex	0	#HEAD#	#TAIL#	21
	49	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	52	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	53	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	54	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	footprnt	0	#HEAD#	#TAIL#	566
	57	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	58	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	59	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	60	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	61	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	62	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	63	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	64	##ADDR##	CHPwait_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	66	##ADDR##	CHPdowhl	0	#HEAD#	#TAIL#	20
	67	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	68	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  1 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  0 definitions
  0 typedefs
  Parameters:
    x = pint<> x^1
  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    y = int<32> y
    z = int<32> z
}

top-level chp:
  concurrent: {
    sequential: {
      concurrent: {
        z := 0
        y := 0
      }
      concurrent: {
        sequential: {
          [x[z]!=0]
          y := 2
        }
        *[
          z<4 -> z := z+1
        ]
      }
    }
  }
footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  x = pint^1
    unrolled index-value pairs: {
      0 = 0
      1 = 0
      2 = 1
      3 = 0
    }
  y = int<32>^0 = y (1) 
  z = int<32>^0 = z (2) 
  Created state:
  int instance pool:
  1	y
  2	z
  bool instance pool:
  1	!GND
  2	!Vdd
  resolved concurrent actions:
    sequential: {
      concurrent: {
        z := 0
        y := 0
      }
      concurrent: {
        sequential: {
          [x[z]!=0]
          y := 2
        }
        *[
          z<4 -> z := z+1
        ]
      }
    }
  chp events: {
    event[0]: fork: , #pred: 1, succ: 7 8 
    event[1]: assign: y := 2, #pred: 1, succ: 9 
    event[2]: wait: [x[z]!=0], #pred: 1, succ: 1 
    event[3]: select: *[ z<4 -> ... ], #pred: 1, succ: 4 9 
    event[4]: assign: z := z+1, #pred: 1, succ: 3 
    event[5]: fork: , #pred: 1, succ: 2 3 
    event[6]: join: , #pred: 2, succ: 5 
    event[7]: assign: z := 0, #pred: 1, succ: 6 
    event[8]: assign: y := 0, #pred: 1, succ: 6 
    event[9]: join: , #pred: 2, succ: 
  }
}
