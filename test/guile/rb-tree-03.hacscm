#!hacguile -b
!#
;; "rb-tree-03.hacscm"
;; vi: ft=scheme
;;	$Id: rb-tree-03.hacscm,v 1.3 2010/04/06 00:02:57 fang Exp $
;; @haco@ empty.haco-c

(use-modules (hackt rb-tree))
(use-modules (hackt streams))
(use-modules (ice-9 streams))

(define int-map (make-rb-tree = <))
; int-map
(rb-tree/min-key int-map #f)
(rb-tree/min-value int-map #f)
(rb-tree/min-pair int-map)
(rb-tree/max-key int-map #f)
(rb-tree/max-value int-map #f)
(rb-tree/max-pair int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)

(define ints (enumerate-interval-stream 1 20))
(stream-for-each (lambda (x) (
   rb-tree/insert! int-map x (- 31 x)
 ))
 ints)

int-map ; same as converting to alist and displaying
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/min-key int-map #f)
(rb-tree/min-value int-map #f)
(rb-tree/min-pair int-map)

"delete-min!"
(rb-tree/delete-min! int-map #f)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/min-pair int-map)

"delete-min-value!"
(rb-tree/delete-min-value! int-map #f)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/min-pair int-map)

"delete-min-pair!"
(rb-tree/delete-min-pair! int-map)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/min-pair int-map)

"delete-max!"
(rb-tree/delete-max! int-map #f)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/max-pair int-map)

"delete-max-value!"
(rb-tree/delete-max-value! int-map #f)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/max-pair int-map)

"delete-max-pair!"
(rb-tree/delete-max-pair! int-map)
(rb-tree->alist int-map)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree/max-pair int-map)

"delete! 12"
(rb-tree/delete! int-map 12)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree->alist int-map)

"delete! 15"
(rb-tree/delete! int-map 15)
(rb-tree/height int-map)
(rb-tree/size int-map)
(rb-tree->alist int-map)

