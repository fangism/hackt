# "Make.test-net"
#	vi: ft=automake
#	$Id: Make.test-net,v 1.7 2011/03/29 04:34:39 fang Exp $
# This is just a portion of the Make.test-tail template included by
# Makefile.am's in the test/ directory subtree.  
# This depends on variables defined in Make.test-tail, and thus, 
# should not be included by itself.  

# optional variables:
# AM_HACKNET_FLAGS += applied to all hacknet invocations
#	e.g. -I $(srcdir)
AM_HACKNET_FLAGS = -I$(srcdir)
# to search for config files in source directory

# new: .hv for verilog targets
HACKNET_SUFFIXES = .spice .spice-diff .spice-fail .spice-fail-diff
HACKNET_SUFFIXES += .spice-expect .spice-hac
HACKNET_SUFFIXES += .hv .hv-diff .hv-fail .hv-fail-diff

HACKNET_TEST_SUFFIXES = .hacknettest .hacknetfailtest
HACKNET_TEST_SUFFIXES += .hvtest .hvfailtest

SUFFIXES += $(HACKNET_SUFFIXES) $(HACKNET_TEST_SUFFIXES)
BOGUS_SUFFIX_TARGETS += $(HACKNET_SUFFIXES)

HACKNET_CLEAN_IGNORE_PATTERNS = \
	"*.spice" \
	"*.spice-err" \
	"*.spice-diff" \
	"*.spice-fail" \
	"*.spice-fail-diff" \
	"*.spice-hac" \
	"*.hacknettest" \
	"*.hacknetfailtest"

HACVERILOG_CLEAN_IGNORE_PATTERNS = \
	"*.hv" \
	"*.hv-err" \
	"*.hv-diff" \
	"*.hv-fail" \
	"*.hv-fail-diff" \
	"*.hvtest" \
	"*.hvfailtest"

AUTO_IGNORE += $(HACKNET_CLEAN_IGNORE_PATTERNS)
AUTO_IGNORE += $(HACVERILOG_CLEAN_IGNORE_PATTERNS)

# also substitute $srcdir
EXTRACT_HACKNET_FLAGS_PIPE = $(GREP) "@hacknet-flags@" | $(HEAD) -n1 | \
	$(SED) -e 's/^.*@hacknet-flags@[ ]*//g'
#	-e 's|\$$srcdir|$(srcdir)|g'
# This last substitution was used to substitute "$srcdir" in flag variables, 
# but is no longer needed thanks to AM_HACKNET_FLAGS

# should really take some configure/test file for testing combinations
# of object files and netlist configuration options.
HACKNET_TEST_SCRIPT = \
	src="$(srcdir)/"`$(ECHO) $< | $(SED) 's|\.haco.*|.hac|'` && \
	hnflags=`$(CAT) $$src | $(EXTRACT_HACKNET_FLAGS_PIPE)` && \
	cmd="$(HACKNET_EXE) $(AM_HACKNET_FLAGS) $$hnflags $<" && \
	$(ECHO) "$$cmd > $@" && \
	$$cmd > $@ 2> $@-err

HACKNET_FAIL_TEST_SCRIPT = $(HACKNET_TEST_SCRIPT)

# always add -f output_format=verilog
HACVERILOG_TEST_SCRIPT = $(HACKNET_TEST_SCRIPT)

HACVERILOG_FAIL_TEST_SCRIPT = $(HACVERILOG_TEST_SCRIPT)

.haco-c.spice:
	@$(HACKNET_TEST_SCRIPT) && \
	{ test ! -s $@-err || \
	  { $(ECHO) "* --- WARNINGS ---" ; $(CAT) $@-err ;} | $(TEE) -a $@ ;}

.haco-c.spice-fail:
	-@$(HACKNET_FAIL_TEST_SCRIPT) ; \
	stat=$$? ; \
	$(MV) $@-err $@ ; \
	$(CAT) $@ ; \
	exit $$stat

.haco-c.hv:
	@$(HACVERILOG_TEST_SCRIPT) && \
	{ test ! -s $@-err || \
	  { $(ECHO) "* --- WARNINGS ---" ; $(CAT) $@-err ;} | $(TEE) -a $@ ;}

.haco-c.hv-fail:
	-@$(HACVERILOG_FAIL_TEST_SCRIPT) ; \
	stat=$$? ; \
	$(MV) $@-err $@ ; \
	$(CAT) $@ ; \
	exit $$stat

# spice to hac conversion
SPICE_TO_HAC = $(AWK) -f $(top_srcdir)/lib/scripts/spice-to-hac.awk
.spice-expect.spice-hac:
	$(SPICE_TO_HAC) $< > $@
.spice.spice-hac:
	$(SPICE_TO_HAC) $< > $@

# for now: use .hac -> .spice
# TODO: worry about .hacknetconf files later...
# eventually re-use single hac source with multiple configurations
# and technology files.  
# idea: map .hac to .spice using default options
# and map .hacknetconf to .spice using non-default options
# requiring specification of hac object file
# for now, use only HACKNET_TEST_SCRIPTS_PASSES/FAILURES
# later, use HACKNET_TEST_SUBJECTS for .hac -> .spice

# this reuses the same dependency for checkpoints
# beware of race between -O0 and -O1 tests that produce the same files!
hacknet.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	{ list='$(HACKNET_TEST_SCRIPTS_BASES)' ; \
	exts='spice spice-fail' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.hac ; \
	  obj=`$(EXTRACT_HACO_PIPE) < "$$src"` ; \
	  deps=`$(EXTRACT_DEPS_PIPE) < "$$src"` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$obj $$deps" ; \
	done ;} > $@ ; \
	$(TOUCH) $@

-include hacknet.autodepend

hacverilog.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	{ list='$(HACVERILOG_TEST_SCRIPTS_BASES)' ; \
	exts='hv hv-fail' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.hac ; \
	  obj=`$(CAT) "$$src" | $(EXTRACT_HACO_PIPE)` ; \
	  deps=`$(CAT) "$$src" | $(EXTRACT_DEPS_PIPE)` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$obj $$deps" ; \
	done ;} > $@ ; \
	$(TOUCH) $@

-include hacverilog.autodepend

HACKNET_TEST_DIFF = $(DIFF) -bu

if VERBOSE_CHECK
ECHO_HACKNET_DIFF_COMMAND = $(ECHO) "$(HACKNET_TEST_DIFF) $$expect $<"
else
ECHO_HACKNET_DIFF_COMMAND = :
endif

HACKNET_COMMON_DIFF_SCRIPT = \
	expect=$(srcdir)/$$stderr ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_HACKNET_DIFF_COMMAND) ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.spice.spice-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.spice-diff$$/.spice-expect/g'` ; \
	$(HACKNET_COMMON_DIFF_SCRIPT)

.spice-fail.spice-fail-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.spice-fail-diff$$/.spice-expect/g'` ; \
	$(HACKNET_COMMON_DIFF_SCRIPT)

.hv.hv-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.hv-diff$$/.hv-expect/g'` ; \
	$(HACKNET_COMMON_DIFF_SCRIPT)

.hv-fail.hv-fail-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.hv-fail-diff$$/.hv-expect/g'` ; \
	$(HACKNET_COMMON_DIFF_SCRIPT)

.spice-diff.hacknettest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.spice-fail-diff.hacknetfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hv-diff.hvtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hv-fail-diff.hvfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacknettest:
	@$(DUMMY_TEST_SCRIPT)

.hacknetfailtest:
	@$(DUMMY_TEST_SCRIPT)

.hvtest:
	@$(DUMMY_TEST_SCRIPT)

.hvfailtest:
	@$(DUMMY_TEST_SCRIPT)

# for both passes and failures
hacknettest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(ECHO) "$(HACKNET_TEST_SCRIPTS_PASSES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".spice-diff: $$(srcdir)/" $$1 ".spice-expect"; }' > $@ ; \
	$(TOUCH) $@

hacknetfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(ECHO) "$(HACKNET_TEST_SCRIPTS_FAILURES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".spice-fail-diff: $$(srcdir)/" $$1 ".spice-expect"; }' > $@ ; \
	$(TOUCH) $@

-include hacknettest.autodepend
-include hacknetfailtest.autodepend

hvtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(ECHO) "$(HACVERILOG_TEST_SCRIPTS_PASSES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".hv-diff: $$(srcdir)/" $$1 ".hv-expect"; }' > $@ ; \
	$(TOUCH) $@

hvfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(ECHO) "$(HACVERILOG_TEST_SCRIPTS_FAILURES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".hv-fail-diff: $$(srcdir)/" $$1 ".hv-expect"; }' > $@ ; \
	$(TOUCH) $@

-include hvtest.autodepend
-include hvfailtest.autodepend

AUTO_DEPENDS += \
	hacknet.autodepend \
	hacknettest.autodepend \
	hacknetfailtest.autodepend \
	hacverilog.autodepend \
	hvtest.autodepend \
	hvfailtest.autodepend

BOGUS_TESTS += \
	.hacknettest .hacknetfailtest \
	.hvtest .hvfailtest

CHECK_SUMMARIES += hacknetdiffs hacknetfaildiffs \
	hvdiffs hvfaildiffs

hacknetdiffs: force
	-$(CAT) *.spice-diff > $@

hacknetfaildiffs: force
	-$(CAT) *.spice-fail-diff > $@

hvdiffs: force
	-$(CAT) *.hv-diff > $@

hvfaildiffs: force
	-$(CAT) *.hv-fail-diff > $@

HACKNET_TEST_SCRIPTS_BASES = \
	$(HACKNET_TEST_SCRIPTS_PASSES) \
	$(HACKNET_TEST_SCRIPTS_FAILURES)

HACVERILOG_TEST_SCRIPTS_BASES = \
	$(HACVERILOG_TEST_SCRIPTS_PASSES) \
	$(HACVERILOG_TEST_SCRIPTS_FAILURES)

srcdir_EXTRA_DIST += \
	$(HACKNET_TEST_SCRIPTS_BASES:=.hac) \
	$(HACKNET_TEST_SCRIPTS_BASES:=.spice-expect) \
	$(HACVERILOG_TEST_SCRIPTS_BASES:=.hac) \
	$(HACVERILOG_TEST_SCRIPTS_BASES:=.hv-expect)

if CHECK_TESTS
TESTS += \
	$(HACKNET_TEST_SCRIPTS_PASSES:=.hacknettest) \
	$(HACKNET_TEST_SCRIPTS_FAILURES:=.hacknetfailtest) \
	$(HACVERILOG_TEST_SCRIPTS_PASSES:=.hvtest) \
	$(HACVERILOG_TEST_SCRIPTS_FAILURES:=.hvfailtest)
endif

HAC_COMPILE_OBJECT_TARGETS += $(HACKNET_TEST_SCRIPTS_BASES:=.haco)
HAC_CREATE_OBJECT_TARGETS += $(HACKNET_TEST_SCRIPTS_BASES:=.haco-c)
# HAC_ALLOC_OBJECT_TARGETS += $(HACKNET_TEST_SCRIPTS_BASES:=.haco-a)

HACKNET_PRODUCTS = \
	$(HACKNET_TEST_SCRIPTS_PASSES:=.spice) \
	$(HACKNET_TEST_SCRIPTS_FAILURES:=.spice-fail) \
	$(HACVERILOG_TEST_SCRIPTS_PASSES:=.hv) \
	$(HACVERILOG_TEST_SCRIPTS_FAILURES:=.hv-fail)

$(HACKNET_PRODUCTS): $(HACKNET_EXE)

build-check-local: \
	$(HACKNET_TEST_SUBJECTS:=.haco-c) \
	$(HACKNET_TEST_SCRIPTS_PASSES:=.spice) \
	$(HACKNET_TEST_SCRIPTS_PASSES:=.spice-diff) \
	$(HACKNET_TEST_SCRIPTS_FAILURES:=.spice-fail) \
	$(HACKNET_TEST_SCRIPTS_FAILURES:=.spice-fail-diff) \
	$(HACVERILOG_TEST_SCRIPTS_PASSES:=.hv) \
	$(HACVERILOG_TEST_SCRIPTS_PASSES:=.hv-diff) \
	$(HACVERILOG_TEST_SCRIPTS_FAILURES:=.hv-fail) \
	$(HACVERILOG_TEST_SCRIPTS_FAILURES:=.hv-fail-diff)

echo-hacknet-passes: force
	@$(ECHO) $(HACKNET_TEST_SCRIPTS_PASSES)

echo-hacknet-failures: force
	@$(ECHO) $(HACKNET_TEST_SCRIPTS_FAILURES)

echo-hacknet-tests: force
	@$(ECHO) $(HACKNET_TEST_SCRIPTS_BASES)

echo-hacverilog-passes: force
	@$(ECHO) $(HACVERILOG_TEST_SCRIPTS_PASSES)

echo-hacverilog-failures: force
	@$(ECHO) $(HACVERILOG_TEST_SCRIPTS_FAILURES)

echo-hacverilog-tests: force
	@$(ECHO) $(HACVERILOG_TEST_SCRIPTS_BASES)

clean-hacknettests:
	patternlist='$(HACKNET_CLEAN_IGNORE_PATTERNS)' ; \
	for p in $$patternlist ; do \
	  pp=`$(ECHO) $$p | $(SED) 's/"//g'` ; \
	  $(RM_PATTERN) "$$pp" ; \
	done

clean-hacverilogtests:
	patternlist='$(HACVERILOG_CLEAN_IGNORE_PATTERNS)' ; \
	for p in $$patternlist ; do \
	  pp=`$(ECHO) $$p | $(SED) 's/"//g'` ; \
	  $(RM_PATTERN) "$$pp" ; \
	done

clean-local: clean-hacknettests clean-hacverilogtests

.PHONY: clean-hacknettests clean-hacverilogtests

