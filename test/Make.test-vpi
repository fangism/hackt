# "Make.test-vpi"
#	vi: ft=automake
#	$Id: Make.test-vpi,v 1.14 2009/11/19 23:29:13 fang Exp $
# This is just a portion of the Make.test-tail template included by
# Makefile.am's in the test/ directory subtree.  
# This depends on variables defined in Make.test-tail, and thus, 
# should not be included by itself.  

# known VCS issues:
# C-2009.06's vcs-generated Makefile does not properly
#	declare SUFFIXES and relies on implicit rules (fails with make -r)

HACKT_VPI_SUFFIXES = .v .vx .vxi .vx-out .vxi-out .vx-out-filter .vx-diff \
	.v-wrap .v-wrap-diff

HACKT_VPI_TEST_SUFFIXES = .vpitest .vwraptest
SUFFIXES += $(HACKT_VPI_SUFFIXES) $(HACKT_VPI_TEST_SUFFIXES)
BOGUS_SUFFIX_TARGETS += $(HACKT_VPI_SUFFIXES)

HACKT_VPI_CLEAN_IGNORE_PATTERNS = \
	"*.vx" \
	"*.vx-compile-log" \
	"*-compile-log" \
	"*.vxi-compile-log" \
	"*.v-wrap" \
	"*.v-wrap-diff" \
	"*.vxi" \
	"*.vx-out" \
	"*.vxi-out" \
	"*.vx-out-filter" \
	"*.vx-diff" \
	"*.vpitest" \
	"*.vwraptest" \
	"*.csrc" \
	"*.daidir"

VPI_PRSIM_MODULE = $(top_builddir)/src/vpihacprsim.la
WRAP_VERILOG_AWK_SCRIPT = $(top_srcdir)/lib/verilog/wrap_verilog_modules_to_hacprsim.awk
AUTO_WRAP_VERILOG_AWK = $(AWK) -f $(WRAP_VERILOG_AWK_SCRIPT)
VCS_SCANDEPEND = $(top_srcdir)/lib/verilog/vcs_scandepend.sh

AUTO_IGNORE += $(HACKT_VPI_CLEAN_IGNORE_PATTERNS)
AUTO_IGNORE += .vcsmx_rebuild
DISTCLEANFILES += .vcsmx_rebuild
CLEANFILES += ucli.key

VCS_OUTPUT_FILTER = \
	{ $(SED) -n '/^[$$]start of simulation/,/^[$$]finish at simulation/p' | \
	$(GREP) -v "\$$finish called from file" ;}
# format may change slightly between versions
# initial version tested was Y-2006.06
# added grep for version C-2009-06

# where vpihacprim.la is built
VPI_LIB_PATH = $(top_builddir)/src
# where vpihacprsim.{la,so} are installed
INSTALLCHECK_VPI_LIB_PATH = $(pkglibdir)

COMMON_VCS_FLAGS = +cli+3 -Mupdate +v2k +vcsace+diff+ok
# wait for license if none available, damn commercial tools
COMMON_VCS_FLAGS += +vcs+lic+wait
# requires env. LM_LICENSE_FILE
if ABI_ILP64
COMMON_VCS_FLAGS += -full64
endif

AM_VCS_VPI_FLAGS = +vpi \
	-use_vpiobj $(VPI_LIB_PATH)/$(LT_OBJDIR)/vpihacprsim$(LT_MODULE_EXT) \
	-LDFLAGS="-L$(VPI_LIB_PATH)/$(LT_OBJDIR)" 
# log compiles, and scan for dependencies
AM_VCS_FLAGS = +incdir+$(srcdir) $(COMMON_VCS_FLAGS) -l $@-compile-log -Mdir=$@.csrc
AM_PLI_FLAGS =

# for install-time tests, use installed library, not the built one
INSTALLCHECK_VCS_VPI_FLAGS = +vpi \
	-use_vpiobj $(INSTALLCHECK_VPI_LIB_PATH)/vpihacprsim$(LT_MODULE_EXT) \
	-LDFLAGS="-L$(INSTALLCHECK_VPI_LIB_PATH)" 
# lazy: for now, use the .. dir instead of +incdir+$(examplesdir)/...
# because compilation is done in a temporary subdirectory
# the generated Makefiles have a variable named $(VSRC) that could be used...
INSTALLCHECK_VCS_FLAGS = +incdir+$(srcdir) $(COMMON_VCS_FLAGS) -l $$@-compile-log -Mdir=$$@.csrc
INSTALLCHECK_PLI_FLAGS =

EXTRACT_VCS_FLAGS_PIPE = { $(GREP) "@vcs-flags@" | \
        $(SED) 's/^.*@vcs-flags@[ ]*//g' ;}
EXTRACT_PLUSARGS_PIPE = { $(GREP) "@plusargs@" | \
        $(SED) 's/^.*@plusargs@[ ]*//g' ;}

# create simulation executable
# '+' connects child make (vcs) to parent's jobserver
# touch b/c incremental compilation doesn't always updated timestamp
.v.vx:
if HAVE_VCS
	+vflags=`$(EXTRACT_VCS_FLAGS_PIPE) < $<` && \
	$(VCS_ENV) $(VCS) $(AM_VCS_FLAGS) $(AM_VCS_VPI_FLAGS) $(AM_PLI_FLAGS) \
		$$vflags -o $@ $< && \
	{ $(PRINTF) "$@ : " ; \
		$(VCS_SCANDEPEND) < $@-compile-log ;} > $@-depend && \
	$(TOUCH) $@
else
	@$(ECHO) "VPI not explicitly enabled during configure."
endif

verilog.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
        $(ECHO) "$(ALL_VERILOG_TARGETS)" | $(SPACES_TO_NEWLINE) | $(SORT) -u | \
                $(AWK) '/.+/ {print "-include " $$1 "-depend"; }' > $@ ; \
        $(TOUCH) $@

-include verilog.autodepend
AUTO_DEPENDS += verilog.autodepend
distclean-depend-local: distclean-depend-verilog
distclean-depend-verilog:
	-$(RM_PATTERN) "*.vx-depend"

.PHONY: distclean-depend-verilog

EXTRACT_VERILOG_WRAP_FLAGS_PIPE = { $(GREP) "@verilog-wrap-flags@" | \
        $(SED) 's/^.*@verilog-wrap-flags@[ ]*//g' ;}

.v.v-wrap:
	@vwflags=`$(EXTRACT_VERILOG_WRAP_FLAGS_PIPE) < $<` && \
	$(SED_srcdir_strip_setup) && \
	src=`$(ECHO) $< | $(SED_srcdir_strip_fast)` && \
	cmd="$(AUTO_WRAP_VERILOG_AWK) $$vwflags $<" && \
	$(ECHO) "$$cmd > $@" && \
	{ $(ECHO) "\`include \"$$src\"" ; $(ECHO) "" ; \
		$$cmd ;} > $@

.v-wrap.v-wrap-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.v-wrap-diff$$/.v-wrap-expect/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

# not bothering with .v-wrap diff dependencies...
.v-wrap-diff.vwraptest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

vwraptest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	{ list='$(HACKT_VWRAP_TEST_SCRIPTS_PASSES)' ; \
	exts='v-wrap' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.v ; \
	  deps="" ; \
	  test ! -f $$src || \
	    deps=`$(EXTRACT_DEPS_PIPE) < "$$src"` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$deps" ; \
	done ; \
	$(ECHO) "$(HACKT_VWRAP_TEST_SCRIPTS_PASSES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".v-wrap-diff: $$(srcdir)/" $$1 ".v-wrap-expect"; }'; \
	} > $@ ; \
	$(TOUCH) $@

-include vwraptest.autodepend

AUTO_DEPENDS += vwraptest.autodepend

# post-install tests!
.v.vxi:
if HAVE_VCS
	+$(VCS_ENV) $(VCS) $(INSTALLCHECK_VCS_FLAGS) \
		$(INSTALLCHECK_VCS_VPI_FLAGS) $(INSTALLCHECK_PLI_FLAGS) -o $@ $<
else
	@$(ECHO) "VPI not explicitly enabled during configure."
endif

# setup run-time link path for build testing
VPI_TEST_ENV = \
	$(LIBTOOL_EXEC) -dlopen $(VPI_LIB_PATH)/vpihacprsim.la
#	$(LT_MODULE_PATH_VAR)=$(VPI_LIB_PATH)/$(LT_OBJDIR)$(PATH_SEPARATOR)$$$(LT_MODULE_PATH_VAR)

# installcheck environment
VPI_INSTALLCHECK_ENV = \
	$(LT_MODULE_PATH_VAR)=$(INSTALLCHECK_VPI_LIB_PATH)$(PATH_SEPARATOR)$$$(LT_MODULE_PATH_VAR)
#	$(LIBTOOL_EXEC) -dlopen $(INSTALLCHECK_VPI_LIB_PATH)/vpihacprsim.la

# SHOW_VPI_TEST_ENV = $(LT_MODULE_PATH_VAR)=$(VPI_LIB_PATH)/$(LT_OBJDIR)$(PATH_SEPARATOR)$$"$(LT_MODULE_PATH_VAR)"

.vx.vx-out:
if HAVE_VCS
	-srcbase=`echo $< | sed 's|\.vx$$|.v|'` && \
	srcfile="$(srcdir)/$$srcbase" && \
	pflags=`$(EXTRACT_PLUSARGS_PIPE) < $$srcfile` && \
	$(VPI_TEST_ENV) ./$< $$pflags > $@ 2>&1
else
	@$(ECHO) "VCS/VPI was not explicitly configured, so skipping." > $@
endif

.vxi.vxi-out:
	$(VPI_INSTALLCHECK_ENV) ./$< > $@ 2>&1

.vx-out.vx-out-filter:
	$(VCS_OUTPUT_FILTER) < $< > $@ ; \
	$(TOUCH) $@
#	$(GREP) "observed" $< > $@ || $(TOUCH) $@
#	$(CP) $< $@

if VERBOSE_CHECK
ECHO_VPI_DIFF_COMMAND = $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<"
else
ECHO_VPI_DIFF_COMMAND = :
endif

.vx-out-filter.vx-diff:
if HAVE_VCS
	@stderr=`$(ECHO) $@ | $(SED) 's/\.vx-diff$$/.expect-vpi/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_VPI_DIFF_COMMAND) ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@
else
	@$(CP) $< $@
endif

.vx-diff.vpitest:
if HAVE_VCS
	@$(DEFAULT_DIFF_TEST_SCRIPT)
else
	@$(SKIP_TEST_SCRIPT)
endif

vpitest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	{ list='$(HACKT_VPI_TEST_SCRIPTS_PASSES)' ; \
	exts='vx-out' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.v ; \
	  obj=`$(EXTRACT_HACO_PIPE) < "$$src"` ; \
	  deps=`$(EXTRACT_DEPS_PIPE) < "$$src"` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$obj $$deps" ; \
	done ; \
	$(ECHO) "$(HACKT_VPI_TEST_SCRIPTS_BASES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".vx-diff: $$(srcdir)/" $$1 ".expect-vpi"; }'; \
	} > $@ ; \
	$(TOUCH) $@

-include vpitest.autodepend

AUTO_DEPENDS += vpitest.autodepend

BOGUS_TESTS += .vpitest .vwraptest

CHECK_SUMMARIES += vpidiffs


vpidiffs: force
	-$(CAT) *.vx-diff > $@


HACKT_VPI_TEST_SCRIPTS_BASES = \
	$(HACKT_VPI_TEST_SCRIPTS_PASSES) \
	$(HACKT_VPI_TEST_SCRIPTS_FAILURES)

srcdir_EXTRA_DIST += \
	$(HACKT_VWRAP_TEST_SCRIPTS_PASSES:=.v) \
	$(HACKT_VWRAP_TEST_SCRIPTS_PASSES:=.v-wrap-expect) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.v) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.expect-vpi)


if CHECK_TESTS
TESTS += $(HACKT_VPI_TEST_SCRIPTS_PASSES:=.vpitest) \
	$(HACKT_VWRAP_TEST_SCRIPTS_PASSES:=.vwraptest)
endif

VWRAP_OUTPUTS = $(HACKT_VWRAP_TEST_SCRIPTS_PASSES:=.v-wrap)
$(VWRAP_OUTPUTS): $(WRAP_VERILOG_AWK_SCRIPT)

VPI_SIM_EXECUTABLES = $(HACKT_VPI_TEST_SCRIPTS_PASSES:=.vx)
ALL_VERILOG_TARGETS = $(VPI_SIM_EXECUTABLES)
if HAVE_VCS
# executables depend on the plugin module
$(VPI_SIM_EXECUTABLES): $(VPI_PRSIM_MODULE)
endif

VPI_TARGETS =
if HAVE_VCS
VPI_TARGETS += \
	$(HACKT_VPI_TEST_SCRIPTS_PASSES:=.vx-out) \
	$(HACKT_VPI_TEST_SCRIPTS_PASSES:=.vx-out-filter) \
	$(HACKT_VPI_TEST_SCRIPTS_PASSES:=.vx-diff)
endif

VWRAP_TARGETS = $(HACKT_VWRAP_TEST_SCRIPTS_PASSES:=.v-wrap-diff)

build-check-local: $(VPI_TARGETS) $(VWRAP_TARGETS)

echo-vpi-tests: force
	@$(ECHO) $(HACKT_VPI_TEST_SCRIPTS_BASES)

clean-vpitests:
	patternlist='$(HACKT_VPI_CLEAN_IGNORE_PATTERNS)' ; \
	for p in $$patternlist ; do \
	  pp=`$(ECHO) $$p | $(SED) 's/"//g'` ; \
	  $(RM_PATTERN) "$$pp" ; \
	done

# 'csrc' is the temporary directory used in VCS compilation
CLEANDIRS += csrc .csrc \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.csrc) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.vx.csrc) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.vxi.csrc) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.vx.daidir) \
	$(HACKT_VPI_TEST_SCRIPTS_BASES:=.vxi.daidir)

clean-local: clean-vpitests

.PHONY: clean-vpitests

