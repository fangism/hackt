# "Make.test-chpsim"
#	vi: ft=automake
#	$Id: Make.test-chpsim,v 1.30 2010/09/21 00:18:44 fang Exp $
# This is just a portion of the Make.test-tail template included by
# Makefile.am's in the test/ directory subtree.  
# This depends on variables defined in Make.test-tail, and thus, 
# should not be included by itself.  

AM_HACCHPSIM_FLAGS = -I$(srcdir)

CHPSIM_ALLOC_DUMP = $(HACKT_CHPSIM_RAW_EXE) -fno-run -fdump-graph-alloc
CHPSIM_GRAPH_DOT = $(HACKT_CHPSIM_RAW_EXE) -fno-run -fdump-dot-struct -fcluster-processes -fshow-channels
# -fshow-instances

CHPSIMCKPT_TEMPLATE_SCRIPT = $(TEST_SRCDIR)/chpsimckpt-template.chpsimrc
CHPSIMCKPT_LOAD_TEMPLATE_SCRIPT = $(TEST_SRCDIR)/chpsimckpt-load-template.chpsimrc

# pipe for extracting dlopen modules and paths from chpsimrc script
# these arguments are passed to chpsim
EXTRACT_CHPSIM_MODULES_PIPE = { $(GREP) "@module@" | \
	$(SED) 's/^.*@module@//g' | \
	$(BUILDDIR_SUBST) ;}
EXTRACT_HACCHPSIM_FLAGS_PIPE = { $(GREP) "@hacchpsim-flags@" | \
	$(HEAD) -n1 | \
	$(SED) 's/^.*@hacchpsim-flags@[ ]*//g' ;}


HACKT_CHPSIM_SUFFIXES = \
	.chpsimrc .chpsimrc-out \
	.chpsimrc-out-filter .chpsimrc-diff \
	.chpsimallocdump .chpsimallocdiff \
	.chpsim-event-dot .chpsim-event-fig \
	.chpsim-event-ps .chpsim-event-pdf \
	.chpsimrcfail-out .chpsimrcfail-diff \
	.chpsimckpt .chpsimckpt-outdump .chpsimckpt-indump \
	.chpsimckpt-dupe .chpsimckpt-dupe-dump \
	.chpsimckpt-diff \
	.chpsimtrace
HACKT_CHPSIM_TEST_SUFFIXES = \
	.chpsimtest .chpsimfailtest \
	.chpsimalloctest .chpsimdottest .chpsimckpttest
SUFFIXES += $(HACKT_CHPSIM_SUFFIXES) $(HACKT_CHPSIM_TEST_SUFFIXES)
BOGUS_SUFFIX_TARGETS += $(HACKT_CHPSIM_SUFFIXES)

HACKT_CHPSIM_CLEAN_IGNORE_PATTERNS = \
	"*.chpsimallocdump" \
	"*.chpsimallocdiff" \
	"*.chpsimalloctest" \
	"*.chpsim-event-dot" \
	"*.chpsim-event-ps" \
	"*.chpsimdottest" \
	"*.chpsimrc-out" \
	"*.chpsimrc-out-filter" \
	"*.chpsimrc-out-filter-nosize" \
	"*.chpsimrc-diff" \
	"*.chpsimrc-diff-orig" \
	"*.chpsimrc-diff-nosize" \
	"*.chpsimrc-expect-nosize" \
	"*.chpsimtest" \
	"*.chpsimrcfail-out" \
	"*.chpsimrcfail-diff" \
	"*.chpsimfailtest" \
	"*.chpsimckpt" \
	"*.chpsimckpt-outdump" \
	"*.chpsimckpt-dupe" \
	"*.chpsimckpt-dupe-dump" \
	"*.chpsimckpt-indump" \
	"*.chpsimckpt-diff" \
	"*.chpsimckpttest" \
	"*.chpsimtrace"

AUTO_IGNORE += $(HACKT_CHPSIM_CLEAN_IGNORE_PATTERNS)

.haco-c.chpsimallocdump:
	$(CHPSIM_ALLOC_DUMP) $< > $@

.haco-c.chpsim-event-dot:
	@$(ECHO) "$(CHPSIM_GRAPH_DOT) $< > $@" ; \
	if $(CHPSIM_GRAPH_DOT) $< > $@.tmp ; then $(MV) $@.tmp $@ ; \
	else $(RM) $@.tmp ; exit 1 ; \
	fi

# .chpsim-event-{dot,fig,ps,pdf} rules in Make.test-graph

if VERBOSE_CHECK
ECHO_CHPSIM_ALLOC_DIFF_COMMAND = $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<"
else
ECHO_CHPSIM_ALLOC_DIFF_COMMAND = :
endif

.chpsimallocdump.chpsimallocdiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.chpsimallocdiff$$/.expect-chpsimalloc/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_CHPSIM_ALLOC_DIFF_COMMAND) ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.chpsimallocdiff.chpsimalloctest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.chpsimalloctest:
	@$(DUMMY_TEST_SCRIPT)

chpsimalloctest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".chpsimallocdiff: $$(srcdir)/" $$1 ".expect-chpsimalloc"; }' > $@ ; \
	$(TOUCH) $@

-include chpsimalloctest.autodepend
AUTO_DEPENDS += chpsimalloctest.autodepend

# chpsim event graph tests
.chpsim-event-dot.chpsimdottest:
	@$(DUMMY_TEST_SCRIPT)

.chpsimdottest:
	@$(DUMMY_TEST_SCRIPT)

# no additional dependencies for chpsimdottest needed

# NOTE: EXTRACT_HACO_PIPE is defined in "Make.test-prsim"
# TODO: extract additional command-line flags from the source script
#	maybe using @chpsim-flags@ as a match pattern
# We privide a hook to disable automatic tracing:
#	CHPSIMRC_AUTOTRACE_DISABLE_HOOK = autotrace=0;
# for extracting libs to pre-dlopen, use @deps@ instead of @modules@
# because @deps@ references by path.  seems to be needed on darwin10
CHPSIMRC_TEST_SCRIPT = \
	obj=`$(EXTRACT_HACO_PIPE) < $<` && \
	mods=`$(EXTRACT_CHPSIM_MODULES_PIPE) < $<` && \
	deps=`$(EXTRACT_DEPS_PIPE) < $<` && \
	flags=`$(EXTRACT_HACCHPSIM_FLAGS_PIPE) < $<` && \
	ckpt=`$(ECHO) $@ | $(SED) 's/\.chpsim.*$$/.chpsimckpt/g'` && \
	trace=`$(ECHO) $@ | $(SED) 's/\.chpsim.*$$/.chpsimtrace/g'` && \
	$(RM) $$ckpt $$trace && \
	$(EXTRACT_DLOPEN_EXTRA_SCRIPT) && \
	autotrace=1 && \
	$(CHPSIMRC_AUTOTRACE_DISABLE_HOOK) \
	if test "$$autotrace" = 1 ; then traceflag="-r $$trace" ; fi ; \
	cmd="$(HACKT_CHPSIM_EXE) -b $(AM_HACCHPSIM_FLAGS) -a $$ckpt $$traceflag $$flags $$mods $$obj" && \
	$(ECHO) "ckpt: $$cmd < $<" && \
	$(SED) 's|SOURCE|$<|g' $(CHPSIMCKPT_TEMPLATE_SCRIPT) | \
	  $$cmd > $@ 2>&1 && \
	test -f $$ckpt || $(ECHO) "Warning: $$ckpt not produced." ; \
	test "$$autotrace" = 0 || \
	  test -f $$trace || $(ECHO) "Warning: $$trace not produced." ; \
	$(TOUCH) $@

# the same until we add checkpointing to the pass test
CHPSIMRC_FAIL_TEST_SCRIPT = \
	obj=`$(EXTRACT_HACO_PIPE) < $<` && \
	mods=`$(EXTRACT_CHPSIM_MODULES_PIPE) < $<` && \
	deps=`$(EXTRACT_DEPS_PIPE) < $<` && \
	flags=`$(EXTRACT_HACCHPSIM_FLAGS_PIPE) < $<` && \
	$(EXTRACT_DLOPEN_EXTRA_SCRIPT) && \
	cmd="$(HACKT_CHPSIM_EXE) -b $(AM_HACCHPSIM_FLAGS) $$flags $$mods $$obj" && \
	$(ECHO) "$$cmd < $<" && \
	$$cmd < $< > $@ 2>&1

# without generating checkpoint
CHPSIMRC_NOCKPT_TEST_SCRIPT = \
	$(CHPSIMRC_FAIL_TEST_SCRIPT) && \
	$(TOUCH) $@

.chpsimrc.chpsimrc-out:
	@$(CHPSIMRC_TEST_SCRIPT)

.chpsimrc.chpsimrcfail-out:
	-@$(CHPSIMRC_FAIL_TEST_SCRIPT)

HACKT_CHPSIMRC_TEST_DIFF = $(DIFF) -bu

if VERBOSE_CHECK
ECHO_CHPSIMRC_DIFF_COMMAND = $(ECHO) "$(HACKT_CHPSIMRC_TEST_DIFF) $$expect $<"
else
ECHO_CHPSIMRC_DIFF_COMMAND = :
endif

# one option: always apply $(CHPSIM_TRACE_BINARY_FILTER)
CHPSIMRC_TEST_FILTER_SCRIPT = \
	$(SED) -e '/DELETE FROM HERE/d' -e '/DELETE TO HERE/,$$d' $< > $@
#	  $(AWK) '/BEGIN-RANDOM/,/END-RANDOM/{if($$1=="time:")print "time: \#TIME\#";else print;}' | \
#	  $(GREP) -v -e "-RANDOM" > $@

# automatically tracing expect-pass tests
.chpsimrc-out.chpsimtrace:
	@$(NO_OP_SCRIPT)

.chpsimrc-out.chpsimrc-out-filter:
	$(CHPSIMRC_TEST_FILTER_SCRIPT)

# additional heuristic checking for trivial differences
if ABI_ILP32
CHPSIM_TRACE_DUMP_FILTER_SCRIPT = :
else
CHPSIM_TRACE_DUMP_FILTER_SCRIPT = \
	$(ECHO) "Filtering out binary trace differences in $@ ..." ; \
	$(SET_PIPEFAIL) ; \
	filtered=`$(ECHO) $@ | $(SED) 's/\.chpsimrc-diff$$/.chpsimrc-expect-nosize/g'` ; \
	diffout=`$(ECHO) $@ | $(SED) 's/\.chpsimrc-diff$$/.chpsimrc-diff-nosize/g'` ; \
	$(CHPSIM_TRACE_BINARY_FILTER) < "$$expect" > "$$filtered" ; \
	$(CHPSIM_TRACE_BINARY_FILTER) < $< > $<-nosize ; \
	$(HACKT_CHPSIMRC_TEST_DIFF) "$$filtered" $<-nosize > "$$diffout" 2>&1 ; \
	if test -s "$$diffout" ; then \
	  $(ECHO) "Non-trace differences remain!" ; \
	else \
	  $(ECHO) "Binary trace differences resolved." ; \
	  $(MV) $@ $@-orig ; \
	  $(CP) "$$diffout" $@ ; \
	fi
endif

# TODO: introduce filtering scripts and differences
.chpsimrc-out-filter.chpsimrc-diff:
	@stderr=`$(ECHO) $@ |$(SED) 's/\.chpsimrc-diff$$/.chpsimrc-expect/g'`; \
	expect="$(srcdir)/$$stderr" ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_CHPSIMRC_DIFF_COMMAND) ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	    $(CHPSIM_TRACE_DUMP_FILTER_SCRIPT) ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.chpsimrcfail-out.chpsimrcfail-diff:
	@stderr=`$(ECHO) $@ |$(SED) 's/\.chpsimrcfail-diff$$/.chpsimrc-expect/g'`; \
	expect="$(srcdir)/$$stderr" ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_CHPSIMRC_DIFF_COMMAND) ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

# TODO: write rules for fail-tests

.chpsimrc-diff.chpsimtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.chpsimrcfail-diff.chpsimfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.chpsimtest:
	@$(DUMMY_TEST_SCRIPT)

.chpsimfailtest:
	@$(DUMMY_TEST_SCRIPT)

# as an automatic way of inferring trace file anti-dependencies...
# could also do this with checkpoints...
EXTRACT_CHPSIM_TRACE_DEP_PIPE = { $(GREP) "^trace " | $(CUT) -d\  -f2 ;}
EXTRACT_CHPSIM_TRACE_UNDEP_PIPE = { $(GREP) "^!rm" | $(CUT) -d\  -f2 ;}

chpsimrc-out.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	rlist='$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES)' ; \
	list='$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES)'" $$rlist" ; \
	exts='chpsimrc-out' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.chpsimrc ; \
	  obj=`$(EXTRACT_HACO_PIPE) < "$$src"` ; \
	  deps=`$(EXTRACT_DEPS_PIPE) < "$$src"` ; \
	  antideps=`$(EXTRACT_ANTIDEPS_PIPE) < "$$src"` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$obj $$deps" ; \
	  mktrc=`$(EXTRACT_CHPSIM_TRACE_DEP_PIPE) < $$src` ; \
	  if test "$$mktrc" ; then \
	    rmtrc=`$(EXTRACT_CHPSIM_TRACE_UNDEP_PIPE) < $$src` ; \
	    if test x"$$rmtrc" != x"$$mktrc" ; then \
	      $(ECHO) "$$mktrc: $$d.chpsimrc-out" ; \
	      $(ECHO) "	@test -f $$""@" ; \
	      $(ECHO) "CLEANFILES += $$mktrc" ; \
	      $(ECHO) "$$mktrc: $$""(HACKT_CHPSIM_EXE)" ; \
            fi ; \
	  fi ; \
	  if test "$$antideps" ; then \
	    $(ECHO) "$$antideps: $$d.chpsimrc-out" ; \
	    $(ECHO) "	@:" ; \
	    $(ECHO) "CLEANFILES += $$antideps" ; \
	    $(ECHO) "AUTO_IGNORE += $$antideps" ; \
	  fi ; \
	done > $@ ; \
	$(TOUCH) $@

-include chpsimrc-out.autodepend
AUTO_DEPENDS += chpsimrc-out.autodepend

chpsimrcfail-out.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(RM) $@ ; \
	rlist='$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES)' ; \
	list='$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES)'" $$rlist" ; \
	exts='chpsimrcfail-out' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.chpsimrc ; \
	  obj=`$(EXTRACT_HACO_PIPE) < "$$src"` ; \
	  deps=`$(EXTRACT_DEPS_PIPE) < "$$src"` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(PRINTF) "$$target " ; \
	  done ; \
	  $(ECHO) ": $$obj $$deps" ; \
	done > $@ ; \
	$(TOUCH) $@

-include chpsimrcfail-out.autodepend
AUTO_DEPENDS += chpsimrcfail-out.autodepend

chpsimrctest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	{ $(ECHO) "$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES)" ; \
	  $(ECHO) "$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES)" ;} | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".chpsimrc-diff: $$(srcdir)/" $$1 ".chpsimrc-expect"; }' > $@ ; \
	$(TOUCH) $@

-include chpsimrctest.autodepend
AUTO_DEPENDS += chpsimrctest.autodepend


chpsimrcfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	{ $(ECHO) "$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES)" ; \
	  $(ECHO) "$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES)" ;} | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".chpsimrcfail-diff: $$(srcdir)/" $$1 ".chpsimrc-expect"; }' > $@ ; \
	$(TOUCH) $@

-include chpsimrcfailtest.autodepend
AUTO_DEPENDS += chpsimrcfailtest.autodepend

# checkpoint is simultaneously generated
.chpsimrc-out.chpsimckpt:
	@$(NO_OP_SCRIPT)

.chpsimrc-out.chpsimckpt-outdump:
	@$(SED) '/DELETE FROM HERE/,/DELETE TO HERE/d' $< > $@

.chpsimckpt.chpsimckpt-indump:
	@$(SET_PIPEFAIL) ; \
	rc=$(srcdir)/`$(ECHO) $< | $(SED) 's/\.chpsimckpt$$/.chpsimrc/g'` ; \
	obj=`$(EXTRACT_HACO_PIPE) < "$$rc"` ; \
	mods=`$(EXTRACT_CHPSIM_MODULES_PIPE) < "$$rc"` ; \
	deps=`$(EXTRACT_DEPS_PIPE) < "$$rc"` ; \
	flags=`$(EXTRACT_HACCHPSIM_FLAGS_PIPE) < "$$rc"` ; \
	ckpt=`$(ECHO) $@ | $(SED) 's/-indump$$/-dupe/g'` ; \
	$(EXTRACT_DLOPEN_EXTRA_SCRIPT) ; \
	cmd="$(HACKT_CHPSIM_EXE) -b $(AM_HACCHPSIM_FLAGS) $$flags $$mods $$obj" ; \
	$(ECHO) "load: $$cmd" ; \
	$(CAT) $(CHPSIMCKPT_LOAD_TEMPLATE_SCRIPT) | \
	  $(SED) -e 's|LOAD|$<|g' -e 's|SAVE|'"$$ckpt"'|g' | \
	  $$cmd > $@ 2>&1

# simultaneously generated
.chpsimckpt-indump.chpsimckpt-dupe:
	@$(NO_OP_SCRIPT)

# this one needs the object file attached
# Doesn't really need TEST_ENV because no libraries are loaded.
.chpsimckpt-dupe.chpsimckpt-dupe-dump:
	@rc=$(srcdir)/`$(ECHO) $< | $(SED) 's/\.chpsimckpt-dupe$$/.chpsimrc/g'` ; \
	obj=`$(EXTRACT_HACO_PIPE) < "$$rc"` ; \
	flags=`$(EXTRACT_HACCHPSIM_FLAGS_PIPE) < "$$rc"` ; \
	{ $(ECHO) "load $<" ; $(ECHO) "dump-state" ;} | \
	  $(HACKT_CHPSIM_RAW_EXE) -b $$flags $< > $@


if VERBOSE_CHECK
ECHO_CHPSIMCKPT_DIFF_COMMAND = $(ECHO) "$(DIFF) -u $$expect $<"
else
ECHO_CHPSIMCKPT_DIFF_COMMAND = :
endif

.chpsimckpt-outdump.chpsimckpt-diff:
	@expect=`$(ECHO) $@ | $(SED) 's/\.chpsimckpt-diff$$/.chpsimckpt-indump/g'` ; \
	$(RM) $@ ; \
	if test -f "$$expect" ; then \
	  $(ECHO_CHPSIMCKPT_DIFF_COMMAND) ; \
	  $(DIFF) -u "$$expect" $< > $@ 2>&1 ; \
	  ca=`$(ECHO) $@ | $(SED) 's/-diff$$//g'` ; \
	  cb=`$(ECHO) $@ | $(SED) 's/-diff$$/-dupe/g'` ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  elif $(DIFF) -q "$$ca" "$$cb" ; then : ; \
	  else $(MAKE) "$$ca"-dump "$$cb"-dump && \
	    $(DIFF) -u "$$ca"-dump "$$cb"-dump > $@ ; \
	    $(ECHO) "$@ is non-empty! (checkpoint binaries differ)" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.chpsimckpt-diff.chpsimckpttest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.chpsimckpttest:
	@$(DUMMY_TEST_SCRIPT)

chpsimckpttest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(SET_PIPEFAIL) ; \
	$(ECHO) "$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES)" | \
	  $(SPACES_TO_NEWLINE) | $(SORT) -u | \
	  $(AWK) '/.+/ {print $$1 ".chpsimckpt-diff: " $$1 ".chpsimckpt-indump"; }' > $@ ; \
	$(TOUCH) $@

-include chpsimckpttest.autodepend
AUTO_DEPENDS += chpsimckpttest.autodepend

BOGUS_TESTS += .chpsimalloctest .chpsimtest .chpsimdottest \
	.chpsimfailtest .chpsimckpttest

CHECK_SUMMARIES += chpsimallocdiffs chpsimrcdiffs chpsimrcdiffs.nosize \
	chpsimrcfaildiffs chpsimckptdiffs

chpsimallocdiffs: force
	-$(CAT) *.chpsimallocdiff > $@

chpsimrcdiffs: force
	-$(CAT) *.chpsimrc-diff > $@

chpsimrcdiffs.nosize: force
	-$(CAT) *.chpsimrc-diff-nosize > $@

chpsimrcfaildiffs: force
	-$(CAT) *.chpsimrcfail-diff > $@

chpsimckptdiffs: force
	-$(CAT) *.chpsimckpt-diff > $@

HACKT_CHPSIMRC_TEST_SCRIPTS_BASES = \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES)

HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_BASES = \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES)
# don't expect randomized tests with failures, do we?

srcdir_EXTRA_DIST += \
	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.expect-chpsimalloc) \
	$(HACKT_CHPSIMRC_TEST_SUBJECTS:=.hac) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_BASES:=.chpsimrc) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_BASES:=.chpsimrc-expect) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_BASES:=.chpsimrc) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_BASES:=.chpsimrc-expect)

# all alloc tests and prsimrc tests are candidates for prs-dot tests
HACKT_CHPSIM_DOT_TEST_SUBJECTS =
HACKT_CHPSIM_DOT_TEST_SUBJECTS += $(HACKT_ALLOC_TEST_PASSES)
# HACKT_CHPSIM_DOT_TEST_SUBJECTS += $(HACKT_CHPSIMRC_TEST_PASSES)

if CHECK_TESTS
TESTS += \
	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.chpsimalloctest) \
	$(HACKT_CHPSIM_DOT_TEST_SUBJECTS:=.chpsimdottest) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES:=.chpsimtest) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES:=.chpsimfailtest) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpttest)

if RANDOM_TESTS
TESTS += \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES:=.chpsimtest) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES:=.chpsimfailtest)
endif
endif

HAC_COMPILE_OBJECT_TARGETS += \
	$(HACKT_CHPSIMRC_TEST_SUBJECTS:=.haco)

HAC_CREATE_OBJECT_TARGETS += \
	$(HACKT_CHPSIMRC_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.haco-c)

# HAC_ALLOC_OBJECT_TARGETS += \
#	$(HACKT_CHPSIMRC_TEST_SUBJECTS:=.haco-a) \
#	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.haco-a)


CHPSIM_RANDOM_BUILD_CHECK_LOCAL =
if RANDOM_TESTS
CHPSIM_RANDOM_BUILD_CHECK_LOCAL += \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES:=.chpsimrc-out) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES:=.chpsimrc-out-filter) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_PASSES:=.chpsimrc-diff) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES:=.chpsimrcfail-out) \
	$(HACKT_CHPSIMRC_RANDOM_TEST_SCRIPTS_FAILURES:=.chpsimrcfail-diff)
endif

build-check-local: \
	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.chpsimallocdump) \
	$(HACKT_CHPSIM_DOT_TEST_SUBJECTS:=.chpsim-event-dot) \
	$(HACKT_CHPSIM_DOT_TEST_SUBJECTS:=.chpsimdottest) \
	$(HACKT_CHPSIMRC_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES:=.chpsimrc-out) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES:=.chpsimrc-out-filter) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES:=.chpsimrc-diff) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES:=.chpsimrcfail-out) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES:=.chpsimrcfail-diff) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt-outdump) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt-dupe) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt-indump) \
	$(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt-diff) \
	$(CHPSIM_RANDOM_BUILD_CHECK_LOCAL)


ALL_CHPSIM_ALLOC = $(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS:=.expect-chpsimalloc) \
ALL_CHPSIM_DOT = $(HACKT_CHPSIM_DOT_TEST_SUBJECTS:=.chpsim-event-dot)
ALL_CHPSIM_PS = $(HACKT_CHPSIM_DOT_TEST_SUBJECTS:=.chpsim-event-ps)
ALL_CHPSIMRC_OUT = $(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES:=.chpsimrc-out) \
	$(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES:=.chpsimrcfail-out)
ALL_CHPSIM_CKPT = $(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES:=.chpsimckpt)

$(ALL_CHPSIM_ALLOC): $(HACKT_CHPSIM_RAW_EXE)
$(ALL_CHPSIM_DOT): $(HACKT_CHPSIM_RAW_EXE)
$(ALL_CHPSIMRC_OUT): $(HACKT_CHPSIM_RAW_EXE)
$(ALL_CHPSIM_CKPT): $(HACKT_CHPSIM_RAW_EXE)

all-chpsim-alloc: $(ALL_CHPSIM_ALLOC)

all-chpsim-dot: $(ALL_CHPSIM_DOT)

all-chpsim-ps: $(ALL_CHPSIM_PS)

clean-chpsim-alloc: force
	-$(RM) $(ALL_CHPSIM_ALLOC)

clean-chpsim-dot: force
	-$(RM) $(ALL_CHPSIM_DOT)

clean-chpsim-ps: force
	-$(RM) $(ALL_CHPSIM_PS)

echo-chpsimalloc-tests: force
	@$(ECHO) $(HACKT_CHPSIM_ALLOC_TEST_SUBJECTS)

echo-chpsimdot-tests: force
	@$(ECHO) $(HACKT_CHPSIM_DOT_TEST_SUBJECTS)

echo-chpsimrc-passes: force
	@$(ECHO) $(HACKT_CHPSIMRC_TEST_SCRIPTS_PASSES)

echo-chpsimrc-failures: force
	@$(ECHO) $(HACKT_CHPSIMRC_TEST_SCRIPTS_FAILURES)

echo-chpsimckpt-tests: force
	@$(ECHO) $(HACKT_CHPSIM_CKPT_TEST_SCRIPTS_BASES)

clean-chpsimtests:
	patternlist='$(HACKT_CHPSIM_CLEAN_IGNORE_PATTERNS)' ; \
	for p in $$patternlist ; do \
	  pp=`$(ECHO) $$p | $(SED) 's/"//g'` ; \
	  $(RM_PATTERN) "$$pp" ; \
	done

clean-local: clean-chpsimtests

.PHONY: clean-chpsimtests all-chpsim-dot all-chpsim-ps

