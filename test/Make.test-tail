# "test/Make.test-tail"
#	vi: ft=automake
# a template makefile for testing, to be included in recursive invocations
# Include this Makefile at the end of every subdirectoy's Makefile.am.
# The counterpart header Makefile is "test/Make.test-head".
#	$Id: Make.test-tail,v 1.64.2.6 2007/01/20 02:31:49 fang Exp $

HACKT_EXE = $(top_builddir)/src/hackt
PARSE_TEST_EXE = $(HACKT_EXE) parse_test
HACKT_COMPILE_EXE = $(HACKT_EXE) compile
HACKT_FLATTEN_EXE = $(HACKT_EXE) flatten
HACKT_OBJDUMP_EXE = $(HACKT_EXE) objdump
# if USE_UNROLL_PHASE
HACKT_UNROLL_EXE = $(HACKT_EXE) unroll
# endif
HACKT_CREATE_EXE = $(HACKT_EXE) create
HACKT_ALLOC_EXE = $(HACKT_EXE) alloc
HACKT_CFLAT_EXE = $(HACKT_EXE) cflat
HACKT_CFLAT_PRSIM_EXE = $(HACKT_CFLAT_EXE) prsim
HACKT_CFLAT_PRSIM_SEU_EXE = $(HACKT_CFLAT_PRSIM_EXE) -f SEU
HACKT_CFLAT_SPRS_EXE = $(HACKT_CFLAT_PRSIM_EXE) -fsizes
HACKT_CFLAT_LVS_EXE = $(HACKT_CFLAT_EXE) lvs
HACKT_PRSIM_EXE = $(HACKT_EXE) prsim
HACKT_CHPSIM_EXE = $(HACKT_EXE) chpsim

# NOTE: these scripts are configure-generated from their .hac files.  
TEST_SRCDIR = $(top_srcdir)/test
TEST_BUILDDIR = $(top_builddir)/test

# SPACES_TO_NEWLINE defined as inline awk command in Make.stddef
POM_HEADER_FILTER = $(AWK) -f $(TEST_BUILDDIR)/POM-header-filter.awk
POM_INDEX_FILTER = $(AWK) -f $(TEST_SRCDIR)/POM-index-filter.awk
HEX_ADDRESS_FILTER = $(SED) -f $(TEST_SRCDIR)/address_filter.sed
HACKT_OBJ_DIFF_FILTER = $(POM_HEADER_FILTER)
ANALYZE_DIFF_AWK = $(AWK) -f $(TEST_SRCDIR)/analyze-dump-diff.awk

# objdump should NOT fail under any circumstances
# reminder: dump goes to stderr
DEFAULT_OBJDUMP_RULE_ACTION = $(HACKT_OBJDUMP_EXE) $< > $@ 2>&1
OBJDUMP_APPEND = $(HACKT_OBJDUMP_EXE) $< >> $@ 2>&1

HACO_FLAGS += -I$(srcdir)

# this dependency generator assymes default target suffix .haco
# caution: concurrent builds of .haco and .depend may clobber this
# if executable did not successfully build, then skip.

HAC_DEPEND_FILTER = $(SED) -e '/haco:/s|^$(srcdir)\/||g' \
	-e 's/haco:/haco $@:/g'
# the following works for VPATH, but need to test for srcdir = .
# -e 's|$(srcdir)|$$(srcdir)|g'

# arg, need to escape the friggin' hash!
SHELL_INTERPRETER = "\#!$(SHELL)"

DEFAULT_DIFF_TEST_SCRIPT = \
	$(ECHO) "Summarizing $@ ..." ; \
	$(ECHO) $(SHELL_INTERPRETER) > $@ ; \
	$(ECHO) "\# \"$@\"" >> $@ ; \
	if test -s $< ; then \
	  $(ECHO) "$(ECHO) $< is non-empty!" >> $@ ; \
	  $(ECHO) "exit 1" >> $@ ; \
	fi ; \
	$(CHMOD) +x $@

DUMMY_TEST_SCRIPT = $(ECHO) "$(SHELL_INTERPRETER)" > $@ ; $(CHMOD) +x $@

.hac.depend:
	@if test -x $(HACKT_EXE) ; then \
		$(ECHO) "Generating automatic dependencies $@ ..." ; \
		$(HACKT_COMPILE_EXE) $(HACO_FLAGS) -M $@-tmp $< ; \
		$(CAT) $@-tmp | $(HAC_DEPEND_FILTER) > $@ ; \
		$(RM) $@-tmp ; \
	fi

if VERBOSE_CHECK
ECHO_FILTERED = $(ECHO) "Filtered $@"
else
ECHO_FILTERED = :
endif

# Each run-commands script should include the command to invoke
# for loading the object, e.g.: hackt prsim foo.haco-a
# This rule should deduce the input object from the source script.  

# useful for extracting object file name from a source script
EXTRACT_HACO_PIPE = $(GREP) "^\#" | $(GREP) "@haco@" | $(HEAD) -n1 | \
	$(AWK) '{ntok=split($$0, toks); print toks[ntok]; }'


BOGUS_TESTS =
BOGUS_TARGETS =
HAC_OBJECT_TARGETS =
CHECK_SUMMARIES =

# These included templates contain all the rules
include $(top_srcdir)/test/Make.test-compile
include $(top_srcdir)/test/Make.test-flatten
include $(top_srcdir)/test/Make.test-unroll
include $(top_srcdir)/test/Make.test-create
include $(top_srcdir)/test/Make.test-alloc
include $(top_srcdir)/test/Make.test-cflat
include $(top_srcdir)/test/Make.test-graph
include $(top_srcdir)/test/Make.test-prsim
include $(top_srcdir)/test/Make.test-chpsim

BOGUS_TESTS +=

BOGUS_TARGETS +=

CLEAN_BOGUS_FILES = $(BOGUS_TESTS) $(BOGUS_TARGETS)

CLEANFILES += $(CLEAN_BOGUS_FILES)
DISTHOOK_CLEANFILES += $(CLEAN_BOGUS_FILES)

CHECK_SUMMARIES +=

check-summaries: check-summaries-recursive

check-summaries-am: $(CHECK_SUMMARIES)
	-@ls -l $(CHECK_SUMMARIES)

MORE_RECURSIVE_TARGETS += check-summaries-recursive

srcdir_EXTRA_DIST +=

TESTS +=

HAC_OBJECT_TARGETS +=

# build all tests, but don't run the resulting test scripts
build-check-local: $(TESTS)

# executable dependence: if executable is more recent, also rebuild
$(HAC_OBJECT_TARGETS): $(HACKT_EXE)

ALL_OBJECT_TESTS = \
	$(HACKT_PARSE_TEST_PASSES) \
	$(HACKT_PARSE_TEST_WARNINGS) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS) \
	$(HACKT_CHPSIMRC_TEST_SUBJECTS)

# source dependencies
test.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(ALL_OBJECT_TESTS)" | $(SPACES_TO_NEWLINE) | $(SORT) -u | \
		$(AWK) '/.+/ {print "-include " $$1 ".depend"; }' > $@ ; \
	$(TOUCH) $@

-include test.autodepend

AUTO_DEPENDS += test.autodepend

# echo-style Makefile debugging
echo-tests: force
	@$(ECHO) $(TESTS)

echo-hackt: force
	@$(ECHO) $(HACKT_EXE)

# filter-out is GNUMake feature
#	$($(filter-out $(HACKT_PARSE_TEST_PASSES), $(HACKT_PARSE_TEST_SUBJECTS)):=.stderr)

# must be previously defined
# CLEANFILES += $(TESTS)
# removed in favor of using pattern removes, for the sake of shortening
# shell commands' lengths, as some weaker shells have trouble with long cmds.
CLEANFILES += $(CHECK_SUMMARIES)


DISTCLEANFILES += local.cvsignore

ALL_LOCAL =
if AUTO_CVSIGNORE
ALL_LOCAL += .cvsignore
endif


all-local: $(ALL_LOCAL)

DISTHOOK_CLEANFILES += $(EMPTY_CFLAT_PRS)

# consider using CLEANFILES
AUTO_IGNORE += local.cvsignore \
	$(CHECK_SUMMARIES)

if AUTO_CVSIGNORE
# we generate all the local.cvsignore's in the test directories
local.cvsignore: $(TEST_SRCDIR)/test.cvsignore
	$(CP) $? $@

# additional dependence
.cvsignore: $(TEST_SRCDIR)/Make.test-tail
endif

# clean tests only
clean-tests: clean-tests-recursive clean-tests-local

clean-tests-local:
	-$(RM) $(TESTS)

MORE_CLEAN_RECURSIVE_TARGETS += clean-tests-recursive

clean-summaries: clean-summaries-recursive clean-summaries-local

clean-summaries-local:
	$(RM) $(CHECK_SUMMARIES)

MORE_CLEAN_RECURSIVE_TARGETS += clean-summaries-recursive

MORE_CLEAN_RECURSIVE_TARGETS += distclean-depend-recursive

distclean-depend: distclean-depend-recursive distclean-depend-local

distclean-depend-local:
	-$(RM_PATTERN) "*.autodepend"
	-$(RM_PATTERN) "*.depend"

# automatically removes $(CLEANFILES)
clean-local: clean-summaries-local
	-$(RM_PATTERN) "*.core" "core.*"
	-$(RM_PATTERN) "*.test" "*.diff"
	-$(RM_PATTERN) "*.sort"
	-$(RM_PATTERN) "*.noindex"
	-$(RM_PATTERN) "*-from-haco"
	-$(RM_PATTERN) "*.*haco*"
	-$(RM_PATTERN) "*.*-from-*-dump"
	-$(RM_PATTERN) "*.*-from-*-diff"
# repeat some rm's to cover spilling command-line arguments

cleaner: cleaner-recursive cleaner-am

cleaner-am: cleaner-local clean-am

distclean-local: cleaner-local distclean-depend-local

#TODO: use RECURSIVE_TARGET_SCRIPT
MORE_CLEAN_RECURSIVE_TARGETS += cleaner-recursive

.PHONY: cleaner cleaner-am cleaner-local check-summaries check-summaries-am \
	clean-tests help-test clean-summaries clean-summaries-local \
	distclean-depend distclean-depend-local

help-local: help-test

help-test:
	@$(ECHO) "Test make targets:"
	@$(ECHO) "    cleaner: also cleans *.<ext> files (recursive)"
	@$(ECHO) "    check-summaries: summaries of test differences (recursive)"
	@$(ECHO) "	(produces: $(CHECK_SUMMARIES))"
	@$(ECHO) "    echo-*:"
	@$(ECHO) "	hackt: path to the built hackt executable"
	@$(ECHO) "	tests: lists TESTS"
	@$(ECHO) "	(-tests may be substituted with -passes, -failures)"
	@$(ECHO) "	parse-tests: lists HACKT_PARSE_TEST_SUBJECTS"
	@$(ECHO) "	flatten-tests: lists HACKT_FLATTEN_TEST_SUBJECTS"
if USE_UNROLL_PHASE
	@$(ECHO) "	unroll-tests: lists HACKT_UNROLL_TEST_SUBJECTS"
endif
	@$(ECHO) "	create-tests: lists HACKT_CREATE_TEST_SUBJECTS"
	@$(ECHO) "	alloc-tests: lists HACKT_ALLOC_TEST_SUBJECTS"
	@$(ECHO) "	cflat-tests: lists HACKT_CFLAT_TEST_SUBJECTS"
	@$(ECHO) "	cflat-lvs-tests: lists HACKT_CFLAT_LVS_TEST_SUBJECTS"
	@$(ECHO) "	cflat-sprs-tests: lists HACKT_CFLAT_SPRS_TEST_SUBJECTS"
	@$(ECHO) "	prsimexpr-tests: lists HACKT_PRSIMEXPR_TEST_SUBJECTS"
	@$(ECHO) "	prsimrc-tests: lists HACKT_PRSIMRC_TEST_SCRIPTS_BASES"
	@$(ECHO) "	prsimckpt-tests: lists HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES"
	@$(ECHO) "	prsimopt-tests: lists HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES"
	@$(ECHO) "	compile-passes: lists TESTS that pass parsing"
	@$(ECHO) "	bison-outputs: list TESTS whose output is bison-specific"
	@$(ECHO) "	empty-cflat-prs: list of tests whose cflat-output is empty"
	@$(ECHO) "	chpsimalloc-tests: lists HACKT_CHPSIM_ALLOC_TEST_SUBJECTS"

include $(top_srcdir)/Make.global
# help: help-test

