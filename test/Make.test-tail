# "test/Make.test-tail"
# a template makefile for testing, to be included in recursive invocations
# Include this Makefile at the end of every subdirectoy's Makefile.am.
# The counterpart header Makefile is "test/Make.test-head".
#	$Id: Make.test-tail,v 1.5.6.1 2005/08/14 20:09:04 fang Exp $

ARTC_EXE = $(top_builddir)/src/hackt parse_test
ART2OBJ_EXE = $(top_builddir)/src/hackt compile
ARTOBJDUMP_EXE = $(top_builddir)/src/hackt objdump
ARTOBJUNROLL_EXE = $(top_builddir)/src/hackt unroll
HACKT_CREATE_EXE = $(top_builddir)/src/hackt create

# NOTE: these scripts are configure-generated from their .in files.  
ARTC_TEST_SH = $(top_builddir)/test/artc-expect.sh
ARTOBJ_TEST_SH = $(top_builddir)/test/artobj-diff.sh
ARTOBJUNROLL_TEST_SH = $(top_builddir)/test/artobjunroll-expect.sh
HACKT_CREATE_TEST_SH = $(top_builddir)/test/hackt-create-expect.sh

STATE_ENUM_FILTER = $(AWK) -f $(top_srcdir)/test/state_enum_filter.awk
POM_HEADER_FILTER = $(AWK) -f $(top_srcdir)/test/POM-header-filter.awk
POM_INDEX_FILTER = $(AWK) -f $(top_srcdir)/test/POM-index-filter.awk
HEX_ADDRESS_FILTER = $(SED) -f $(top_srcdir)/test/address_filter.sed
ARTOBJ_DIFF_FILTER = $(POM_HEADER_FILTER)
ANALYZE_DIFF_AWK = $(AWK) -f $(top_srcdir)/test/analyze-dump-diff.awk

TEST_REPORT = $(top_builddir)/test/test-report.txt

# This needs to be specified in Makefile.am to take effect
# SUFFIXES = .in .artctest .artobjtest .artobjunrolltest

.in.stderr:
	@$(TOUCH) $@

subdir.not_a_test:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "echo \"In $(subdir):\" >> $(TEST_REPORT)" >> $@
	@$(CHMOD) +x $@

.in.artctest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(ARTC_TEST_SH) "\"$(ARTC_EXE)\"" $(srcdir) $* \
		"\"$(STATE_ENUM_FILTER)\"" $(TEST_REPORT) >> $@
	@$(CHMOD) +x $@

.in.artobjtest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(ARTOBJ_TEST_SH) "\"$(ART2OBJ_EXE)\"" \
		"\"$(ARTOBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(ARTOBJ_DIFF_FILTER)\"" $(TEST_REPORT) >> $@
	@$(CHMOD) +x $@

.in.artobjunrolltest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(ARTOBJUNROLL_TEST_SH) "\"$(ARTOBJUNROLL_EXE)\"" \
		"\"$(ARTOBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(ARTOBJ_DIFF_FILTER)\"" $(TEST_REPORT) \
		"\"$(ANALYZE_DIFF_AWK)\"" \
		"\"$(POM_INDEX_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.in.hacktcreatetest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CREATE_TEST_SH) "\"$(HACKT_CREATE_EXE)\"" \
		"\"$(ARTOBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(ARTOBJ_DIFF_FILTER)\"" $(TEST_REPORT) \
		"\"$(ANALYZE_DIFF_AWK)\"" \
		"\"$(POM_INDEX_FILTER)\"" >> $@
	@$(CHMOD) +x $@

CHECK_SUMMARIES = artcdiffs objdiffs unrolldiffs creatediffs \
	unrolldiffs.noindex creatediffs.noindex

artcdiffs: force
	-$(CAT) *.diff > $@

objdiffs: force
	-$(CAT) *.objdiff > $@

unrolldiffs: force
	-$(CAT) *.unrolldiff > $@

creatediffs: force
	-$(CAT) *.creatediff > $@

unrolldiffs.noindex: force
	-$(CAT) *.unrolldiff.noindex > $@

creatediffs.noindex: force
	-$(CAT) *.creatediff.noindex > $@

check-summaries: $(CHECK_SUMMARIES)
	@ls -l $(CHECK_SUMMARIES)

# must be previously defined to use +=
# assuming ARTOBJ_TEST_SUBJECTS is subset of ARTC_TEST_SUBJECTS
EXTRA_DIST += $(ARTC_TEST_SUBJECTS:=.in) \
	$(ARTC_TEST_FAILURES:=.stderr) \
	$(BISON_OUTPUTS:=.stderr.bison) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.unrollstderr) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createstderr) 

TESTS += $(ARTC_TEST_SUBJECTS:=.artctest) \
	$(ARTOBJ_TEST_SUBJECTS:=.artobjtest) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.artobjunrolltest) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatetest) 

# filter-out is GNUMake feature
#	$($(filter-out $(ARTC_TEST_PASSES), $(ARTC_TEST_SUBJECTS)):=.stderr)

# must be previously defined
CLEANFILES += $(TESTS) $(CHECK_SUMMARIES) \
	$(ARTC_TEST_SUBJECTS:=.diff) \
	$(ARTC_TEST_SUBJECTS:=.test) \
	$(ARTC_TEST_SUBJECTS:=.test.filter) \
	$(ARTC_TEST_SUBJECTS:=.stderr.filter) \
	$(ARTC_TEST_PASSES:=.stderr) \
	$(BISON_OUTPUTS:=.stderr.bison.filter) \
	$(BISON_OUTPUTS:=.bison.diff) \
	$(ARTOBJ_TEST_SUBJECTS:=.outdump) \
	$(ARTOBJ_TEST_SUBJECTS:=.indump) \
	$(ARTOBJ_TEST_SUBJECTS:=.outdump.filter) \
	$(ARTOBJ_TEST_SUBJECTS:=.indump.filter) \
	$(ARTOBJ_TEST_SUBJECTS:=.artobj) \
	$(ARTOBJ_TEST_SUBJECTS:=.objdiff) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.artobjunroll) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.unrolldump) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.unrolldump.filter) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.unrolldiff) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktobjcreate) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump.filter) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.creatediff)

DISTCLEANFILES += local.cvsignore subdir.not_a_test

all-local: .cvsignore subdir.not_a_test \
	$(ARTC_TEST_PASSES:=.stderr) $(TESTS)

# consider using CLEANFILES
AUTO_IGNORE += local.cvsignore \
	$(ARTC_TEST_PASSES:=.stderr) \
	$(ARTOBJUNROLL_TEST_SUBJECTS:=.artobjunrolltest) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatetest) \
	$(CHECK_SUMMARIES)

# we generate all the local.cvsignore's in the test directories
local.cvsignore: $(top_srcdir)/test/test.cvsignore
	$(CP) $? $@

# additional dependence
.cvsignore: $(top_srcdir)/test/Make.test-tail

# clean tests only
clean-tests: clean-tests-recursive
	-$(RM) $(TESTS)

# doesn't work... consider recursive automake for EXTRA_RECURSIVE_TARGETS
# RECURSIVE_TARGETS += clean-tests-recursive

clean-tests-recursive:
	@for d in $(SUBDIRS) ; do \
		if [ $$d != . ] ; then \
			if [ -d $$d ] ; then \
				$(MAKE) -C $$d clean-tests ; \
			fi ; \
		fi ; \
	done

# automatically removes $(CLEANFILES)
clean-local:
	-$(RM) *.core core.*
	-$(RM) *.noindex

# really remove these files!
cleaner: clean cleaner-recursive
	-$(RM) *.filter *.diff *.artobj
	-$(RM) *.artctest *.artobjtest *.artobjunrolltest *.hacktcreatetest
	-$(RM) *.indump *.outdump *.objdiff
	-$(RM) *.artobjunroll *.unrolldump *.unrolldiff
	-$(RM) *.hacktobjcreate *.createdump *.creatediff

cleaner-recursive:
	@for d in $(SUBDIRS) ; do \
		if [ $$d != . ] ; then \
			if [ -d $$d ] ; then \
				$(MAKE) -C $$d cleaner ; \
			fi ; \
		fi ; \
	done
	

# some stderr files don't exist, because empty output files are optional
# this shouldn't really be necessary...
# dist-hook-extra:
#	$(RM) $(distdir)/subdir.not_a_test

# this cheat is only needed to create auto-generated (empty) distribution files
# dist-hook-missing: $(EXTRA_DIST)
#	@for f in $(EXTRA_DIST); do \
#		if ! [ -f $$f ] ; then \
#			$(TOUCH) $$f ; \
#		fi ; \
#	done

include $(top_srcdir)/Make.global

