# "test/Make.test-tail"
#	vi: ft=automake
# a template makefile for testing, to be included in recursive invocations
# Include this Makefile at the end of every subdirectoy's Makefile.am.
# The counterpart header Makefile is "test/Make.test-head".
#	$Id: Make.test-tail,v 1.57.4.11 2006/11/11 02:21:11 fang Exp $

HACKT_EXE = $(top_builddir)/src/hackt
PARSE_TEST_EXE = $(HACKT_EXE) parse_test
HACKT_COMPILE_EXE = $(HACKT_EXE) compile
HACKT_OBJDUMP_EXE = $(HACKT_EXE) objdump
HACKT_UNROLL_EXE = $(HACKT_EXE) unroll
HACKT_CREATE_EXE = $(HACKT_EXE) create
HACKT_ALLOC_EXE = $(HACKT_EXE) alloc
HACKT_CFLAT_EXE = $(HACKT_EXE) cflat
HACKT_CFLAT_PRSIM_EXE = $(HACKT_CFLAT_EXE) prsim
HACKT_CFLAT_PRSIM_SEU_EXE = $(HACKT_CFLAT_PRSIM_EXE) -f SEU
HACKT_CFLAT_SPRS_EXE = $(HACKT_CFLAT_PRSIM_EXE) -fsizes
HACKT_CFLAT_LVS_EXE = $(HACKT_CFLAT_EXE) lvs
HACKT_PRSIM_EXE = $(HACKT_EXE) prsim

# NOTE: these scripts are configure-generated from their .hac files.  
TEST_SRCDIR = $(top_srcdir)/test
TEST_BUILDDIR = $(top_builddir)/test
# test scripts may be obsolete after folding into Makefile...
# HACKT_PARSE_TEST_SH = $(TEST_BUILDDIR)/parse-test-expect.sh
# HACKT_OBJ_TEST_SH = $(TEST_BUILDDIR)/hackt-obj-diff.sh
# HACKT_UNROLL_TEST_SH = $(TEST_BUILDDIR)/hackt-unroll-expect.sh
# HACKT_CREATE_TEST_SH = $(TEST_BUILDDIR)/hackt-create-expect.sh
# HACKT_CREATE_FROM_HACO_TEST_SH = $(TEST_BUILDDIR)/check-create-consistency.sh
# HACKT_ALLOC_TEST_SH = $(TEST_BUILDDIR)/hackt-alloc-expect.sh
# HACKT_ALLOC_FROM_HACO_TEST_SH = $(TEST_BUILDDIR)/check-alloc-consistency.sh
# HACKT_CFLAT_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-expect.sh
# HACKT_CFLAT_LVS_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-lvs-expect.sh
HACKT_CFLAT_SEU_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-seu-expect.sh
HACKT_CFLAT_SPRS_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-sprs-expect.sh
# HACKT_PRSIMEXPR_TEST_SH = $(TEST_BUILDDIR)/hackt-prsim-expr-alloc-expect.sh
# HACKT_PRSIMRC_TEST_SH = $(TEST_BUILDDIR)/hackt-prsimrc-expect.sh
# HACKT_PRSIM_CKPT_TEST_SH = $(TEST_BUILDDIR)/hackt-prsim-ckpt.sh
# HACKT_PRSIM_OPT_TEST_SH = $(TEST_BUILDDIR)/hackt-prsim-opt.sh
# HACKT_PRS_DOT_TEST_SH = $(TEST_BUILDDIR)/hackt-prs-dot-test.sh

HACKT_COMPILE_ERROR_FILTER = $(AWK) \
		-f $(TEST_SRCDIR)/hackt-parse-expect-filter.awk \
		-f $(TEST_SRCDIR)/state_enum_filter.awk \
		-f $(TEST_SRCDIR)/vpath_file_filter.awk
POM_HEADER_FILTER = $(AWK) -f $(TEST_BUILDDIR)/POM-header-filter.awk
POM_INDEX_FILTER = $(AWK) -f $(TEST_SRCDIR)/POM-index-filter.awk
HEX_ADDRESS_FILTER = $(SED) -f $(TEST_SRCDIR)/address_filter.sed
SPACESTONEWLINE = $(AWK) -f $(TEST_SRCDIR)/spacestonewline.awk
ALLOC_FILTER = $(SED) -f $(TEST_SRCDIR)/alloc_filter.sed
HACKT_OBJ_DIFF_FILTER = $(POM_HEADER_FILTER)
ANALYZE_DIFF_AWK = $(AWK) -f $(TEST_SRCDIR)/analyze-dump-diff.awk
PRSIMRC_FILTER_AWK = $(AWK) -f $(TEST_SRCDIR)/prsimrc-filter.awk
PRSIMRC_TIME_FILTER_AWK = $(AWK) -f $(TEST_SRCDIR)/prsimrc-random-time-filter.awk

DEFAULT_OBJDUMP_RULE_ACTION = $(HACKT_OBJDUMP_EXE) $< > $@ 2>&1

HACO_FLAGS += -I$(srcdir)

# .hac.stderr:
#	@$(TOUCH) $@

# this dependency generator assymes default target suffix .haco
# caution: concurrent builds of .haco and .depend may clobber this
# if executable did not successfully build, then skip.

HAC_DEPEND_FILTER = $(SED) '/haco:/s|^$(srcdir)\/||g' | \
	$(SED) 's/haco:/haco $@:/g'

# arg, need to escape the friggin' hash!
SHELL_INTERPRETER = "\#!$(SHELL)"

DEFAULT_DIFF_TEST_SCRIPT = \
	$(ECHO) "Summarizing $@ ..." ; \
	$(ECHO) $(SHELL_INTERPRETER) > $@ ; \
	$(ECHO) "\# \"$@\"" >> $@ ; \
	if test -s $< ; then \
	  $(ECHO) "$(ECHO) $< is non-empty!" >> $@ ; \
	  $(ECHO) "exit 1" >> $@ ; \
	fi ; \
	$(CHMOD) +x $@

DUMMY_TEST_SCRIPT = $(ECHO) "$(SHELL_INTERPRETER)" > $@ ; $(CHMOD) +x $@

.hac.depend:
	@if test -x $(HACKT_EXE) ; then \
		$(ECHO) "Generating automatic dependencies $@ ..." ; \
		$(HACKT_COMPILE_EXE) $(HACO_FLAGS) -M $@-tmp $< ; \
		$(CAT) $@-tmp | $(HAC_DEPEND_FILTER) > $@ ; \
		$(RM) $@-tmp ; \
	fi

# dependency tracking enabled by default
.hac.haco:
	@depbase=`$(ECHO) $@ | $(SED) 's/\.haco$$//g'` ; \
	log="$$depbase.compiledump" ; \
	$(ECHO) "$(HACKT_COMPILE_EXE) $(HACO_FLAGS) -M $$depbase.depend $< $@" ; \
	if $(HACKT_COMPILE_EXE) $(HACO_FLAGS) -M "$$depbase.tmpd" $< $@ > "$$log" 2>&1 ; \
	then $(CAT) "$$depbase.tmpd" | \
		$(HAC_DEPEND_FILTER) > "$$depbase.depend" ; \
		$(RM) "$$depbase.tmpd" ; \
	else $(RM) "$$depbase.tmpd" ; exit 1 ; \
	fi
#	$(HACKT_COMPILE_EXE) $(HACO_FLAGS) $< $@

# for expect-fail tests: ignore exit status
.hac.compiledump:
	-@obj=`$(ECHO) $@ | $(SED) 's/\.compiledump$$/.haco/g'` ; \
	$(ECHO) "Compile-dumping $< to .compiledump (expect-fail)" ; \
	$(HACKT_COMPILE_EXE) $(HACO_FLAGS) $< "$$obj" > $@ 2>&1

.compiledump.compiledump-filter:
	@$(CAT) $< | $(HACKT_COMPILE_ERROR_FILTER) > $@


.hac.outdump:
	@depbase=`$(ECHO) $@ | $(SED) 's/\.outdump$$//g'` ; \
	$(ECHO) "Compile-dumping $< to .outdump" ; \
	$(HACKT_COMPILE_EXE) -d -fdump-object-header $(HACO_FLAGS) \
		$< "$$depbase".hacod > $@ 2>&1

.haco.indump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.outdump.outdump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.indump.indump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.haco.haco-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.indump-filter.compileobjdiff:
	@odump=`$(ECHO) $@ | $(SED) 's/\.compileobjdiff$$/.outdump-filter/g'` ; \
	if test -f "$$odump" ; then \
	  $(ECHO) "$(DIFF) -bu $$odump $<" ; \
	  $(DIFF) -bu "$$odump" $< > $@ 2>&1 ; \
	  if test -s $@ ; then $(ECHO) "Object differences in $@!" ; fi ; \
	else exit 1 ; \
	fi ; \
	$(TOUCH) $@

compileobjdiff.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_OBJ_TEST_SUBJECTS)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".compileobjdiff: " $$1 ".outdump-filter"; }' > $@ ; \
	$(TOUCH) $@

-include compileobjdiff.autodepend

# .hac.hacktcmpltest:
# should pass without any diagnostics
.haco.hacktcmpltest:
	@log=`$(ECHO) $@ | $(SED) 's/\.hacktcmpltest$$/.compiledump/g'` ; \
	$(ECHO) "#!$(SHELL)" > $@ ; \
	$(ECHO) "# \"$@\"" >> $@ ; \
	err=0 ; \
	if test -f "$$log" ; then \
	  if test -s "$$log" ; then \
	    $(ECHO) "$(ECHO) Unexpected diagnostics in $$log." >> $@ ; \
	    err=1 ; \
	  fi ; \
	else $(ECHO) "$(ECHO) Missing $$log." >> $@ ; \
	  err=1 ; \
	fi ; \
	if test "$$err" -eq 1 ; then \
	  $(ECHO) "exit 1" >> $@ ; \
	fi ; \
	$(CHMOD) +x $@

# no need to filter warnings
.compilewarndiff.hacktcmplwarntest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

# compilepasstest.autodepend: Makefile

# additional dependencies:
# .compilewarndiff.stderr (srcdir)

.haco.compilewarndiff:
	@log=`$(ECHO) $@ | $(SED) 's/\.compilewarndiff$$/.compiledump/g'` ; \
	stderr=`$(ECHO) $@ | $(SED) 's/\.compilewarndiff$$/.stderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  if test -f "$$log" ; then \
	    $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $$log" ; \
	    $(DIFF) -bu "$$expect" "$$log" > $@ 2>&1 ; \
	    if test -s $@ ; then $(ECHO) "$@ is non-empty!" ; fi ; \
	  else $(ECHO) "Missing $$log." | $(TEE) $@ ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

compilewarntest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PARSE_TEST_WARNINGS)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".compilewarndiff: $$(srcdir)/" $$1 ".stderr"; }' > $@ ; \
	$(TOUCH) $@

-include compilewarntest.autodepend

.compilefaildiff.hacktcmplfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

BISON_COMPILE_DIFF_SCRIPT =

if HAVE_BISON
BISON_COMPILE_DIFF_SCRIPT += \
	if test -s $@ ; then \
	  expect="$$expect".bison ; \
	  if test -f "$$expect" ; then \
	    $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr.bison $<" ; \
	    $(DIFF) -bu "$$expect" $< > $@-bison 2>&1 ; \
	    if test ! -s $@-bison ; then $(MV) $@-bison $@ ; \
	    else $(ECHO) "$@-bison is non-empty!" | $(TEE) $@ ; \
	    fi ; \
	  else \
	    $(ECHO) "Missing $$expect or diffs unrelated to parser." | \
	      $(TEA) $@ ; \
	  fi ; \
	fi
else
BISON_COMPILE_DIFF_SCRIPT += :
endif

# additional dependencies:
# .stderr.compilefaildirr
.compiledump-filter.compilefaildiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.compilefaildiff$$/.stderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  $(BISON_COMPILE_DIFF_SCRIPT) ; \
	  if test -s $@ ; then $(ECHO) "$@ is non-empty!" ; fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

compilefailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PARSE_TEST_FAILURES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".compilefaildiff: $$(srcdir)/" $$1 ".stderr"; }' > $@ ; \
	$(TOUCH) $@

-include compilefailtest.autodepend

# dummy test for when make variable is empty
.hacktcmpltest:
	@$(DUMMY_TEST_SCRIPT)

.hacktcmplwarntest:
	@$(DUMMY_TEST_SCRIPT)

.hacktcmplfailtest:
	@$(DUMMY_TEST_SCRIPT)

# .hac.hacktobjtest:
.compileobjdiff.hacktobjtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

# dummy test for when make variable is empty
.hacktobjtest:
	@$(DUMMY_TEST_SCRIPT)

.haco.haco-u:
	$(HACKT_UNROLL_EXE) $< $@

.haco-u.haco-u-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-u.unrolldump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.unrolldump.unrolldump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.haco-u-dump.haco-u-dump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.unrolldump-filter.unrolldiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.unrolldiff$$/.unrollstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	    $(ANALYZE_DIFF_AWK) -v quiet=2 $@ > $@-anal ; \
	    if $(GREP) "OK" $@-anal ; then \
	      filtered=`$(ECHO) $@ | $(SED) 's/\.unrolldiff$$/.unrollstderr-noindex/g'` ; \
	      diffout=`$(ECHO) $@ | $(SED) 's/\.unrolldiff$$/.unrolldiff-noindex/g'` ; \
	      $(CAT) "$$expect" | $(POM_INDEX_FILTER) > $$filtered ; \
	      $(CAT) $< | $(POM_INDEX_FILTER) > $<-noindex ; \
	      $(DIFF) -buw "$$filtered" $<-noindex > "$$diffout" 2>&1 ; \
	      $(ANALYZE_DIFF_AWK) -v quiet=0 "$$diffout" ; \
	    fi ; \
	    $(RM) $@-anal ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.unrolldiff.hacktunrolltest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

unrolltest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_UNROLL_TEST_PASSES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".unrolldiff: $$(srcdir)/" $$1 ".unrollstderr"; }' > $@ ; \
	$(TOUCH) $@

-include unrolltest.autodepend

.hacktunrolltest:
	@$(DUMMY_TEST_SCRIPT)

.haco.unrollfaildump:
	-@failobj=`$(ECHO) $@ | $(SED) 's/\.unrollfaildump$$/.haco-u-fail/g'` ; \
	$(ECHO) $(HACKT_UNROLL_EXE) $< "$$failobj" ; \
	$(HACKT_UNROLL_EXE) $< "$$failobj" > $@ 2>&1

.unrollfaildump.unrollfaildiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.unrollfaildiff$$/.unrollstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.unrollfaildiff.hacktunrollfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

unrollfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_UNROLL_TEST_FAILURES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".unrollfaildiff: $$(srcdir)/" $$1 ".unrollstderr"; }' > $@ ; \
	$(TOUCH) $@

-include unrollfailtest.autodepend

# CREATE tests
.haco-c.createdump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-c.haco-c-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.createdump.createdump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.haco-c-dump.haco-c-dump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.createdump-filter.creatediff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.creatediff$$/.createstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	    $(ANALYZE_DIFF_AWK) -v quiet=2 $@ > $@-anal ; \
	    if $(GREP) "OK" $@-anal ; then \
	      filtered=`$(ECHO) $@ | $(SED) 's/\.creatediff$$/.createstderr-noindex/g'` ; \
	      diffout=`$(ECHO) $@ | $(SED) 's/\.creatediff$$/.creatediff-noindex/g'` ; \
	      $(CAT) "$$expect" | $(POM_INDEX_FILTER) > $$filtered ; \
	      $(CAT) $< | $(POM_INDEX_FILTER) > $<-noindex ; \
	      $(DIFF) -buw "$$filtered" $<-noindex > "$$diffout" 2>&1 ; \
	      $(ANALYZE_DIFF_AWK) -v quiet=0 "$$diffout" ; \
	    fi ; \
	    $(RM) $@-anal ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.creatediff.hacktcreatetest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

createtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CREATE_TEST_PASSES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".creatediff: $$(srcdir)/" $$1 ".createstderr"; }' > $@ ; \
	$(TOUCH) $@

-include createtest.autodepend

.hacktcreatetest:
	@$(DUMMY_TEST_SCRIPT)

.haco-u.createfaildump:
	-@failobj=`$(ECHO) $@ | $(SED) 's/\.createfaildump$$/.haco-c-fail/g'` ; \
	$(ECHO) $(HACKT_CREATE_EXE) $< "$$failobj" ; \
	$(HACKT_CREATE_EXE) $< "$$failobj" > $@ 2>&1

.createfaildump.createfaildiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.createfaildiff$$/.createstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.createfaildiff.hacktcreatefailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

createfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CREATE_TEST_FAILURES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".createfaildiff: $$(srcdir)/" $$1 ".createstderr"; }' > $@ ; \
	$(TOUCH) $@

-include createfailtest.autodepend


.haco-u.haco-c:
	$(HACKT_CREATE_EXE) $< $@

.haco.haco-c-from-haco:
	$(HACKT_CREATE_EXE) $< $@

# .hac.hacktcreatetest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_CREATE_TEST_SH) "\"$(HACKT_CREATE_EXE)\"" \
#		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
#		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" \
#		"\"$(ANALYZE_DIFF_AWK)\"" \
#		"\"$(POM_INDEX_FILTER)\"" >> $@
#	@$(CHMOD) +x $@

# .createstderr:
#	@$(TOUCH) $@

.haco-c-from-haco.create-from-haco-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.create-from-haco-dump.create-from-haco-dump-filter:
	@$(CAT) $< | $(HACKT_OBJ_DIFF_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.create-from-haco-dump-filter.create-from-haco-diff:
	@expect=`$(ECHO) $@ | $(SED) 's/\.create-from-haco-diff$$/.createdump-filter/g'` ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$expect $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

createfromhaco.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CREATE_TEST_PASSES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".create-from-haco-diff: " $$1 ".createdump-filter"; }' > $@ ; \
	$(TOUCH) $@

-include createfromhaco.autodepend

.create-from-haco-diff.hacktcreatefromhacotest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

# .hac.hacktcreatefromhacotest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_CREATE_FROM_HACO_TEST_SH) "\"$(HACKT_CREATE_EXE)\"" \
#		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
#		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" >> $@
#	@$(CHMOD) +x $@

.hacktcreatefromhacotest:
	@$(DUMMY_TEST_SCRIPT)

# ALLOC tests
.haco-c.haco-a:
	$(HACKT_ALLOC_EXE) $< $@

.haco.haco-a-from-haco:
	$(HACKT_ALLOC_EXE) $< $@

.haco-u.haco-a-from-u:
	$(HACKT_ALLOC_EXE) $< $@

.haco-a.haco-a-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a.allocdump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a-from-haco.haco-a-from-haco-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a-from-u.haco-a-from-u-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a-dump.haco-a-dump-filter:
	$(CAT) $< | $(ALLOC_FILTER) > $@

.allocdump.allocdump-filter:
	$(CAT) $< | $(ALLOC_FILTER) > $@

.haco-a-from-haco-dump.haco-a-from-haco-filter:
	$(CAT) $< | $(ALLOC_FILTER) > $@

.haco-a-from-u-dump.haco-a-from-u-filter:
	$(CAT) $< | $(ALLOC_FILTER) > $@

.allocdump-filter.allocdiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.allocdiff$$/.allocstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then $(ECHO) "$@ is non-empty!" ; fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.allocdiff.hacktalloctest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

alloctest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_ALLOC_TEST_PASSES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".allocdiff: $$(srcdir)/" $$1 ".allocstderr"; }' > $@ ; \
	$(TOUCH) $@

-include alloctest.autodepend

.hacktalloctest:
	@$(DUMMY_TEST_SCRIPT)

.haco-c.allocfaildump:
	-@failobj=`$(ECHO) $@ | $(SED) 's/\.allocfaildump$$/.haco-a-fail/g'` ; \
	$(ECHO) $(HACKT_ALLOC_EXE) $< "$$failobj" ; \
	$(HACKT_ALLOC_EXE) $< "$$failobj" > $@ 2>&1

.allocfaildump.allocfaildiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.allocfaildiff$$/.allocstderr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.allocfaildiff.hacktallocfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

allocfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_ALLOC_TEST_FAILURES)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print $$1 ".allocfaildiff: $$(srcdir)/" $$1 ".allocstderr"; }' > $@ ; \
	$(TOUCH) $@

-include allocfailtest.autodepend


# .hac.hacktalloctest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_ALLOC_TEST_SH) "\"$(HACKT_ALLOC_EXE)\"" \
#		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
#		$* "\"$(ALLOC_FILTER)\"" \
#		"\"$(ANALYZE_DIFF_AWK)\"" \
#		"\"$(POM_INDEX_FILTER)\"" >> $@
#	@$(CHMOD) +x $@

# does a 3-way difference test
# .hac.hacktallocfromhacotest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_ALLOC_FROM_HACO_TEST_SH) "\"$(HACKT_ALLOC_EXE)\"" \
#		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
#		$* "\"$(ALLOC_FILTER)\"" >> $@
#	@$(CHMOD) +x $@

.haco-a-from-haco.alloc-from-haco-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a-from-u.alloc-from-u-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.alloc-from-haco-dump.alloc-from-haco-dump-filter:
	@$(CAT) $< | $(ALLOC_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

.alloc-from-u-dump.alloc-from-u-dump-filter:
	@$(CAT) $< | $(ALLOC_FILTER) > $@ ; \
	$(ECHO) "Filtered $@"

# unifies 3-way diff
.alloc-from-haco-dump-filter.alloc-from-haco-diff:
	@expect1=`$(ECHO) $@ | $(SED) 's/\.alloc-from-haco-diff$$/.allocdump-filter/g'` ; \
	expect2=`$(ECHO) $@ | $(SED) 's/\.alloc-from-haco-diff$$/.alloc-from-u-dump-filter/g'` ; \
	$(ECHO) -n "" > $@ ; \
	if test -f "$$expect1" ; then \
	  if test -f "$$expect2" ; then \
	    $(ECHO) "$(DIFF) -bu $$expect1 $<" ; \
	    $(ECHO) "$(DIFF) -bu $$expect2 $<" ; \
	    $(DIFF) -bu "$$expect1" $< >> $@ 2>&1 ; \
	    $(DIFF) -bu "$$expect2" $< >> $@ 2>&1 ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	    fi ; \
	  else $(ECHO) "Missing $$expect2." | $(TEE) $@ ; \
	  fi ; \
	else $(ECHO) "Missing $$expect1." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

allocfromhaco.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_ALLOC_TEST_PASSES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".alloc-from-haco-diff: " $$1 ".allocdump-filter " $$1 ".alloc-from-u-dump-filter"; }' > $@ ; \
	$(TOUCH) $@

-include allocfromhaco.autodepend

.alloc-from-haco-diff.hacktallocfromhacotest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktallocfromhacotest:
	@$(DUMMY_TEST_SCRIPT)


# CFLAT tests
.haco-a.prs:
	$(HACKT_CFLAT_PRSIM_EXE) $< > $@

# .hac.hacktcflattest:
# 	@$(ECHO) "#!$(SHELL)" > $@
# 	@$(ECHO) "# \"$@\"" >> $@
# 	@$(ECHO) $(HACKT_CFLAT_TEST_SH) "\"$(HACKT_CFLAT_PRSIM_EXE)\"" \
# 		$(srcdir) $* >> $@
# 	@$(CHMOD) +x $@

OLD_PRSIM_TEST_SCRIPT =
if HAVE_PRSIM
OLD_PRSIM_TEST_SCRIPT += \
	else \
	case $* in \
	echo* ) break ;; \
	macro* ) break ;; \
	spec* ) break ;; \
	weak* ) break ;; \
	*) @PRSIM@ "$$out" < /dev/null > /dev/null 2>&1 || \
	  $(ECHO) "Error: @PRSIM@ rejected $$out." ;; \
	esac
else
OLD_PRSIM_TEST_SCRIPT += :
endif

DEFAULT_SORT_SCRIPT = $(SORT) $< > $@

.prs.prs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-prs.expect-prs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-prs-sort.prsdiff-sort:
	@out=`$(ECHO) $@ | $(SED) 's/\.prsdiff-sort$$/.prs-sort/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test ! -s $@ ; then \
	      $(ECHO) "Only re-ordering differences found.  (OK)" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.expect-prs.prsdiff:
	@out=`$(ECHO) $@ | $(SED) 's/\.prsdiff$$/.prs/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	      $(MAKE) $@-sort ; \
	      $(OLD_PRSIM_TEST_SCRIPT) ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsdiff.hacktcflattest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktcflattest:
	@$(DUMMY_TEST_SCRIPT)

cflatprstest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CFLAT_TEST_SUBJECTS)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsdiff: " $$1 ".prs"; print $$1 ".prsdiff-sort: " $$1 ".prs-sort"; }' > $@ ; \
	$(TOUCH) $@


-include cflatprstest.autodepend


# .hac.hacktcflatlvstest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_CFLAT_LVS_TEST_SH) "\"$(HACKT_CFLAT_LVS_EXE)\"" \
#		$(srcdir) $* >> $@
#	@$(CHMOD) +x $@

HACKT_CFLAT_LVS_SCRIPT = \
	srcfile=$(srcdir)/$*.hac ; \
	type=`$(CAT) $$srcfile | $(GREP) "@hflat-type@" | $(HEAD) -n1 | \
		$(SED) 's/^.*-type@[ \t]*//g' | $(SED) 's/\"//g'` ; \
	if test -n "$$type" ; then \
		$(HACKT_CFLAT_LVS_EXE) -t $$type $< > $@ 2>&1 ; \
	else \
		$(HACKT_CFLAT_LVS_EXE) $< > $@ 2>&1 ; \
	fi


# if the source file has a magic line @hflat-type@, then extract it
# as the type to process for cflatting.
# The hflat-type string must not contain any spaces!
.haco-a.lvsprs:
	@$(HACKT_CFLAT_LVS_SCRIPT)

.haco-a.lvsfail:
	-@$(HACKT_CFLAT_LVS_SCRIPT)

.haco-a.lvssprs:
	@srcfile=$(srcdir)/$*.hac ; \
	type=`$(CAT) $$srcfile | $(GREP) "@hflat-type@" | $(HEAD) -n1 | \
		$(SED) 's/^.*-type@[ \t]*//g' | $(SED) 's/\"//g'` ; \
	if test -n "$$type" ; then \
		$(HACKT_CFLAT_LVS_EXE) -fsizes -t $$type $< > $@ ; \
	else \
		$(HACKT_CFLAT_LVS_EXE) -fsizes $< > $@ ; \
	fi

.lvsprs.lvsprs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-lvsprs.expect-lvsprs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-lvsprs-sort.lvsprsdiff-sort:
	@out=`$(ECHO) $@ | $(SED) 's/\.lvsprsdiff-sort$$/.lvsprs-sort/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test ! -s $@ ; then \
	      $(ECHO) "Only re-ordering differences found.  (OK)" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.expect-lvsprs.lvsprsdiff:
	@out=`$(ECHO) $@ | $(SED) 's/\.lvsprsdiff$$/.lvsprs/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.expect-lvsprs.lvsfaildiff:
	@out=`$(ECHO) $@ | $(SED) 's/\.lvsfaildiff$$/.lvsfail/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.lvsprsdiff.hacktcflatlvstest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.lvsfaildiff.hacktcflatlvsfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktcflatlvstest:
	@$(DUMMY_TEST_SCRIPT)

.hacktcflatlvsfailtest:
	@$(DUMMY_TEST_SCRIPT)

cflatlvstest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CFLAT_LVS_TEST_PASSES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".lvsprsdiff: " $$1 ".lvsprs"; print $$1 ".lvsprsdiff-sort: " $$1 ".lvsprs-sort"; }' > $@ ; \
	$(TOUCH) $@

cflatlvsfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CFLAT_LVS_TEST_FAILURES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".lvsfaildiff: " $$1 ".lvsfail"; }' > $@ ; \
	$(TOUCH) $@

-include cflatlvstest.autodepend
-include cflatlvsfailtest.autodepend

.haco-a.prsseu:
	$(HACKT_CFLAT_PRSIM_SEU_EXE) $< > $@

# .hac.hacktcflatseutest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_CFLAT_SEU_TEST_SH) "\"$(HACKT_CFLAT_PRSIM_SEU_EXE)\"" \
#		$(srcdir) $* >> $@
#	@$(CHMOD) +x $@

.prsseu.prsseu-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-prsseu.expect-prsseu-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-prsseu-sort.prsseudiff-sort:
	@out=`$(ECHO) $@ | $(SED) 's/\.prsseudiff-sort$$/.prsseu-sort/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test ! -s $@ ; then \
	      $(ECHO) "Only re-ordering differences found.  (OK)" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.expect-prsseu.prsseudiff:
	@out=`$(ECHO) $@ | $(SED) 's/\.prsseudiff$$/.prsseu/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsseudiff.hacktcflatseutest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktcflatseutest:
	@$(DUMMY_TEST_SCRIPT)

cflatprsseutest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CFLAT_SEU_TEST_SUBJECTS)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsseudiff: " $$1 ".prsseu"; print $$1 ".prsseudiff-sort: " $$1 ".prsseu-sort"; }' > $@ ; \
	$(TOUCH) $@

-include cflatprsseutest.autodepend


.haco-a.prsimexpr:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-expr-alloc -fcheck-structure $< > $@

.haco-a.prs-dot:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-dot-struct $< > $@

.haco-a.prsimexpr-O1:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-expr-alloc -O1 $< > $@

.haco-a.prs-dot-O1:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-dot-struct -O1 $< > $@

# .hac.hacktprsdottest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_PRS_DOT_TEST_SH) $* >> $@
#	@$(CHMOD) +x $@

.prsimexpr-O1.hacktprsdottest:
	@$(DUMMY_TEST_SCRIPT)

# dummy test for when make variable is empty
.hacktprsdottest:
	@$(DUMMY_TEST_SCRIPT)

hacktprsdottest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRS_DOT_TEST_SUBJECTS)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".hacktprsdottest: " $$1 ".prs-dot-O1"; }' > $@ ; \
	$(TOUCH) $@

-include hacktprsdottest.autodepend

# by default we produce the figures using optimized expression netlists -O1
# All thevarious graphviz filter programs accept the DOT language for input.  
if HAVE_DOT
.prs-dot-O1.prs-dot-ps:
	$(DOT) -Tps $< -o $@

.prs-dot-O1.prs-dot-fig:
	$(DOT) -Tfig $< -o $@
endif

if HAVE_NEATO
.prs-dot-O1.prs-neato-ps:
	$(NEATO) -Tps $< -o $@

.prs-dot-O1.prs-neato-fig:
	$(NEATO) -Tfig $< -o $@
endif

if HAVE_CIRCO
.prs-dot-O1.prs-circo-ps:
	$(CIRCO) -Tps $< -o $@

.prs-dot-O1.prs-circo-fig:
	$(CIRCO) -Tfig $< -o $@
endif

if HAVE_TWOPI
.prs-dot-O1.prs-twopi-ps:
	$(TWOPI) -Tps $< -o $@

.prs-dot-O1.prs-twopi-fig:
	$(TWOPI) -Tfig $< -o $@
endif

if HAVE_FDP
.prs-dot-O1.prs-fdp-ps:
	$(FDP) -Tps $< -o $@

.prs-dot-O1.prs-fdp-fig:
	$(FDP) -Tfig $< -o $@
endif

if HAVE_FIG2DEV
.prs-dot-fig.prs-dot-pdf:
	$(FIG2DEV) -Lpdf $< $@

.prs-neato-fig.prs-neato-pdf:
	$(FIG2DEV) -Lpdf $< $@

.prs-circo-fig.prs-circo-pdf:
	$(FIG2DEV) -Lpdf $< $@

.prs-twopi-fig.prs-twopi-pdf:
	$(FIG2DEV) -Lpdf $< $@

.prs-fdp-fig.prs-fdp-pdf:
	$(FIG2DEV) -Lpdf $< $@
endif

# .hac.hacktprsimexprtest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_PRSIMEXPR_TEST_SH) "\"$(HACKT_PRSIM_EXE)\"" \
#		$(srcdir) $* >> $@
#	@$(CHMOD) +x $@

.prsimexpr.prsimexprdiff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.prsimexprdiff$$/.expect-prsimexpr/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

prsimexprtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRSIMEXPR_TEST_SUBJECTS)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsimexprdiff: $$(srcdir)/" $$1 ".expect-prsimexpr"; }' > $@ ; \
	$(TOUCH) $@

-include prsimexprtest.autodepend

.prsimexprdiff.hacktprsimexprtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktprsimexprtest:
	@$(DUMMY_TEST_SCRIPT)

.haco-a.sprs:
	$(HACKT_CFLAT_PRSIM_EXE) -fsizes $< > $@

# .hac.hacktsprstest:
#	@$(ECHO) "#!$(SHELL)" > $@
#	@$(ECHO) "# \"$@\"" >> $@
#	@$(ECHO) $(HACKT_CFLAT_SPRS_TEST_SH) "\"$(HACKT_CFLAT_SPRS_EXE)\"" \
#		$(srcdir) $* >> $@
#	@$(CHMOD) +x $@

.sprs.sprs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-sprs.expect-sprs-sort:
	$(DEFAULT_SORT_SCRIPT)

.expect-sprs-sort.sprsdiff-sort:
	@out=`$(ECHO) $@ | $(SED) 's/\.sprsdiff-sort$$/.sprs-sort/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test ! -s $@ ; then \
	      $(ECHO) "Only re-ordering differences found.  (OK)" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.expect-sprs.sprsdiff:
	@out=`$(ECHO) $@ | $(SED) 's/\.sprsdiff$$/.sprs/g'` ; \
	if test -f "$$out" ; then \
	    $(ECHO) "$(DIFF) -bu $< $$out" ; \
	    $(DIFF) -bu $< "$$out" > $@ ; \
	    if test -s $@ ; then \
	      $(ECHO) "$@ is non-empty!" ; \
	    fi ; \
	else $(ECHO) "Missing $$out." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.sprsdiff.hacktsprstest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.hacktsprstest:
	@$(DUMMY_TEST_SCRIPT)

cflatsprstest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_CFLAT_SPRS_TEST_SUBJECTS)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".sprsdiff: " $$1 ".sprs"; print $$1 ".sprsdiff-sort: " $$1 ".sprs-sort"; }' > $@ ; \
	$(TOUCH) $@

-include cflatsprstest.autodepend


if HAVE_CFLAT
.cast.castprs:
	$(CFLAT) -prsim $< > $@
else
.cast.castprs:
	@$(ECHO) "Sorry, no cflat found in path." ; exit 1
endif


# Each run-commands script should include the command to invoke
# for loading the object, e.g.: hackt prsim foo.haco-a
# This rule should deduce the input object from the source script.  

# doesn't work :S
EXTRACT_HACO_PIPE = $(GREP) "^\#" | $(GREP) "@haco@" | $(HEAD) -n1 | \
	$(AWK) '{ntok=split($$0, toks); print toks[ntok]; }'

# .prsimrc.prsimtest:
# 	@$(ECHO) "#!$(SHELL)" > $@ ; \
# 	$(ECHO) "# \"$@\"" >> $@ ; \
# 	obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
# 	$(ECHO) "$(HACKT_PRSIMRC_TEST_SH) \"$(HACKT_PRSIM_EXE) -b -I$(srcdir)\" $$obj $<" \
# 		"\"$(PRSIMRC_FILTER_AWK)\"" \
# 		"\"$(PRSIMRC_TIME_FILTER_AWK)\"" >> $@ ; \
# 	$(CHMOD) +x $@

# semi-hackish way to conditionally filter random timing

PRSIMRC_TEST_SCRIPT = \
	obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
	$(ECHO) "$(HACKT_PRSIM_EXE) -b -I$(srcdir) $$obj < $<" ; \
	$(HACKT_PRSIM_EXE) -b -I$(srcdir) "$$obj" < $< > $@ 2>&1

.prsimrc.prsimrc-out:
	@$(PRSIMRC_TEST_SCRIPT)

# expect failure, ignore error
.prsimrc.prsimrcfail-out:
	-@$(PRSIMRC_TEST_SCRIPT)

# this reuses the same dependency for checkpoints
prsimrc-out.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) -n "" > $@ ; \
	list='$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES)' ; \
	exts='prsimrc-out prsimckpt prsimckpt-outdump prsimckpt-O1-err' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.prsimrc ; \
	  obj=`$(CAT) "$$src" | $(EXTRACT_HACO_PIPE)` ; \
	  for e in $$exts ; do \
	    target=$$d.$$e ; \
	    $(ECHO) -n "$$target " >> $@ ; \
	  done ; \
	  $(ECHO) ": $$obj" >> $@ ; \
	done ; \
	$(TOUCH) $@

prsimrcfail-out.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) -n "" > $@ ; \
	list='$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES)' ; \
	test -z "$$list" || \
	for d in $$list ; do \
	  src=$(srcdir)/$$d.prsimrc ; \
	  target=$$d.prsimrcfail-out ; \
	  obj=`$(CAT) "$$src" | $(EXTRACT_HACO_PIPE)` ; \
	  $(ECHO) "$$target: $$obj" >> $@ ; \
	done ; \
	$(TOUCH) $@

-include prsimrc-out.autodepend
-include prsimrcfail-out.autodepend

PRSIMRC_TEST_FILTER_SCRIPT = \
	$(ECHO) "Filtering $@" ; \
	$(CAT) $< | $(PRSIMRC_FILTER_AWK) > $@ ; \
	case $< in \
	  *random*) $(CAT) $@ | $(PRSIMRC_TIME_FILTER_AWK) > $@.tmp ; \
	    $(MV) $@.tmp $@ ; \
	    break ;; \
	  *) break ;; \
	esac

.prsimrc-out.prsimrc-out-filter:
	@$(PRSIMRC_TEST_FILTER_SCRIPT)

.prsimrcfail-out.prsimrcfail-out-filter:
	@$(PRSIMRC_TEST_FILTER_SCRIPT)

.prsimrc-out-filter.prsimrc-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.prsimrc-diff$$/.prsimrc-expect/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsimrcfail-out-filter.prsimrcfail-diff:
	@stderr=`$(ECHO) $@ | $(SED) 's/\.prsimrcfail-diff$$/.prsimrc-expect/g'` ; \
	expect=$(srcdir)/$$stderr ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -bu $$""(srcdir)/$$stderr $<" ; \
	  $(DIFF) -bu "$$expect" $< > $@ 2>&1 ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsimrc-diff.prsimtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.prsimrcfail-diff.prsimfailtest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.prsimtest:
	@$(DUMMY_TEST_SCRIPT)

.prsimfailtest:
	@$(DUMMY_TEST_SCRIPT)

prsimtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsimrc-diff: $$(srcdir)/" $$1 ".prsimrc-expect"; }' > $@ ; \
	$(TOUCH) $@

prsimfailtest.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsimrcfail-diff: $$(srcdir)/" $$1 ".prsimrc-expect"; }' > $@ ; \
	$(TOUCH) $@

-include prsimtest.autodepend
-include prsimfailtest.autodepend

# .prsimrc.prsimckpttest:
#	@$(ECHO) "#!$(SHELL)" > $@ ; \
#	$(ECHO) "# \"$@\"" >> $@ ; \
#	obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
#	$(ECHO) "$(HACKT_PRSIM_CKPT_TEST_SH) \"$(HACKT_PRSIM_EXE) -b -I$(srcdir)\" $$obj $<" >> $@ ; \
#	$(CHMOD) +x $@

PRSIMCKPT_TEMPLATE_SCRIPT = $(TEST_SRCDIR)/prsimckpt-template.prsimrc
PRSIMCKPT_LOAD_TEMPLATE_SCRIPT = $(TEST_SRCDIR)/prsimckpt-load-template.prsimrc

NO_OP_SCRIPT = test -f $< && test -f $@

.prsimrc.prsimckpt-outdump:
	@obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
	ckpt=`$(ECHO) $@ | $(SED) 's/-outdump$$//g'` ; \
	$(ECHO) "checkpointing: $(HACKT_PRSIM_EXE) -b -I$(srcdir) $$obj" ; \
	$(CAT) $(PRSIMCKPT_TEMPLATE_SCRIPT) | \
	  $(SED) -e 's|SOURCE|$<|g' -e 's|CHECKPOINT|'"$$ckpt"'|g' | \
	  $(HACKT_PRSIM_EXE) -b -I$(srcdir) "$$obj" 2>&1 | \
	  $(SED) '/DELETE FROM HERE/,/DELETE TO HERE/d' > $@

# no-op: simultaneously produced target
.prsimckpt-outdump.prsimckpt:
	@$(NO_OP_SCRIPT)

#	rc=$(srcdir)/`$(ECHO) $@ | $(SED) 's/\.prsim.*$$/.prsimrc/g'` ; \
#	obj=`$(CAT) "$$rc" | $(EXTRACT_HACO_PIPE)`
PRSIM_CHECKPOINT_DUMP_SCRIPT = $(HACKT_PRSIM_EXE) -d $< > $@

.prsimckpt.prsimckpt-dump:
	$(PRSIM_CHECKPOINT_DUMP_SCRIPT)

.prsimckpt.prsimckpt-indump:
	@rc=$(srcdir)/`$(ECHO) $< | $(SED) 's/\.prsimckpt$$/.prsimrc/g'` ; \
	obj=`$(CAT) "$$rc" | $(EXTRACT_HACO_PIPE)` ; \
	ckpt=`$(ECHO) $@ | $(SED) 's/-indump$$/-dupe/g'` ; \
	$(ECHO) "loading checkpoint: $(HACKT_PRSIM_EXE) -b -I$(srcdir) $$obj" ; \
	$(CAT) $(PRSIMCKPT_LOAD_TEMPLATE_SCRIPT) | \
	  $(SED) -e 's|LOAD|$<|g' -e 's|SAVE|'"$$ckpt"'|g' | \
	  $(HACKT_PRSIM_EXE) -b -I$(srcdir) "$$obj" > $@ 2>&1

# no-op: simultaneously produced target
.prsimckpt-indump.prsimckpt-dupe:
	@$(NO_OP_SCRIPT)

.prsimckpt-dupe.prsimckpt-dupe-dump:
	$(PRSIM_CHECKPOINT_DUMP_SCRIPT)

.prsimckpt-outdump.prsimckpt-diff:
	@expect=`$(ECHO) $@ | $(SED) 's/\.prsimckpt-diff$$/.prsimckpt-indump/g'` ; \
	if test -f "$$expect" ; then \
	  $(ECHO) "$(DIFF) -u $$expect $<" ; \
	  $(DIFF) -u "$$expect" $< > $@ 2>&1 ; \
	  ca=`$(ECHO) $@ | $(SED) 's/-diff$$//g'` ; \
	  cb=`$(ECHO) $@ | $(SED) 's/-diff$$/-dupe/g'` ; \
	  if test -s $@ ; then \
	    $(ECHO) "$@ is non-empty!" ; \
	  elif $(DIFF) -q "$$ca" "$$cb" ; then : ; \
	  else $(MAKE) "$$ca"-dump "$$cb"-dump && \
	    $(DIFF) -u "$$ca"-dump "$$cb"-dump > $@ ; \
	    $(ECHO) "$@ is non-empty! (checkpoint binaries differ)" ; \
	  fi ; \
	else $(ECHO) "Missing $$expect." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsimckpt-diff.prsimckpttest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.prsimckpttest:
	@$(DUMMY_TEST_SCRIPT)

prsimckpttest.autodepend:
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsimckpt-diff: " $$1 ".prsimckpt-indump"; }' > $@ ; \
	$(TOUCH) $@

-include prsimckpttest.autodepend

# .prsimrc.prsimopttest:
# 	@$(ECHO) "#!$(SHELL)" > $@ ; \
# 	$(ECHO) "# \"$@\"" >> $@ ; \
# 	obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
# 	$(ECHO) "$(HACKT_PRSIM_OPT_TEST_SH) \"$(HACKT_PRSIM_EXE) -b -I$(srcdir)\" $$obj $<" >> $@ ; \
# 	$(CHMOD) +x $@

PRSIMOPT_TEMPLATE_SCRIPT = $(TEST_SRCDIR)/prsimopt-template.prsimrc
PRSIMOPT_FLAG = -O1

.prsimrc.prsimckpt-O1-err:
	@obj=`$(CAT) $< | $(EXTRACT_HACO_PIPE)` ; \
	ckpt=`$(ECHO) $@ | $(SED) 's/-err$$//g'` ; \
	$(ECHO) "checkpointing: $(HACKT_PRSIM_EXE) -b -I$(srcdir) $(PRSIMOPT_FLAG) $$obj" ; \
	$(CAT) $(PRSIMOPT_TEMPLATE_SCRIPT) | \
	  $(SED) -e 's|SOURCE|$<|g' -e 's|CHECKPOINT|'"$$ckpt"'|g' | \
	  $(HACKT_PRSIM_EXE) -b -I$(srcdir) $(PRSIMOPT_FLAG) "$$obj" > $@ 2>&1

# no-op: simultaneously produced target
.prsimckpt-O1-err.prsimckpt-O1:
	@$(NO_OP_SCRIPT)

# also depends on .prsimckpt
# consider looking at hexdump too
.prsimckpt-O1.prsimopt-diff:
	@unopt=`$(ECHO) $< | $(SED) 's/-O1$$//g'` ; \
	if test -f "$$unopt" ; then \
	  if $(DIFF) -q "$$unopt" $< ; then \
	    $(RM) $@ ; \
	  else $(MAKE) $<-dump "$$unopt"-dump && \
	    $(DIFF) -u $<-dump "$$unopt"-dump > $@ ; \
	    $(ECHO) "$@ is non-empty! (checkpoint binaries differ)" ; \
	  fi ; \
	else $(ECHO) "Missing $$unopt." | $(TEE) $@ ; \
	fi ; \
	$(TOUCH) $@

.prsimopt-diff.prsimopttest:
	@$(DEFAULT_DIFF_TEST_SCRIPT)

.prsimopttest:
	@$(DUMMY_TEST_SCRIPT)

prsimopttest.autodepend:
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES)" | \
	  $(SPACESTONEWLINE) | $(SORT) -u | \
	  $(AWK) '{print $$1 ".prsimopt-diff: " $$1 ".prsimckpt"; }' > $@ ; \
	$(TOUCH) $@

-include prsimopttest.autodepend

BOGUS_TESTS = .hacktcmpltest .hacktcmplwarntest .hacktcmplfailtest \
	.hacktobjtest .hacktunrolltest .hacktunrollfailtest \
	.hacktcreatefromhacotest .hacktcreatetest .hacktcreatefailtest \
	.hacktallocfromhacotest .hacktalloctest .hacktallocfailtest \
	.hacktcflattest .hacktprsdottest \
	.prsimtest .prsimfailtest .prsimckpttest .prsimopttest

BOGUS_TARGETS = .hac .unrollstderr .createstderr .allocstderr \
	.hac .hac.hacktcmpltest .expect-prs \
	$(BOGUS_TESTS)

CLEANFILES += $(BOGUS_TARGETS)
DISTHOOK_CLEANFILES += $(BOGUS_TARGETS)

CHECK_SUMMARIES = compilediffs compilewarndiffs compilefaildiffs \
	objdiffs unrolldiffs unrollfaildiffs creatediffs createfaildiffs \
	allocdiffs allocfaildiffs \
	unrolldiffs.noindex creatediffs.noindex allocdiffs.noindex \
	prsdiffs prsdiffs.sort prsimexprdiffs \
	prsseudiffs prsseudiffs.sort sprsdiffs sprsdiffs.sort \
	createfromhacodiffs allocfromhacodiffs \
	prsimrcdiffs prsimrcfaildiffs prsimckptdiffs prsimoptdiffs
# need prs summaries? nah...

compilediffs: force
	-$(CAT) *.diff > $@

compilewarndiffs: force
	-$(CAT) *.compilewarndiff > $@

compilefaildiffs: force
	-$(CAT) *.compilefaildiff > $@

objdiffs: force
	-$(CAT) *.objdiff > $@

unrolldiffs: force
	-$(CAT) *.unrolldiff > $@

unrollfaildiffs: force
	-$(CAT) *.unrollfaildiff > $@

creatediffs: force
	-$(CAT) *.creatediff > $@

createfaildiffs: force
	-$(CAT) *.createfaildiff > $@

createfromhacodiffs: force
	-$(CAT) *.create-from-haco-diff > $@

# this now includes 3-way differences
allocfromhacodiffs: force
	-$(CAT) *.alloc-from-haco-diff > $@

allocdiffs: force
	-$(CAT) *.allocdiff > $@

allocfaildiffs: force
	-$(CAT) *.allocfaildiff > $@

prsdiffs: force
	-$(CAT) *.prsdiff > $@

prsseudiffs: force
	-$(CAT) *.prsseu-diff > $@

sprsdiffs: force
	-$(CAT) *.sprsdiff > $@

unrolldiffs.noindex: force
	-$(CAT) *.unrolldiff.noindex > $@

creatediffs.noindex: force
	-$(CAT) *.creatediff.noindex > $@

allocdiffs.noindex: force
	-$(CAT) *.allocdiff.noindex > $@

prsdiffs.sort: force
	-$(CAT) *.prsdiff.sort > $@

prsseudiffs.sort: force
	-$(CAT) *.prsseu-diff.sort > $@

prsimrcdiffs: force
	-$(CAT) *.prsimrc-diff > $@

prsimrcfaildiffs: force
	-$(CAT) *.prsimrcfail-diff > $@

prsimckptdiffs: force
	-$(CAT) *.prsimckpt-diff > $@

prsimoptdiffs: force
	-$(CAT) *.prsimopt-diff > $@

prsimexprdiffs: force
	-$(CAT) *.prsimexprdiff > $@

sprsdiffs.sort: force
	-$(CAT) *.sprsdiff.sort > $@

check-summaries: $(CHECK_SUMMARIES)
	-@ls -l $(CHECK_SUMMARIES)

HACKT_ALLOC_TEST_SUBJECTS = \
	$(HACKT_ALLOC_TEST_PASSES) \
	$(HACKT_ALLOC_TEST_FAILURES)

HACKT_CFLAT_LVS_TEST_SUBJECTS = \
	$(HACKT_CFLAT_LVS_TEST_PASSES) \
	$(HACKT_CFLAT_LVS_TEST_FAILURES)

HACKT_PRSIMRC_TEST_SCRIPTS_BASES = \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES)

# must be previously defined to use +=
# assuming HACKT_OBJ_TEST_SUBJECTS is subset of HACKT_PARSE_TEST_SUBJECTS
srcdir_EXTRA_DIST += $(HACKT_PARSE_TEST_SUBJECTS:=.hac) \
	$(HACKT_PARSE_TEST_FAILURES:=.stderr) \
	$(HACKT_PARSE_TEST_WARNINGS:=.stderr) \
	$(BISON_OUTPUTS:=.stderr.bison) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrollstderr) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createstderr) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocstderr) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.hac) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.expect-lvsprs) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.expect-prsseu) \
	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.expect-sprs) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.expect-prsimexpr) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.hac) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimrc) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimrc-expect)

# this contains empty files to be removed, listed in EMPTY_CFLAT_PRS
EXTRA_DIST += $(HACKT_CFLAT_TEST_SUBJECTS:=.expect-prs)

# all alloc tests and prsimrc tests are candidates for prs-dot tests
HACKT_PRS_DOT_TEST_SUBJECTS =
HACKT_PRS_DOT_TEST_SUBJECTS += $(HACKT_ALLOC_TEST_PASSES)
HACKT_PRS_DOT_TEST_SUBJECTS += $(HACKT_PRSIMRC_TEST_PASSES)

# TESTS += $(HACKT_PARSE_TEST_SUBJECTS:=.hacktcmpltest)
TESTS += $(HACKT_PARSE_TEST_PASSES:=.hacktcmpltest) \
	$(HACKT_PARSE_TEST_WARNINGS:=.hacktcmplwarntest) \
	$(HACKT_PARSE_TEST_FAILURES:=.hacktcmplfailtest) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.hacktobjtest) \
	$(HACKT_UNROLL_TEST_PASSES:=.hacktunrolltest) \
	$(HACKT_UNROLL_TEST_FAILURES:=.hacktunrollfailtest) \
	$(HACKT_CREATE_TEST_PASSES:=.hacktcreatetest) \
	$(HACKT_CREATE_TEST_FAILURES:=.hacktcreatefailtest) \
	$(HACKT_CREATE_TEST_PASSES:=.hacktcreatefromhacotest) \
	$(HACKT_ALLOC_TEST_PASSES:=.hacktalloctest) \
	$(HACKT_ALLOC_TEST_FAILURES:=.hacktallocfailtest) \
	$(HACKT_ALLOC_TEST_PASSES:=.hacktallocfromhacotest) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.hacktcflattest) \
	$(HACKT_CFLAT_LVS_TEST_PASSES:=.hacktcflatlvstest) \
	$(HACKT_CFLAT_LVS_TEST_FAILURES:=.hacktcflatlvsfailtest) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.hacktcflatseutest) \
	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.hacktsprstest) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.hacktprsimexprtest) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES:=.prsimtest) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES:=.prsimfailtest) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpttest) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimopttest) \
	$(HACKT_PRS_DOT_TEST_SUBJECTS:=.hacktprsdottest)
# end temporary quarantine

HAC_OBJECT_TARGETS = $(HACKT_PARSE_TEST_SUBJECTS:=.haco) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.haco-u) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.haco) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.haco-u) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.haco-a)

# build all tests, but don't run the resulting test scripts
build-check: \
	$(HACKT_PARSE_TEST_PASSES:=.haco) \
	$(HACKT_PARSE_TEST_WARNINGS:=.haco) \
	$(HACKT_PARSE_TEST_WARNINGS:=.compiledump) \
	$(HACKT_PARSE_TEST_WARNINGS:=.compiledump-filter) \
	$(HACKT_PARSE_TEST_WARNINGS:=.compilewarndiff) \
	$(HACKT_PARSE_TEST_FAILURES:=.compiledump) \
	$(HACKT_PARSE_TEST_FAILURES:=.compiledump-filter) \
	$(HACKT_PARSE_TEST_FAILURES:=.compilefaildiff) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump-filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump-filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.compileobjdiff) \
	$(HACKT_UNROLL_TEST_PASSES:=.haco-u) \
	$(HACKT_UNROLL_TEST_PASSES:=.unrolldump) \
	$(HACKT_UNROLL_TEST_PASSES:=.unrolldump-filter) \
	$(HACKT_UNROLL_TEST_PASSES:=.unrolldiff) \
	$(HACKT_UNROLL_TEST_FAILURES:=.unrollfaildump) \
	$(HACKT_UNROLL_TEST_FAILURES:=.unrollfaildiff) \
	$(HACKT_CREATE_TEST_PASSES:=.haco-c) \
	$(HACKT_CREATE_TEST_PASSES:=.createdump) \
	$(HACKT_CREATE_TEST_PASSES:=.createdump-filter) \
	$(HACKT_CREATE_TEST_PASSES:=.creatediff) \
	$(HACKT_CREATE_TEST_FAILURES:=.createfaildump) \
	$(HACKT_CREATE_TEST_FAILURES:=.createfaildiff) \
	$(HACKT_CREATE_TEST_PASSES:=.haco-c-from-haco) \
	$(HACKT_CREATE_TEST_PASSES:=.create-from-haco-dump) \
	$(HACKT_CREATE_TEST_PASSES:=.create-from-haco-dump-filter) \
	$(HACKT_CREATE_TEST_PASSES:=.create-from-haco-diff) \
	$(HACKT_ALLOC_TEST_PASSES:=.haco-a) \
	$(HACKT_ALLOC_TEST_PASSES:=.allocdump) \
	$(HACKT_ALLOC_TEST_PASSES:=.allocdump-filter) \
	$(HACKT_ALLOC_TEST_PASSES:=.allocdiff) \
	$(HACKT_ALLOC_TEST_FAILURES:=.allocfaildump) \
	$(HACKT_ALLOC_TEST_FAILURES:=.allocfaildiff) \
	$(HACKT_ALLOC_TEST_PASSES:=.haco-a-from-haco) \
	$(HACKT_ALLOC_TEST_PASSES:=.alloc-from-haco-dump) \
	$(HACKT_ALLOC_TEST_PASSES:=.alloc-from-haco-dump-filter) \
	$(HACKT_ALLOC_TEST_PASSES:=.alloc-from-haco-diff) \
	$(HACKT_ALLOC_TEST_PASSES:=.haco-a-from-u) \
	$(HACKT_ALLOC_TEST_PASSES:=.alloc-from-u-dump) \
	$(HACKT_ALLOC_TEST_PASSES:=.alloc-from-u-dump-filter) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prs) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prsdiff) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseu) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseudiff) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.haco) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.haco-u) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_CFLAT_LVS_TEST_PASSES:=.lvsprs) \
	$(HACKT_CFLAT_LVS_TEST_PASSES:=.lvsprsdiff) \
	$(HACKT_CFLAT_LVS_TEST_FAILURES:=.lvsfail) \
	$(HACKT_CFLAT_LVS_TEST_FAILURES:=.lvsfaildiff) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES:=.prsimrc-out) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES:=.prsimrc-out-filter) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES:=.prsimrc-diff) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES:=.prsimrcfail-out) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES:=.prsimrcfail-out-filter) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES:=.prsimrcfail-diff) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexpr) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexprdiff) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpt) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpt-outdump) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpt-dupe) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpt-indump) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpt-diff) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimckpt) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimckpt-O1-err) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimckpt-O1) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimopt-diff) \
	$(HACKT_PRS_DOT_TEST_SUBJECTS:=.prsimexpr-O1) \
	$(HACKT_PRS_DOT_TEST_SUBJECTS:=.prs-dot-O1) \
	$(TESTS)

# executable dependence: if executable is more recent, also rebuild
$(HAC_OBJECT_TARGETS): $(HACKT_EXE)

HACKT_PARSE_FAIL_DUMPS = $(HACKT_PARSE_TEST_FAILURES:=.compiledump)
$(HACKT_PARSE_FAIL_DUMPS): $(HACKT_EXE)

# source dependencies
test.autodepend: Makefile
	@$(ECHO) "Generating dependencies $@" ; \
	$(ECHO) "$(HACKT_PARSE_TEST_PASSES) $(HACKT_PRSIMRC_TEST_SUBJECTS)" | \
		$(SPACESTONEWLINE) | $(SORT) -u | \
		$(AWK) '{print "-include " $$1 ".depend"; }' > $@ ; \
	$(TOUCH) $@

-include test.autodepend

AUTODEPENDS = test.autodepend compilewarntest.autodepend \
	compilefailtest.autodepend compileobjdiff.autodepend \
	unrolltest.autodepend unrollfailtest.autodepend \
	createtest.autodepend createfailtest.autodepend \
	alloctest.autodepend allocfailtest.autodepend
	

DISTCLEANFILES += $(AUTODEPENDS)

EMPTY_CFLAT_PRS = $(EMPTY_CFLAT_PRS_TESTS:=.expect-prs)

clean-empty-cflat-prs:
	-test -z "$(EMPTY_CFLAT_PRS)" || $(RM) $(EMPTY_CFLAT_PRS)

# need a bogus dependency to make it work... ?
$(EMPTY_CFLAT_PRS): Makefile
	@$(TOUCH) $@

ALL_PRSIMEXPR_DOT = $(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prs-dot) 
ALL_PRS_DOT_PS = $(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prs-dot-ps) 

all-prs-dot: $(ALL_PRSIMEXPR_DOT)

all-prs-dot-ps: $(ALL_PRS_DOT_PS)

clean-prs-dot:
	$(RM) $(ALL_PRSIMEXPR_DOT)

clean-prs-dot-ps:
	$(RM) $(ALL_PRS_DOT_PS)

# echo-style Makefile debugging
echo-tests: force
	@$(ECHO) $(TESTS)

echo-compile-passes: force
	@$(ECHO) $(HACKT_PARSE_TEST_PASSES)

echo-compile-warnings: force
	@$(ECHO) $(HACKT_PARSE_TEST_WARNINGS)

echo-compile-failures: force
	@$(ECHO) $(HACKT_PARSE_TEST_FAILURES)

echo-bison-outputs: force
	@$(ECHO) $(BISON_OUTPUTS)

echo-empty-cflat-prs: force
	@$(ECHO) $(EMPTY_CFLAT_PRS)

echo-parse-tests: force
	@$(ECHO) $(HACKT_PARSE_TEST_SUBJECTS)

echo-unroll-passes: force
	@$(ECHO) $(HACKT_UNROLL_TEST_PASSES)

echo-unroll-failures: force
	@$(ECHO) $(HACKT_UNROLL_TEST_FAILURES)

echo-unroll-tests: force
	@$(ECHO) $(HACKT_UNROLL_TEST_SUBJECTS)

echo-create-passes: force
	@$(ECHO) $(HACKT_CREATE_TEST_PASSES)

echo-create-failures: force
	@$(ECHO) $(HACKT_CREATE_TEST_FAILURES)

echo-create-tests: force
	@$(ECHO) $(HACKT_CREATE_TEST_SUBJECTS)

echo-alloc-passes: force
	@$(ECHO) $(HACKT_ALLOC_TEST_PASSES)

echo-alloc-failures: force
	@$(ECHO) $(HACKT_ALLOC_TEST_FAILURES)

echo-alloc-tests: force
	@$(ECHO) $(HACKT_ALLOC_TEST_SUBJECTS)

echo-cflat-tests: force
	@$(ECHO) $(HACKT_CFLAT_TEST_SUBJECTS)

echo-cflat-lvs-passes: force
	@$(ECHO) $(HACKT_CFLAT_LVS_TEST_PASSES)

echo-cflat-lvs-failures: force
	@$(ECHO) $(HACKT_CFLAT_LVS_TEST_FAILURES)

echo-cflat-lvs-tests: force
	@$(ECHO) $(HACKT_CFLAT_LVS_TEST_SUBJECTS)

echo-cflat-sprs-tests: force
	@$(ECHO) $(HACKT_CFLAT_SPRS_TEST_SUBJECTS)

echo-prsimexpr-tests: force
	@$(ECHO) $(HACKT_PRSIMEXPR_TEST_SUBJECTS)

echo-prsimrc-passes: force
	@$(ECHO) $(HACKT_PRSIMRC_TEST_SCRIPTS_PASSES)

echo-prsimrc-failures: force
	@$(ECHO) $(HACKT_PRSIMRC_TEST_SCRIPTS_FAILURES)

echo-prsimrc-tests: force
	@$(ECHO) $(HACKT_PRSIMRC_TEST_SCRIPTS_BASES)

echo-prsimckpt-tests: force
	@$(ECHO) $(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES)

echo-prsimopt-tests: force
	@$(ECHO) $(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES)

# filter-out is GNUMake feature
#	$($(filter-out $(HACKT_PARSE_TEST_PASSES), $(HACKT_PARSE_TEST_SUBJECTS)):=.stderr)

# must be previously defined
# CLEANFILES += $(TESTS)
# removed in favor of using pattern removes, for the sake of shortening
# shell commands' lengths, as some weaker shells have trouble with long cmds.
CLEANFILES += $(CHECK_SUMMARIES) \
	$(EMPTY_CFLAT_PRS)

# just using pattern to delete generated files from now on
# running into command-line length limits on various platforms
# TODO: either remove this or update it with new tests
EXPLICIT_CLEANFILES = \
	$(HACKT_PARSE_TEST_SUBJECTS:=.diff) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.test) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.test.filter) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.stderr.filter) \
	$(BISON_OUTPUTS:=.stderr.bison.filter) \
	$(BISON_OUTPUTS:=.bison.diff) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump.filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump.filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.haco) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.objdiff) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.haco-u) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldump) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldump.filter) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldiff) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump.filter) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.creatediff) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdump) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdump.filter) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdiff) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prs) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prsdiff) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.lvsprs) \
	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.lvsprsdiff) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseu) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseu-diff) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexpr) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexprdiff) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimtest) \
	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpttest) \
	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimopttest)


DISTCLEANFILES += local.cvsignore

ALL_LOCAL =
if NO_VPATH
ALL_LOCAL += .cvsignore
endif

# HACKT_PARSE_TEST_PASSES_STDERR = $(HACKT_PARSE_TEST_PASSES:=.stderr)

# CLEANFILES += $(HACKT_PARSE_TEST_PASSES_STDERR)

all-local: $(ALL_LOCAL) $(EMPTY_CFLAT_PRS)
#	$(HACKT_PARSE_TEST_PASSES_STDERR) \
#	$(TESTS)

DISTHOOK_CLEANFILES += $(EMPTY_CFLAT_PRS)
# $(HACKT_PARSE_TEST_PASSES_STDERR)

# consider using CLEANFILES
AUTO_IGNORE += local.cvsignore \
	$(EMPTY_CFLAT_PRS) \
	$(CHECK_SUMMARIES)
#	$(HACKT_PARSE_TEST_PASSES_STDERR) \
#	$(HACKT_UNROLL_TEST_SUBJECTS:=.hacktunrolltest) \
#	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatetest) \
#	$(HACKT_ALLOC_TEST_SUBJECTS:=.hacktalloctest) \
#	$(HACKT_CFLAT_TEST_SUBJECTS:=.hacktcflattest) \
#	$(HACKT_CFLAT_LVS_TEST_SUBJECTS:=.hacktcflatlvstest) \
#	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.hacktcflatseutest) \
#	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.hacktcflattest) \
#	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.hacktprsimexprtest) \
#	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimtest) \
#	$(HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES:=.prsimckpttest) \
#	$(HACKT_PRSIM_OPT_TEST_SCRIPTS_BASES:=.prsimopttest)

if NO_VPATH
# we generate all the local.cvsignore's in the test directories
local.cvsignore: $(TEST_SRCDIR)/test.cvsignore
	$(CP) $? $@

# additional dependence
.cvsignore: $(TEST_SRCDIR)/Make.test-tail
endif

# clean tests only
clean-tests: clean-tests-recursive
	-$(RM) $(TESTS)

# doesn't work... consider recursive automake for EXTRA_RECURSIVE_TARGETS
# RECURSIVE_TARGETS += clean-tests-recursive

clean-tests-recursive:
	@for d in $(SUBDIRS) ; do \
		if test $$d != . ; then \
			if test -d $$d ; then \
				$(MAKE) -C $$d clean-tests ; \
			fi ; \
		fi ; \
	done

clean-summaries:
	$(RM) $(CHECK_SUMMARIES)

distclean-depend:
	-$(RM_PATTERN) "*.autodepend"
	-$(RM_PATTERN) "*.depend"

clean-compiletests:
	-$(RM_PATTERN) "*.compiledump"
	-$(RM_PATTERN) "*.compiledump-filter"
	-$(RM_PATTERN) "*.compilewarndiff"
	-$(RM_PATTERN) "*.compilefaildiff"
	-$(RM_PATTERN) "*.test"
	-$(RM_PATTERN) "*.nowarn"
	-$(RM_PATTERN) "*.diff"
	-$(RM_PATTERN) "*.test.filter"
	-$(RM_PATTERN) "*.hacktcmpltest"
	-$(RM_PATTERN) "*.hacktcmplwarntest"
	-$(RM_PATTERN) "*.hacktcmplfailtest"
	-$(RM_PATTERN) "*.stderr.filter"
	-$(RM_PATTERN) "*.stderr.bison.filter"
	-$(RM_PATTERN) "*.bison.diff"

clean-unrolltests:
	-$(RM_PATTERN) "*.hacktobjtest"
	-$(RM_PATTERN) "*.hacktunrolltest"
	-$(RM_PATTERN) "*.hacktunrollfailtest"
	-$(RM_PATTERN) "*.indump"
	-$(RM_PATTERN) "*.outdump"
	-$(RM_PATTERN) "*.objdiff"
	-$(RM_PATTERN) "*.indump-filter"
	-$(RM_PATTERN) "*.outdump-filter"
	-$(RM_PATTERN) "*.compileobjdiff"
	-$(RM_PATTERN) "*.haco"
	-$(RM_PATTERN) "*.haco-dump"
	-$(RM_PATTERN) "*.haco-u"
	-$(RM_PATTERN) "*.haco-u-dump"
	-$(RM_PATTERN) "*.haco-u-fail"
	-$(RM_PATTERN) "*.unrolldiff"
	-$(RM_PATTERN) "*.unrollfaildiff"
	-$(RM_PATTERN) "*.unrolldump-noindex"
	-$(RM_PATTERN) "*.unrolldiff-noindex"
	-$(RM_PATTERN) "*.unrollstderr-noindex"
	-$(RM_PATTERN) "*.unrolldump"
	-$(RM_PATTERN) "*.unrolldump.filter"
	-$(RM_PATTERN) "*.unrolldump-filter"
	-$(RM_PATTERN) "*.unrollfaildump"

clean-createtests:
	-$(RM_PATTERN) "*.hacktcreatetest"
	-$(RM_PATTERN) "*.hacktcreatefailtest"
	-$(RM_PATTERN) "*.hacktcreatefromhacotest"
	-$(RM_PATTERN) "*.haco-c"
	-$(RM_PATTERN) "*.createdump"
	-$(RM_PATTERN) "*.creatediff"
	-$(RM_PATTERN) "*.createfaildump"
	-$(RM_PATTERN) "*.createfaildiff"
	-$(RM_PATTERN) "*.haco-c-dump"
	-$(RM_PATTERN) "*.createdump-filter"
	-$(RM_PATTERN) "*.createdump.filter"
	-$(RM_PATTERN) "*.create-from*"

clean-alloctests:
	-$(RM_PATTERN) "*.hacktalloctest"
	-$(RM_PATTERN) "*.hacktallocfailtest"
	-$(RM_PATTERN) "*.hacktallocfromhacotest"
	-$(RM_PATTERN) "*.haco-a"
	-$(RM_PATTERN) "*.allocdump"
	-$(RM_PATTERN) "*.allocdump-filter"
	-$(RM_PATTERN) "*.allocdump.filter"
	-$(RM_PATTERN) "*.allocfaildump"
	-$(RM_PATTERN) "*.allocdiff"
	-$(RM_PATTERN) "*.allocfaildiff"
	-$(RM_PATTERN) "*.haco-a-dump"
	-$(RM_PATTERN) "*.alloc-from*"
	-$(RM_PATTERN) "*.prsimexpr-O1"
	-$(RM_PATTERN) "*.prs-dot-O1"

clean-cflattests:
	-$(RM_PATTERN) "*.hacktcflattest"
	-$(RM_PATTERN) "*.hacktcflatlvstest"
	-$(RM_PATTERN) "*.hacktcflatlvsfailtest"
	-$(RM_PATTERN) "*.hacktsprstest"
	-$(RM_PATTERN) "*.hacktcflatseutest"
	-$(RM_PATTERN) "*.hacktprsimexprtest"
	-$(RM_PATTERN) "*.hacktprsdottest"
	-$(RM_PATTERN) "*.prs"
	-$(RM_PATTERN) "*.prsdiff"
	-$(RM_PATTERN) "*.prsdiff.sort"
	-$(RM_PATTERN) "*.lvssprs"
	-$(RM_PATTERN) "*.lvsprs"
	-$(RM_PATTERN) "*.lvsprsdiff"
	-$(RM_PATTERN) "*.lvsprsdiff.sort"
	-$(RM_PATTERN) "*.lvsfail"
	-$(RM_PATTERN) "*.lvsfaildiff"
	-$(RM_PATTERN) "*.prsseu"
	-$(RM_PATTERN) "*.prsseudiff"
	-$(RM_PATTERN) "*.prsseu-diff"
	-$(RM_PATTERN) "*.prsimexpr"
	-$(RM_PATTERN) "*.prsimexprdiff"
	-$(RM_PATTERN) "*.prs-dot"
	-$(RM_PATTERN) "*.prs-dot-O1"
	-$(RM_PATTERN) "*.prs-*-ps"
	-$(RM_PATTERN) "*.prs-*-fig"
	-$(RM_PATTERN) "*.prs-*-pdf"
	-$(RM_PATTERN) "*.sprs"
	-$(RM_PATTERN) "*.sprsdiff"
	-$(RM_PATTERN) "*.sprsdiff.sort"

clean-prsimtests:
	-$(RM_PATTERN) "*.prsimtest"
	-$(RM_PATTERN) "*.prsimrc-out"
	-$(RM_PATTERN) "*.prsimrc-out-filter"
	-$(RM_PATTERN) "*.prsimrc-diff"
	-$(RM_PATTERN) "*.prsimfailtest"
	-$(RM_PATTERN) "*.prsimrcfail-out"
	-$(RM_PATTERN) "*.prsimrcfail-out-filter"
	-$(RM_PATTERN) "*.prsimrcfail-diff"
	-$(RM_PATTERN) "*.prsimckpt"
	-$(RM_PATTERN) "*.prsimckpttest"
	-$(RM_PATTERN) "*.prsimckpt-dump"
	-$(RM_PATTERN) "*.prsimckpt-dupe"
	-$(RM_PATTERN) "*.prsimckpt-dupe-dump"
	-$(RM_PATTERN) "*.prsimckpt-outdump"
	-$(RM_PATTERN) "*.prsimckpt-indump"
	-$(RM_PATTERN) "*.prsimckpt-diff"
	-$(RM_PATTERN) "*.prsimopttest"
	-$(RM_PATTERN) "*.prsimckpt-O1"
	-$(RM_PATTERN) "*.prsimckpt-O1-err"
	-$(RM_PATTERN) "*.prsimckpt-O1-dump"
	-$(RM_PATTERN) "*.prsimopt-diff"
	-$(RM_PATTERN) "*.prsimexpr-O1"
	-$(RM_PATTERN) "*.prs-dot-O1"

# automatically removes $(CLEANFILES)
clean-local: clean-summaries clean-compiletests clean-unrolltests \
		clean-createtests clean-alloctests \
		clean-cflattests clean-prsimtests
	-$(RM_PATTERN) "*.core" "core.*"
	-$(RM_PATTERN) "*.test" "*.diff"
	-$(RM_PATTERN) "*.sort"
	-$(RM_PATTERN) "*.noindex"
	-$(RM_PATTERN) "*-from-haco" "*.haco*"
	-$(RM_PATTERN) "*.*-from-*-dump"
	-$(RM_PATTERN) "*.*-from-*-diff"
# repeat some rm's to cover spilling command-line arguments

# really remove these files!
cleaner: clean cleaner-recursive cleaner-local

cleaner-local:
# legacy object files
	-$(RM_PATTERN) "*.artobj" "*.artobjunroll"
	-$(RM_PATTERN) "*.hacktobjcreate" "*.hacktobjalloc"

distclean-local: cleaner-local distclean-depend
	-$(RM_PATTERN) "*.*haco*"

#TODO: use RECURSIVE_TARGET_SCRIPT
cleaner-recursive:
	@subdirs='$(SUBDIRS)'; \
	for d in $$subdirs ; do \
		if test $$d != . ; then \
			if test -d $$d ; then \
				$(MAKE) -C $$d cleaner ; \
			fi ; \
		fi ; \
	done

.PHONY: cleaner cleaner-local cleaner-recursive \
	clean-tests clean-tests-recursive help-test \
	clean-summaries clean-compiletests clean-unrolltests \
	clean-createtests clean-alloctests \
	clean-cflattests clean-prsimtests \
	distclean-depend

help-local: help-test

help-test:
	@$(ECHO) "Test make targets:"
	@$(ECHO) "    cleaner: also cleans *.<ext> files (recursive)"
	@$(ECHO) "    check-summaries: summaries of test difference into patch file"
	@$(ECHO) "	(produces: $(CHECK_SUMMARIES))"
	@$(ECHO) "    echo-*:"
	@$(ECHO) "	hackt: path to the built hackt executable"
	@$(ECHO) "	tests: lists TESTS"
	@$(ECHO) "	parse-tests: lists HACKT_PARSE_TEST_SUBJECTS"
	@$(ECHO) "	unroll-tests: lists HACKT_UNROLL_TEST_SUBJECTS"
	@$(ECHO) "	create-tests: lists HACKT_CREATE_TEST_SUBJECTS"
	@$(ECHO) "	alloc-tests: lists HACKT_ALLOC_TEST_SUBJECTS"
	@$(ECHO) "	cflat-tests: lists HACKT_CFLAT_TEST_SUBJECTS"
	@$(ECHO) "	cflat-lvs-tests: lists HACKT_CFLAT_LVS_TEST_SUBJECTS"
	@$(ECHO) "	cflat-sprs-tests: lists HACKT_CFLAT_SPRS_TEST_SUBJECTS"
	@$(ECHO) "	prsimexpr-tests: lists HACKT_PRSIMEXPR_TEST_SUBJECTS"
	@$(ECHO) "	prsimrc-tests: lists HACKT_PRSIMRC_TEST_SCRIPTS_BASES"
	@$(ECHO) "	prsimckpt-tests: lists HACKT_PRSIM_CKPT_TEST_SCRIPTS_BASES"
	@$(ECHO) "	compile-passes: lists TESTS that pass parsing"
	@$(ECHO) "	bison-outputs: list TESTS whose output is bison-specific"
	@$(ECHO) "	empty-cflat-prs: list of tests whose cflat-output is empty"

include $(top_srcdir)/Make.global
# help: help-test

