# "test/Make.test-tail"
# a template makefile for testing, to be included in recursive invocations
# Include this Makefile at the end of every subdirectoy's Makefile.am.
# The counterpart header Makefile is "test/Make.test-head".
#	$Id: Make.test-tail,v 1.26 2006/04/12 17:45:36 fang Exp $

HACKT_EXE = $(top_builddir)/src/hackt
PARSE_TEST_EXE = $(HACKT_EXE) parse_test
HACKT_COMPILE_EXE = $(HACKT_EXE) compile
HACKT_OBJDUMP_EXE = $(HACKT_EXE) objdump
HACKT_UNROLL_EXE = $(HACKT_EXE) unroll
HACKT_CREATE_EXE = $(HACKT_EXE) create
HACKT_ALLOC_EXE = $(HACKT_EXE) alloc
HACKT_CFLAT_EXE = $(HACKT_EXE) cflat
HACKT_CFLAT_PRSIM_EXE = $(HACKT_CFLAT_EXE) prsim
HACKT_CFLAT_PRSIM_SEU_EXE = $(HACKT_CFLAT_PRSIM_EXE) -f SEU
HACKT_CFLAT_SPRS_EXE = $(HACKT_CFLAT_PRSIM_EXE) -fsizes
HACKT_PRSIM_EXE = $(HACKT_EXE) prsim

# NOTE: these scripts are configure-generated from their .hac files.  
TEST_SRCDIR = $(top_srcdir)/test
TEST_BUILDDIR = $(top_builddir)/test
HACKT_PARSE_TEST_SH = $(TEST_BUILDDIR)/parse-test-expect.sh
HACKT_OBJ_TEST_SH = $(TEST_BUILDDIR)/hackt-obj-diff.sh
HACKT_UNROLL_TEST_SH = $(TEST_BUILDDIR)/hackt-unroll-expect.sh
HACKT_CREATE_TEST_SH = $(TEST_BUILDDIR)/hackt-create-expect.sh
HACKT_CREATE_FROM_HACO_TEST_SH = $(TEST_BUILDDIR)/check-create-consistency.sh
HACKT_ALLOC_TEST_SH = $(TEST_BUILDDIR)/hackt-alloc-expect.sh
HACKT_ALLOC_FROM_HACO_TEST_SH = $(TEST_BUILDDIR)/check-alloc-consistency.sh
HACKT_CFLAT_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-expect.sh
HACKT_CFLAT_SEU_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-seu-expect.sh
HACKT_CFLAT_SPRS_TEST_SH = $(TEST_BUILDDIR)/hackt-cflat-sprs-expect.sh
HACKT_PRSIMEXPR_TEST_SH = $(TEST_BUILDDIR)/hackt-prsim-expr-alloc-expect.sh
HACKT_PRSIMRC_TEST_SH = $(TEST_BUILDDIR)/hackt-prsimrc-expect.sh

HACKT_COMPILE_ERROR_FILTER = $(AWK) \
		-f $(TEST_SRCDIR)/hackt-parse-expect-filter.awk \
		-f $(TEST_SRCDIR)/state_enum_filter.awk \
		-f $(TEST_SRCDIR)/vpath_file_filter.awk
POM_HEADER_FILTER = $(AWK) -f $(TEST_SRCDIR)/POM-header-filter.awk
POM_INDEX_FILTER = $(AWK) -f $(TEST_SRCDIR)/POM-index-filter.awk
HEX_ADDRESS_FILTER = $(SED) -f $(TEST_SRCDIR)/address_filter.sed
ALLOC_FILTER = $(SED) -f $(TEST_SRCDIR)/alloc_filter.sed
HACKT_OBJ_DIFF_FILTER = $(POM_HEADER_FILTER)
ANALYZE_DIFF_AWK = $(AWK) -f $(TEST_SRCDIR)/analyze-dump-diff.awk
PRSIMRC_FILTER_AWK = $(AWK) -f $(TEST_SRCDIR)/prsimrc-filter.awk
PRSIMRC_TIME_FILTER_AWK = $(AWK) -f $(TEST_SRCDIR)/prsimrc-random-time-filter.awk

DEFAULT_OBJDUMP_RULE_ACTION = $(HACKT_OBJDUMP_EXE) $< > $@ 2>&1


.hac.stderr:
	@$(TOUCH) $@

.hac.haco:
	$(HACKT_COMPILE_EXE) -I$(srcdir) $< $@

.hac.outdump:
	$(HACKT_COMPILE_EXE) -d -I$(srcdir) $< > $@ 2>&1

.haco.indump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco.haco-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)


.hac.hacktcmpltest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_PARSE_TEST_SH) "\"$(PARSE_TEST_EXE)\"" $(srcdir) $* \
		"\"$(HACKT_COMPILE_ERROR_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.hac.hacktobjtest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_OBJ_TEST_SH) "\"$(HACKT_COMPILE_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.haco.haco-u:
	$(HACKT_UNROLL_EXE) $< $@

.haco-u.haco-u-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-u.unrolldump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.hac.hacktunrolltest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_UNROLL_TEST_SH) "\"$(HACKT_UNROLL_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" \
		"\"$(ANALYZE_DIFF_AWK)\"" \
		"\"$(POM_INDEX_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.haco-u.haco-c:
	$(HACKT_CREATE_EXE) $< $@

.haco.haco-c-from-haco:
	$(HACKT_CREATE_EXE) $< $@

.haco-c.haco-c-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-c.createdump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.hac.hacktcreatetest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CREATE_TEST_SH) "\"$(HACKT_CREATE_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" \
		"\"$(ANALYZE_DIFF_AWK)\"" \
		"\"$(POM_INDEX_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.hac.hacktcreatefromhacotest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CREATE_FROM_HACO_TEST_SH) "\"$(HACKT_CREATE_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(HACKT_OBJ_DIFF_FILTER)\"" >> $@
	@$(CHMOD) +x $@

.haco-c.haco-a:
	$(HACKT_ALLOC_EXE) $< $@

.haco.haco-a-from-haco:
	$(HACKT_ALLOC_EXE) $< $@

.haco-u.haco-a-from-u:
	$(HACKT_ALLOC_EXE) $< $@

.haco-a.haco-a-dump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.haco-a.allocdump:
	$(DEFAULT_OBJDUMP_RULE_ACTION)

.hac.hacktalloctest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_ALLOC_TEST_SH) "\"$(HACKT_ALLOC_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(ALLOC_FILTER)\"" \
		"\"$(ANALYZE_DIFF_AWK)\"" \
		"\"$(POM_INDEX_FILTER)\"" >> $@
	@$(CHMOD) +x $@

# does a 3-way difference test
.hac.hacktallocfromhacotest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_ALLOC_FROM_HACO_TEST_SH) "\"$(HACKT_ALLOC_EXE)\"" \
		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
		$* "\"$(ALLOC_FILTER)\"" >> $@
	@$(CHMOD) +x $@

# .hac.hacktallocfromunrolltest:
# 	@$(ECHO) "#!$(SHELL)" > $@
# 	@$(ECHO) "# \"$@\"" >> $@
# 	@$(ECHO) $(HACKT_ALLOC_FROM_UNROLL_TEST_SH) "\"$(HACKT_ALLOC_EXE)\"" \
# 		"\"$(HACKT_OBJDUMP_EXE)\"" $(srcdir) \
# 		$* "\"$(ALLOC_FILTER)\"" >> $@
# 	@$(CHMOD) +x $@

.haco-a.prs:
	$(HACKT_CFLAT_PRSIM_EXE) $< > $@

.hac.hacktcflattest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CFLAT_TEST_SH) "\"$(HACKT_CFLAT_PRSIM_EXE)\"" \
		$(srcdir) $* >> $@
	@$(CHMOD) +x $@

.haco-a.prsseu:
	$(HACKT_CFLAT_PRSIM_SEU_EXE) $< > $@

.hac.hacktcflatseutest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CFLAT_SEU_TEST_SH) "\"$(HACKT_CFLAT_PRSIM_SEU_EXE)\"" \
		$(srcdir) $* >> $@
	@$(CHMOD) +x $@

.haco-a.prsimexpr:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-expr-alloc $< > $@

.haco-a.prsimexpr-dot:
	$(HACKT_PRSIM_EXE) -fno-run -fdump-dot-struct $< > $@

if HAVE_DOT
.prsimexpr-dot.prsimexpr-ps:
	$(DOT) -Tps $< -o $@
endif

.hac.hacktprsimexprtest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_PRSIMEXPR_TEST_SH) "\"$(HACKT_PRSIM_EXE)\"" \
		$(srcdir) $* >> $@
	@$(CHMOD) +x $@

.haco-a.sprs:
	$(HACKT_CFLAT_PRSIM_EXE) -fsizes $< > $@

.hac.hacktsprstest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@$(ECHO) $(HACKT_CFLAT_SPRS_TEST_SH) "\"$(HACKT_CFLAT_SPRS_EXE)\"" \
		$(srcdir) $* >> $@
	@$(CHMOD) +x $@

if HAVE_CFLAT
.cast.castprs:
	$(CFLAT) -prsim $< > $@
else
.cast.castprs:
	@$(ECHO) "Sorry, no cflat found in path." ; exit 1
endif

# Each run-commands script should include the command to invoke
# for loading the object, e.g.: hackt prsim foo.haco-a
# This rule should deduce the input object from the source script.  
.prsimrc.prsimtest:
	@$(ECHO) "#!$(SHELL)" > $@
	@$(ECHO) "# \"$@\"" >> $@
	@obj=`$(GREP) ^# $< | $(GREP) @haco@ | $(HEAD) -n1 | \
		$(AWK) '{ntok=split($$0, toks); print toks[ntok]; }' ` ; \
	$(ECHO) "$(HACKT_PRSIMRC_TEST_SH) \"$(HACKT_PRSIM_EXE) -b -I$(srcdir)\" $$obj $<" \
		"\"$(PRSIMRC_FILTER_AWK)\"" \
		"\"$(PRSIMRC_TIME_FILTER_AWK)\"" >> $@
	@$(CHMOD) +x $@

CHECK_SUMMARIES = compilediffs objdiffs unrolldiffs creatediffs allocdiffs \
	unrolldiffs.noindex creatediffs.noindex allocdiffs.noindex \
	prsdiffs prsdiffs.sort prsimexprdiffs \
	prsseudiffs prsseudiffs.sort sprsdiffs sprsdiffs.sort \
	createfromhacodiffs allocfromhacodiffs \
	prsimrcdiffs
# need prs summaries? nah...

compilediffs: force
	-$(CAT) *.diff > $@

objdiffs: force
	-$(CAT) *.objdiff > $@

unrolldiffs: force
	-$(CAT) *.unrolldiff > $@

creatediffs: force
	-$(CAT) *.creatediff > $@

createfromhacodiffs: force
	-$(CAT) *.create-from-haco-diff > $@

allocfromhacodiffs: force
	-$(CAT) *.alloc-from-haco-diff > $@
	-$(CAT) *.alloc-from-haco-u-diff >> $@
	-$(CAT) *.alloc-from-haco-c-from-haco-diff >> $@

allocdiffs: force
	-$(CAT) *.allocdiff > $@

prsdiffs: force
	-$(CAT) *.prsdiff > $@

prsseudiffs: force
	-$(CAT) *.prsseu-diff > $@

sprsdiffs: force
	-$(CAT) *.sprsdiff > $@

unrolldiffs.noindex: force
	-$(CAT) *.unrolldiff.noindex > $@

creatediffs.noindex: force
	-$(CAT) *.creatediff.noindex > $@

allocdiffs.noindex: force
	-$(CAT) *.allocdiff.noindex > $@

prsdiffs.sort: force
	-$(CAT) *.prsdiff.sort > $@

prsseudiffs.sort: force
	-$(CAT) *.prsseu-diff.sort > $@

prsimrcdiffs: force
	-$(CAT) *.prsimrc-diff > $@

prsimexprdiffs: force
	-$(CAT) *.prsimexprdiff > $@

sprsdiffs.sort: force
	-$(CAT) *.sprsdiff.sort > $@

check-summaries: $(CHECK_SUMMARIES)
	-@ls -l $(CHECK_SUMMARIES)

# must be previously defined to use +=
# assuming HACKT_OBJ_TEST_SUBJECTS is subset of HACKT_PARSE_TEST_SUBJECTS
EXTRA_DIST += $(HACKT_PARSE_TEST_SUBJECTS:=.hac) \
	$(HACKT_PARSE_TEST_FAILURES:=.stderr) \
	$(BISON_OUTPUTS:=.stderr.bison) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrollstderr) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createstderr) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocstderr) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.expect-prs) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.expect-prsseu) \
	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.expect-sprs) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.expect-prsimexpr) \
	$(HACKT_PRSIMRC_TEST_SUBJECTS:=.hac) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimrc) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimrc-expect)

TESTS += $(HACKT_PARSE_TEST_SUBJECTS:=.hacktcmpltest) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.hacktobjtest) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.hacktunrolltest) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatetest) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatefromhacotest) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.hacktalloctest) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.hacktallocfromhacotest) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.hacktcflattest) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.hacktcflatseutest) \
	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.hacktsprstest) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.hacktprsimexprtest) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimtest)

EMPTY_CFLAT_PRS = $(EMPTY_CFLAT_PRS_TESTS:=.expect-prs)

clean-empty-cflat-prs:
	-test -z "$(EMPTY_CFLAT_PRS)" || $(RM) $(EMPTY_CFLAT_PRS)

# need a bogus dependency to make it work... ?
$(EMPTY_CFLAT_PRS): Makefile
	@$(TOUCH) $@

ALL_PRSIMEXPR_DOT = $(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexpr-dot) 
ALL_PRSIMEXPR_PS = $(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexpr-ps) 

all-prsimexpr-dot: $(ALL_PRSIMEXPR_DOT)

all-prsimexpr-ps: $(ALL_PRSIMEXPR_PS)

clean-prsimexpr-dot:
	$(RM) $(ALL_PRSIMEXPR_DOT)

clean-prsimexpr-ps:
	$(RM) $(ALL_PRSIMEXPR_PS)

# echo-style Makefile debugging
echo-tests: force
	@$(ECHO) $(TESTS)

echo-compile-passes: force
	@$(ECHO) $(HACKT_PARSE_TEST_PASSES)

echo-bison-outputs: force
	@$(ECHO) $(BISON_OUTPUTS)

echo-empty-cflat-prs: force
	@$(ECHO) $(EMPTY_CFLAT_PRS)

echo-parse-tests: force
	@$(ECHO) $(HACKT_PARSE_TEST_SUBJECTS)

echo-unroll-tests: force
	@$(ECHO) $(HACKT_UNROLL_TEST_SUBJECTS)

echo-create-tests: force
	@$(ECHO) $(HACKT_CREATE_TEST_SUBJECTS)

echo-alloc-tests: force
	@$(ECHO) $(HACKT_ALLOC_TEST_SUBJECTS)

echo-cflat-tests: force
	@$(ECHO) $(HACKT_CFLAT_TEST_SUBJECTS)

echo-cflat-sprs-tests: force
	@$(ECHO) $(HACKT_CFLAT_SPRS_TEST_SUBJECTS)

echo-prsimexpr-tests: force
	@$(ECHO) $(HACKT_PRSIMEXPR_TEST_SUBJECTS)

echo-prsimrc-tests: force
	@$(ECHO) $(HACKT_PRSIMRC_TEST_SCRIPTS_BASES)

# filter-out is GNUMake feature
#	$($(filter-out $(HACKT_PARSE_TEST_PASSES), $(HACKT_PARSE_TEST_SUBJECTS)):=.stderr)

# must be previously defined
CLEANFILES += $(TESTS) $(CHECK_SUMMARIES) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.diff) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.test) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.test.filter) \
	$(HACKT_PARSE_TEST_SUBJECTS:=.stderr.filter) \
	$(HACKT_PARSE_TEST_PASSES:=.stderr) \
	$(BISON_OUTPUTS:=.stderr.bison.filter) \
	$(BISON_OUTPUTS:=.bison.diff) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.outdump.filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.indump.filter) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.haco) \
	$(HACKT_OBJ_TEST_SUBJECTS:=.objdiff) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.haco-u) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldump) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldump.filter) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.unrolldiff) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.haco-c) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.createdump.filter) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.creatediff) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.haco-a) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdump) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdump.filter) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.allocdiff) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prs) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.prsdiff) \
	$(EMPTY_CFLAT_PRS) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseu) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.prsseu-diff) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexpr) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.prsimexprdiff) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimtest)


DISTCLEANFILES += local.cvsignore

all-local: .cvsignore \
	$(HACKT_PARSE_TEST_PASSES:=.stderr) $(TESTS) \
	$(EMPTY_CFLAT_PRS)

# consider using CLEANFILES
AUTO_IGNORE += local.cvsignore \
	$(HACKT_PARSE_TEST_PASSES:=.stderr) \
	$(HACKT_UNROLL_TEST_SUBJECTS:=.hacktunrolltest) \
	$(HACKT_CREATE_TEST_SUBJECTS:=.hacktcreatetest) \
	$(HACKT_ALLOC_TEST_SUBJECTS:=.hacktalloctest) \
	$(HACKT_CFLAT_TEST_SUBJECTS:=.hacktcflattest) \
	$(HACKT_CFLAT_SEU_TEST_SUBJECTS:=.hacktcflatseutest) \
	$(HACKT_CFLAT_SPRS_TEST_SUBJECTS:=.hacktcflattest) \
	$(EMPTY_CFLAT_PRS) \
	$(HACKT_PRSIMEXPR_TEST_SUBJECTS:=.hacktprsimexprtest) \
	$(HACKT_PRSIMRC_TEST_SCRIPTS_BASES:=.prsimtest) \
	$(CHECK_SUMMARIES)

# we generate all the local.cvsignore's in the test directories
local.cvsignore: $(TEST_SRCDIR)/test.cvsignore
	$(CP) $? $@

# additional dependence
.cvsignore: $(TEST_SRCDIR)/Make.test-tail

# clean tests only
clean-tests: clean-tests-recursive
	-$(RM) $(TESTS)

# doesn't work... consider recursive automake for EXTRA_RECURSIVE_TARGETS
# RECURSIVE_TARGETS += clean-tests-recursive

clean-tests-recursive:
	@for d in $(SUBDIRS) ; do \
		if test $$d != . ; then \
			if test -d $$d ; then \
				$(MAKE) -C $$d clean-tests ; \
			fi ; \
		fi ; \
	done

clean-summaries:
	$(RM) $(CHECK_SUMMARIES)


# automatically removes $(CLEANFILES)
clean-local: clean-summaries
	-$(RM) *.core core.*
	-$(RM) *.filter *.diff *.sort *.noindex
	-$(RM) *.hacktcmpltest *.hacktobjtest *.hacktunrolltest
	-$(RM) *.hacktcreatetest *.hacktalloctest *.hacktcflattest
	-$(RM) *.hacktsprstest *.hacktcflatseutest
	-$(RM) *.hacktcreatefromhacotest
	-$(RM) *.hacktprsimexprtest
	-$(RM) *.indump *.outdump *.objdiff
	-$(RM) *.haco *.haco-dump
	-$(RM) *.haco-u *.unrolldump *.unrolldiff *.haco-u-dump
	-$(RM) *.haco-c *.createdump *.creatediff *.haco-c-dump
	-$(RM) *.haco-a *.allocdump *.allocdiff *.haco-a-dump
	-$(RM) *-from-haco *.haco*
	-$(RM) *.*-from-*-dump
	-$(RM) *.*-from-*-diff
	-$(RM) *.create-from*
	-$(RM) *.alloc-from*
	-$(RM) *.prs *.prsdiff
	-$(RM) *.prsseu *.prsseu-diff
	-$(RM) *.prsimexpr *.prsimexprdiff
	-$(RM) *.prsimexpr-dot *.prsimexpr-ps
	-$(RM) *.prsimtest *.prsimrc-out *.prsimrc-out-filter *.prsimrc-diff
	-$(RM) *.sprs *.sprsdiff

# really remove these files!
cleaner: clean cleaner-recursive cleaner-local

cleaner-local:
# legacy object files
	-$(RM) *.artobj *.artobjunroll *.hacktobjcreate *.hacktobjalloc

distclean-local: cleaner-local
	-$(RM) *.*haco*

cleaner-recursive:
	@subdirs='$(SUBDIRS)'; \
	for d in $$subdirs ; do \
		if test $$d != . ; then \
			if test -d $$d ; then \
				$(MAKE) -C $$d cleaner ; \
			fi ; \
		fi ; \
	done

.PHONY: cleaner cleaner-local cleaner-recursive \
	clean-tests clean-tests-recursive help-test

# this cheat is only needed to create auto-generated (empty) distribution files
# dist-hook-missing: $(EXTRA_DIST)
#	@for f in $(EXTRA_DIST); do \
#		if test ! -f $$f ; then \
#			$(TOUCH) $$f ; \
#		fi ; \
#	done

help-local: help-test

help-test:
	@$(ECHO) "Test make targets:"
	@$(ECHO) "    cleaner: also cleans *.<ext> files (recursive)"
	@$(ECHO) "    check-summaries: summaries of test difference into patch file"
	@$(ECHO) "	(produces: $(CHECK_SUMMARIES))"
	@$(ECHO) "    echo-*:"
	@$(ECHO) "	tests: lists TESTS"
	@$(ECHO) "	parse-tests: lists HACKT_PARSE_TEST_SUBJECTS"
	@$(ECHO) "	unroll-tests: lists HACKT_UNROLL_TEST_SUBJECTS"
	@$(ECHO) "	create-tests: lists HACKT_CREATE_TEST_SUBJECTS"
	@$(ECHO) "	alloc-tests: lists HACKT_ALLOC_TEST_SUBJECTS"
	@$(ECHO) "	cflat-tests: lists HACKT_CFLAT_TEST_SUBJECTS"
	@$(ECHO) "	cflat-sprs-tests: lists HACKT_CFLAT_SPRS_TEST_SUBJECTS"
	@$(ECHO) "	prsimexpr-tests: lists HACKT_PRSIMEXPR_TEST_SUBJECTS"
	@$(ECHO) "	prsimrc-tests: lists HACKT_PRSIMRC_TEST_SCRIPTS_BASES"
	@$(ECHO) "	compile-passes: lists TESTS that pass parsing"
	@$(ECHO) "	bison-outputs: list TESTS whose output is bison-specific"
	@$(ECHO) "	empty-cflat-prs: list of tests whose cflat-output is empty"

include $(top_srcdir)/Make.global
# help: help-test

