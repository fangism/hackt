
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	52
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	7	##ADDR##	procdefn	0	#HEAD#	#TAIL#	244
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	15	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	16	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	17	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	18	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	19	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	20	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	21	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	25	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	procdefn	0	#HEAD#	#TAIL#	116
	29	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	30	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	31	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	32	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	33	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	34	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	38	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	39	##ADDR##	footprnt	0	#HEAD#	#TAIL#	334
	40	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	41	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	42	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	44	##ADDR##	procdefn	0	#HEAD#	#TAIL#	116
	45	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	46	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	47	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	48	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	49	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	50	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	51	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	52	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	55	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	56	##ADDR##	PRSrnest	0	#HEAD#	#TAIL#	36
	57	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	58	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	59	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	60	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	62	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	64	##ADDR##	footprnt	0	#HEAD#	#TAIL#	443
	65	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	69	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	70	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	71	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	72	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	73	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	74	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	75	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	76	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	77	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	78	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	79	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	80	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	81	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	82	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	83	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	84	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	85	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	86	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	87	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	88	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	89	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	91	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	92	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	93	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	95	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	96	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	97	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	98	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	99	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	100	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	101	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	104	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	105	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	107	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	108	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	109	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	110	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	111	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	112	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	113	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	114	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	115	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	116	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	117	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	118	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	119	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	120	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	121	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	122	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	123	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	124	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	125	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	126	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	127	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	128	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1698
	129	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	130	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	131	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	132	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	133	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	134	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	135	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	136	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	137	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	138	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	139	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	140	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	141	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	142	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	143	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	144	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	145	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	146	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	147	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	148	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	149	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	150	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	151	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	152	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	153	##ADDR##	footprnt	0	#HEAD#	#TAIL#	708
	154	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	155	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  5 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    foo = process-definition (defined) foo(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        bool<> in
      )
      In definition "foo", we have: {
      Instances:
        !GND = bool<> foo::!GND
        !Vdd = bool<> foo::!Vdd
        a = inv<> foo::a
        b = inv<> foo::b
        c = inv<> foo::c
        d = inv<> foo::d
        d2 = inv<> foo::d2
        e = inv<> foo::e
        f = inv<> foo::f
        f2 = inv<> foo::f2
        g = globals<> foo::g
        h = inv<> foo::h
        in = bool<> foo::in
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          bool<> in
        )
        inv<> a
        a ( , , in, );
        inv<> b
        b ( , , in, );
        inv<> c
        c ( , , in, );
        inv<> d
        d $( , g.GND_1);
        d ( , , in, );
        inv<> d2
        d2 $( , g.GND_2);
        d2 ( , , in, );
        inv<> e
        e $( , g.GND_1);
        e ( , , in, );
        inv<> f
        f $(g.Vdd_1, );
        f ( , , in, );
        inv<> f2
        f2 $(g.Vdd_1, );
        f2 ( , , in, );
        inv<> h
        h $(g.Vdd_2, g.GND_2);
        h ( , , in, );
      footprint: {
        !GND = bool^0 = foo<>::!GND (5) 
        !Vdd = bool^0 = foo<>::!Vdd (6) 
        a = process inv<>^0 = foo<>::a (2) (
          !GND = bool^0 = foo<>::!GND (5) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::a.y (8) 
        )
        b = process inv<>^0 = foo<>::b (3) (
          !GND = bool^0 = foo<>::!GND (5) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::b.y (9) 
        )
        c = process inv<>^0 = foo<>::c (4) (
          !GND = bool^0 = foo<>::!GND (5) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::c.y (10) 
        )
        d = process inv<>^0 = foo<>::d (5) (
          !GND = bool^0 = foo<>::g.GND_1 (2) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::d.y (11) 
        )
        d2 = process inv<>^0 = foo<>::d2 (6) (
          !GND = bool^0 = foo<>::g.GND_2 (4) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::d2.y (12) 
        )
        e = process inv<>^0 = foo<>::e (7) (
          !GND = bool^0 = foo<>::g.GND_1 (2) 
          !Vdd = bool^0 = foo<>::!Vdd (6) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::e.y (13) 
        )
        f = process inv<>^0 = foo<>::f (8) (
          !GND = bool^0 = foo<>::!GND (5) 
          !Vdd = bool^0 = foo<>::g.Vdd_1 (1) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::f.y (14) 
        )
        f2 = process inv<>^0 = foo<>::f2 (9) (
          !GND = bool^0 = foo<>::!GND (5) 
          !Vdd = bool^0 = foo<>::g.Vdd_1 (1) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::f2.y (15) 
        )
        g = process globals<>^0 = foo<>::g (1) (
          Vdd_1 = bool^0 = foo<>::g.Vdd_1 (1) 
          GND_1 = bool^0 = foo<>::g.GND_1 (2) 
          Vdd_2 = bool^0 = foo<>::g.Vdd_2 (3) 
          GND_2 = bool^0 = foo<>::g.GND_2 (4) 
        )
        h = process inv<>^0 = foo<>::h (10) (
          !GND = bool^0 = foo<>::g.GND_2 (4) 
          !Vdd = bool^0 = foo<>::g.Vdd_2 (3) 
          x = bool^0 = foo<>::in (7) 
          y = bool^0 = foo<>::h.y (16) 
        )
        in = bool^0 = foo<>::in (7) 
        Created state:
        process instance pool: (1 ports, 9 local, 0 mapped)
        1	foo<>::g	globals<>
          bool: 1,2,3,4
        2	foo<>::a	inv<>
          bool: 5,6,7,8
        3	foo<>::b	inv<>
          bool: 5,6,7,9
        4	foo<>::c	inv<>
          bool: 5,6,7,10
        5	foo<>::d	inv<>
          bool: 2,6,7,11
        6	foo<>::d2	inv<>
          bool: 4,6,7,12
        7	foo<>::e	inv<>
          bool: 2,6,7,13
        8	foo<>::f	inv<>
          bool: 5,1,7,14
        9	foo<>::f2	inv<>
          bool: 5,1,7,15
        10	foo<>::h	inv<>
          bool: 4,3,7,16
        bool instance pool: (7 ports, 9 local, 0 mapped)
        1	foo<>::g.Vdd_1	
        2	foo<>::g.GND_1	
        3	foo<>::g.Vdd_2	
        4	foo<>::g.GND_2	
        5	foo<>::!GND	
        6	foo<>::!Vdd	
        7	foo<>::in	
        8	foo<>::a.y	
        9	foo<>::b.y	
        10	foo<>::c.y	
        11	foo<>::d.y	
        12	foo<>::d2.y	
        13	foo<>::e.y	
        14	foo<>::f.y	
        15	foo<>::f2.y	
        16	foo<>::h.y	
      }
      }

    globals = process-definition (defined) globals(
        bool<> Vdd_1
        bool<> GND_1
        bool<> Vdd_2
        bool<> GND_2
      )
      In definition "globals", we have: {
      Instances:
        GND_1 = bool<> globals::GND_1
        GND_2 = bool<> globals::GND_2
        Vdd_1 = bool<> globals::Vdd_1
        Vdd_2 = bool<> globals::Vdd_2
      unroll sequence: 
        ports: (
          bool<> Vdd_1
          bool<> GND_1
          bool<> Vdd_2
          bool<> GND_2
        )
      footprint: {
        GND_1 = bool^0 = globals<>::GND_1 (2) 
        GND_2 = bool^0 = globals<>::GND_2 (4) 
        Vdd_1 = bool^0 = globals<>::Vdd_1 (1) 
        Vdd_2 = bool^0 = globals<>::Vdd_2 (3) 
        Created state:
        bool instance pool: (4 ports, 0 local, 0 mapped)
        1	globals<>::Vdd_1	
        2	globals<>::GND_1	
        3	globals<>::Vdd_2	
        4	globals<>::GND_2	
      }
      }

    inv = process-definition (defined) inv(
        bool<> !GND
        bool<> !Vdd
        bool<> x
        bool<> y
      )
      In definition "inv", we have: {
      Instances:
        !GND = bool<> inv::!GND
        !Vdd = bool<> inv::!Vdd
        x = bool<> inv::x
        y = bool<> inv::y
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> x
          bool<> y
        )
      prs:
        {
        x -> y-
        ~x -> y+
        }
      footprint: {
        !GND = bool^0 = inv<>::!GND (1) 
        !Vdd = bool^0 = inv<>::!Vdd (2) 
        x = bool^0 = inv<>::x (3) 
        y = bool^0 = inv<>::y (4) 
        Created state:
        bool instance pool: (4 ports, 0 local, 0 mapped)
        1	inv<>::!GND	
        2	inv<>::!Vdd	
        3	inv<>::x	
        4	inv<>::y	
        resolved prs:
        x -> y-
        ~x -> y+
        rule supply map: (rules, macros, @nodes : Vdd, GND)
        0..1 none none : 2, 1 | 2, 1
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    Z = bool<> Z
    bar = foo<> bar
    g = globals<> g
}

footprint: {
  !GND = bool^0 = !GND (5) 
  !Vdd = bool^0 = !Vdd (6) 
  Z = bool^0 = Z (7) 
  bar = process foo<>^0 = bar (2) (
    !GND = bool^0 = !GND (5) 
    !Vdd = bool^0 = !Vdd (6) 
    g = process globals<>^0 = g (1) (
      Vdd_1 = bool^0 = g.Vdd_1 (1) 
      GND_1 = bool^0 = g.GND_1 (2) 
      Vdd_2 = bool^0 = g.Vdd_2 (3) 
      GND_2 = bool^0 = g.GND_2 (4) 
    )
    in = bool^0 = Z (7) 
  )
  g = process globals<>^0 = g (1) (
    Vdd_1 = bool^0 = g.Vdd_1 (1) 
    GND_1 = bool^0 = g.GND_1 (2) 
    Vdd_2 = bool^0 = g.Vdd_2 (3) 
    GND_2 = bool^0 = g.GND_2 (4) 
  )
  Created state:
  process instance pool: (0 ports, 2 local, 9 mapped)
  1	g	globals<>
    bool: 1,2,3,4
  2	bar	foo<>
    process: 1
    bool: 1,2,3,4,5,6,7
  private sub-process index map:
    (2 -> 0)
    (3 -> 9)
  bool instance pool: (0 ports, 7 local, 9 mapped)
  1	g.Vdd_1	
  2	g.GND_1	
  3	g.Vdd_2	
  4	g.GND_2	
  5	!GND	
  6	!Vdd	
  7	Z	
  private sub-bool index map:
    (2 -> 0)
    (3 -> 9)
}
