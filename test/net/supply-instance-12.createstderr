
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	48
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	156
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	14	##ADDR##	portscop	0	#HEAD#	#TAIL#	36
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	procdefn	0	#HEAD#	#TAIL#	116
	28	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	29	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	30	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	31	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	32	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	33	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	34	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	38	##ADDR##	footprnt	0	#HEAD#	#TAIL#	334
	39	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	40	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	41	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	44	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	45	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	procdefn	0	#HEAD#	#TAIL#	136
	50	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	51	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	52	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	53	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	54	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	55	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	56	##ADDR##	portscop	0	#HEAD#	#TAIL#	32
	57	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	60	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	62	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	63	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	64	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	65	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	66	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	procdefn	0	#HEAD#	#TAIL#	116
	68	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	69	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	70	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	71	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	72	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	73	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	74	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	75	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	76	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	77	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	78	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	79	##ADDR##	PRSrnest	0	#HEAD#	#TAIL#	36
	80	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	81	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	82	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	83	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	84	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	85	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	86	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	87	##ADDR##	footprnt	0	#HEAD#	#TAIL#	443
	88	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	89	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	91	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	92	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	93	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	95	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	96	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	97	##ADDR##	footprnt	0	#HEAD#	#TAIL#	610
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	100	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	101	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	102	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	103	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	104	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	105	##ADDR##	footprnt	0	#HEAD#	#TAIL#	783
	106	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	107	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	108	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	109	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	110	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	111	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	112	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	113	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	114	##ADDR##	footprnt	0	#HEAD#	#TAIL#	494
	115	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  4 definitions
  0 typedefs
  Definitions:
    bar = process-definition (defined) bar(
        bool<> !GND
        bool<> !Vdd
        bool<> myVdd
        bool<> myGND
        bool<> a
        bool<> b
      )
      In definition "bar", we have: {
      Instances:
        !GND = bool<> bar::!GND
        !Vdd = bool<> bar::!Vdd
        a = bool<> bar::a
        b = bool<> bar::b
        f = foo<> bar::f
        g = globals<> bar::g
        myGND = bool<> bar::myGND
        myVdd = bool<> bar::myVdd
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> myVdd
          bool<> myGND
          bool<> a
          bool<> b
        )
        globals<> g
        g.Vdd_2 = myVdd;
        g.GND_2 = myGND;
        foo<> f
        f ( , , g, a, b);
      footprint: {
        !GND = bool^0 = bar<>::!GND (3) 
        !Vdd = bool^0 = bar<>::!Vdd (4) 
        a = bool^0 = bar<>::a (5) 
        b = bool^0 = bar<>::b (6) 
        f = process foo<>^0 = bar<>::f (2) (
          !GND = bool^0 = bar<>::!GND (3) 
          !Vdd = bool^0 = bar<>::!Vdd (4) 
          g = process globals<>^0 = bar<>::g (1) (
            Vdd_1 = bool^0 = bar<>::g.Vdd_1 (7) 
            GND_1 = bool^0 = bar<>::g.GND_1 (8) 
            Vdd_2 = bool^0 = bar<>::myVdd (1) 
            GND_2 = bool^0 = bar<>::myGND (2) 
          )
          in = bool^0 = bar<>::a (5) 
          out = bool^0 = bar<>::b (6) 
        )
        g = process globals<>^0 = bar<>::g (1) (
          Vdd_1 = bool^0 = bar<>::g.Vdd_1 (7) 
          GND_1 = bool^0 = bar<>::g.GND_1 (8) 
          Vdd_2 = bool^0 = bar<>::myVdd (1) 
          GND_2 = bool^0 = bar<>::myGND (2) 
        )
        myGND = bool^0 = bar<>::myGND (2) 
        myVdd = bool^0 = bar<>::myVdd (1) 
        Created state:
        process instance pool: (0 ports, 2 local, 1 mapped)
        1	bar<>::g	globals<>
          bool: 7,8,1,2
        2	bar<>::f	foo<>
          process: 1
          bool: 7,8,1,2,5,6,3,4
        private sub-process index map:
          (2 -> 0)
          (3 -> 1)
        bool instance pool: (6 ports, 2 local, 0 mapped)
        1	bar<>::myVdd	
        2	bar<>::myGND	
        3	bar<>::!GND	
        4	bar<>::!Vdd	
        5	bar<>::a	
        6	bar<>::b	
        7	bar<>::g.Vdd_1	
        8	bar<>::g.GND_1	
      }
      }

    foo = process-definition (defined) foo(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        bool<> in
        bool<> out
      )
      In definition "foo", we have: {
      Instances:
        !GND = bool<> foo::!GND
        !Vdd = bool<> foo::!Vdd
        a = inv<> foo::a
        g = globals<> foo::g
        in = bool<> foo::in
        out = bool<> foo::out
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          bool<> in
          bool<> out
        )
        inv<> a
        a $(g.Vdd_1, g.GND_1);
        a ( , , in, out);
      footprint: {
        !GND = bool^0 = foo<>::!GND (7) 
        !Vdd = bool^0 = foo<>::!Vdd (8) 
        a = process inv<>^0 = foo<>::a (2) (
          !GND = bool^0 = foo<>::g.GND_1 (2) 
          !Vdd = bool^0 = foo<>::g.Vdd_1 (1) 
          x = bool^0 = foo<>::in (5) 
          y = bool^0 = foo<>::out (6) 
        )
        g = process globals<>^0 = foo<>::g (1) (
          Vdd_1 = bool^0 = foo<>::g.Vdd_1 (1) 
          GND_1 = bool^0 = foo<>::g.GND_1 (2) 
          Vdd_2 = bool^0 = foo<>::g.Vdd_2 (3) 
          GND_2 = bool^0 = foo<>::g.GND_2 (4) 
        )
        in = bool^0 = foo<>::in (5) 
        out = bool^0 = foo<>::out (6) 
        Created state:
        process instance pool: (1 ports, 1 local, 0 mapped)
        1	foo<>::g	globals<>
          bool: 1,2,3,4
        2	foo<>::a	inv<>
          bool: 2,1,5,6
        bool instance pool: (8 ports, 0 local, 0 mapped)
        1	foo<>::g.Vdd_1	
        2	foo<>::g.GND_1	
        3	foo<>::g.Vdd_2	
        4	foo<>::g.GND_2	
        5	foo<>::in	
        6	foo<>::out	
        7	foo<>::!GND	
        8	foo<>::!Vdd	
      }
      }

    globals = process-definition (defined) globals(
        bool<> Vdd_1
        bool<> GND_1
        bool<> Vdd_2
        bool<> GND_2
      )
      In definition "globals", we have: {
      Instances:
        GND_1 = bool<> globals::GND_1
        GND_2 = bool<> globals::GND_2
        Vdd_1 = bool<> globals::Vdd_1
        Vdd_2 = bool<> globals::Vdd_2
      unroll sequence: 
        ports: (
          bool<> Vdd_1
          bool<> GND_1
          bool<> Vdd_2
          bool<> GND_2
        )
      footprint: {
        GND_1 = bool^0 = globals<>::GND_1 (2) 
        GND_2 = bool^0 = globals<>::GND_2 (4) 
        Vdd_1 = bool^0 = globals<>::Vdd_1 (1) 
        Vdd_2 = bool^0 = globals<>::Vdd_2 (3) 
        Created state:
        bool instance pool: (4 ports, 0 local, 0 mapped)
        1	globals<>::Vdd_1	
        2	globals<>::GND_1	
        3	globals<>::Vdd_2	
        4	globals<>::GND_2	
      }
      }

    inv = process-definition (defined) inv(
        bool<> !GND
        bool<> !Vdd
        bool<> x
        bool<> y
      )
      In definition "inv", we have: {
      Instances:
        !GND = bool<> inv::!GND
        !Vdd = bool<> inv::!Vdd
        x = bool<> inv::x
        y = bool<> inv::y
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> x
          bool<> y
        )
      prs:
        {
        x -> y-
        ~x -> y+
        }
      footprint: {
        !GND = bool^0 = inv<>::!GND (1) 
        !Vdd = bool^0 = inv<>::!Vdd (2) 
        x = bool^0 = inv<>::x (3) 
        y = bool^0 = inv<>::y (4) 
        Created state:
        bool instance pool: (4 ports, 0 local, 0 mapped)
        1	inv<>::!GND	
        2	inv<>::!Vdd	
        3	inv<>::x	
        4	inv<>::y	
        resolved prs:
        x -> y-
        ~x -> y+
        rule supply map: (rules, macros, @nodes : Vdd, GND)
        0..1 none none : 2, 1 | 2, 1
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    bq = bar<> bq
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  bq = process bar<>^0 = bq (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    myVdd = bool^0 = bq.myVdd (3) 
    myGND = bool^0 = bq.myGND (4) 
    a = bool^0 = bq.a (5) 
    b = bool^0 = bq.b (6) 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 3 mapped)
  1	bq	bar<>
    bool: 3,4,1,2,5,6
  private sub-process index map:
    (1 -> 0)
    (2 -> 3)
  bool instance pool: (0 ports, 6 local, 2 mapped)
  1	!GND	
  2	!Vdd	
  3	bq.myVdd	
  4	bq.myGND	
  5	bq.a	
  6	bq.b	
  private sub-bool index map:
    (1 -> 0)
    (2 -> 2)
}
