
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	144
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	11	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	29
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	14	##ADDR##	portscop	0	#HEAD#	#TAIL#	36
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	procdefn	0	#HEAD#	#TAIL#	116
	28	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	29	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	30	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	31	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	32	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	33	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	34	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	39	##ADDR##	PRSrnest	0	#HEAD#	#TAIL#	28
	40	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	41	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	42	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	45	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	435
	48	##ADDR##	iprtovrd	0	#HEAD#	#TAIL#	24
	49	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	55	##ADDR##	footprnt	0	#HEAD#	#TAIL#	504
	56	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	57	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	60	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	62	##ADDR##	footprnt	0	#HEAD#	#TAIL#	494
	63	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    foo = process-definition (defined) foo(
        bool<> !GND
        bool<> !Vdd
        bool<> myVdd
        bool<> myGND
        bool<> in
        bool<> out
      )
      In definition "foo", we have: {
      Instances:
        !GND = bool<> foo::!GND
        !Vdd = bool<> foo::!Vdd
        a = inv<> foo::a
        in = bool<> foo::in
        myGND = bool<> foo::myGND
        myVdd = bool<> foo::myVdd
        out = bool<> foo::out
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> myVdd
          bool<> myGND
          bool<> in
          bool<> out
        )
        inv<> a
        a $(myVdd, myGND);
        a ( , , in, out);
      footprint: {
        !GND = bool^0 = foo<>::!GND (5) 
        !Vdd = bool^0 = foo<>::!Vdd (6) 
        a = process inv<>^0 = foo<>::a (1) (
          !GND = bool^0 = foo<>::myGND (1) 
          !Vdd = bool^0 = foo<>::myVdd (2) 
          x = bool^0 = foo<>::in (3) 
          y = bool^0 = foo<>::out (4) 
        )
        in = bool^0 = foo<>::in (3) 
        myGND = bool^0 = foo<>::myGND (1) 
        myVdd = bool^0 = foo<>::myVdd (2) 
        out = bool^0 = foo<>::out (4) 
        Created state:
        process instance pool: (0 ports, 1 local, 0 mapped)
        1	foo<>::a	inv<>
          bool: 1,2,3,4
        bool instance pool: (6 ports, 0 local, 0 mapped)
        1	foo<>::myGND	
        2	foo<>::myVdd	
        3	foo<>::in	
        4	foo<>::out	
        5	foo<>::!GND	
        6	foo<>::!Vdd	
      }
      }

    inv = process-definition (defined) inv(
        bool<> !GND
        bool<> !Vdd
        bool<> x
        bool<> y
      )
      In definition "inv", we have: {
      Instances:
        !GND = bool<> inv::!GND
        !Vdd = bool<> inv::!Vdd
        x = bool<> inv::x
        y = bool<> inv::y
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> x
          bool<> y
        )
      prs:
        {
        x -> y-
        ~x -> y+
        }
      footprint: {
        !GND = bool^0 = inv<>::!GND (1) 
        !Vdd = bool^0 = inv<>::!Vdd (2) 
        x = bool^0 = inv<>::x (3) 
        y = bool^0 = inv<>::y (4) 
        Created state:
        bool instance pool: (4 ports, 0 local, 0 mapped)
        1	inv<>::!GND	
        2	inv<>::!Vdd	
        3	inv<>::x	
        4	inv<>::y	
        resolved prs:
        x -> y-
        ~x -> y+
        rule supply map: (rules, macros, @nodes : Vdd, GND)
        0..1 none none : 2, 1
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    bar = foo<> bar
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  bar = process foo<>^0 = bar (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    myVdd = bool^0 = bar.myVdd (3) 
    myGND = bool^0 = bar.myGND (4) 
    in = bool^0 = bar.in (5) 
    out = bool^0 = bar.out (6) 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 1 mapped)
  1	bar	foo<>
    bool: 4,3,5,6,1,2
  private sub-process index map:
    (1 -> 0)
    (2 -> 1)
  bool instance pool: (0 ports, 6 local, 0 mapped)
  1	!GND	
  2	!Vdd	
  3	bar.myVdd	
  4	bar.myGND	
  5	bar.in	
  6	bar.out	
}
