
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	114
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	6	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	7	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	11	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	12	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	13	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	14	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	15	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	18	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	20	##ADDR##	PRSandlp	0	#HEAD#	#TAIL#	20
	21	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	22	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	24	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	25	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	33	##ADDR##	PRSandlp	0	#HEAD#	#TAIL#	20
	34	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	35	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	38	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	42	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	547
	48	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	49	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	50	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	51	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	52	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	54	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	55	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	56	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	57	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	60	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	61	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	footprnt	0	#HEAD#	#TAIL#	681
	64	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    celem = process-definition (defined) celem<
      pint<> N
      >(
        bool<> in[0..N-1]
        bool<> out
      )
      In definition "celem", we have: {
      Parameters:
        N = pint<> celem::N
      Instances:
        in = bool<> celem::in^1
        out = bool<> celem::out
      unroll sequence: 
        bool<> in[0..N-1]
        bool<> out
      prs:
        (&:i:[0..N-1]: in[$i]) -> out-
        (&:i:[0..N-1]: ~in[$i]) -> out+
      footprint collection: {
        <2> {
          N = pint^0 value: 2
          in = bool^1
            {
              [0] = celem::in[0] (2) 
              [1] = celem::in[1] (3) 
            }
          out = bool^0 = celem::out (1) 
          Created state:
          bool instance pool:
          1	celem::out
          2	celem::in[0]
          3	celem::in[1]
          resolved prs:
          in[0] & in[1] -> out-
          ~in[0] & ~in[1] -> out+
        }
      }
      }

  Instances:
    a = celem<2> a
    b = celem<2> b
    z = bool<> z
}

footprint: {
  a = process celem<2>^0 = a (1) (
    in = bool^1
      {
        [0] = a.in[0] (1) 
        [1] = a.in[1] (2) 
      }
    out = bool^0 = z (3) 
  )
  b = process celem<2>^0 = b (2) (
    in = bool^1
      {
        [0] = b.in[0] (4) 
        [1] = b.in[1] (5) 
      }
    out = bool^0 = z (3) 
  )
  z = bool^0 = z (3) 
  Created state:
  process instance pool:
  1	a
  2	b
  bool instance pool:
  1	a.in[0]
  2	a.in[1]
  3	z
  4	b.in[0]
  5	b.in[1]
}
