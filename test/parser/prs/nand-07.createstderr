
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	536
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	5	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	6	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	11	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	12	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	13	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	14	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	15	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	18	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	20	##ADDR##	PRSandlp	0	#HEAD#	#TAIL#	20
	21	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	22	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	24	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	25	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	PRSrloop	0	#HEAD#	#TAIL#	24
	33	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	34	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	37	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	40	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	42	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	68
	48	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	49	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	50	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	51	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	52	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	53	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	54	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	55	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	56	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	68
	57	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    nandN = process-definition (defined) nandN<
      pint<> N
      >(
        bool<> in[0..N-1]
        bool<> _out
      )
      In definition "nandN", we have: {
      Parameters:
        N = pint<> nandN::N
      Instances:
        _out = bool<> nandN::_out
        in = bool<> nandN::in^1
      unroll sequence: 
        bool<> in[0..N-1]
        bool<> _out
      prs:
        (&:i:[0..N-1]: in[$i]) -> _out-
        (:i:[0..N-1]:
          ~in[$i] -> _out+
        )
      footprint collection: {
        <4> {
          N = pint^0 value: 4
          _out = bool^0 = nandN::_out (5) 
          in = bool^1
            {
              0 = nandN::in[0] (1) 
              1 = nandN::in[1] (2) 
              2 = nandN::in[2] (3) 
              3 = nandN::in[3] (4) 
            }
          Created state:
          bool instance pool:
          1	nandN::in[0]
          2	nandN::in[1]
          3	nandN::in[2]
          4	nandN::in[3]
          5	nandN::_out
          resolved prs:
          in[0] & in[1] & in[2] & in[3] -> _out-
          ~in[0] -> _out+
          ~in[1] -> _out+
          ~in[2] -> _out+
          ~in[3] -> _out+
        }
      }
      }

  Instances:
    foo = nandN<4> foo
}

footprint: {
  foo = process nandN<4>^0 = foo (1) (
    in = bool^1
      {
        0 = foo.in[0] (1) 
        1 = foo.in[1] (2) 
        2 = foo.in[2] (3) 
        3 = foo.in[3] (4) 
      }
    _out = bool^0 = foo._out (5) 
  )
  Created state:
  process instance pool:
  1	foo
  bool instance pool:
  1	foo.in[0]
  2	foo.in[1]
  3	foo.in[2]
  4	foo.in[3]
  5	foo._out
}
