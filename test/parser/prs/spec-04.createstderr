
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	124
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	16	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	17	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	23	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	24	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	26	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	28	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	53
	29	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	45
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	footprnt	0	#HEAD#	#TAIL#	518
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	footprnt	0	#HEAD#	#TAIL#	288
	39	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    testing = process-definition (defined) testing(
      )
      In definition "testing", we have: {
      Instances:
        p = bool<> testing::p
        q = bool<> testing::q
        r = bool<> testing::r
        s = bool<> testing::s
      unroll sequence: 
        bool<> p
        bool<> q
        bool<> r
        bool<> s
      prs:
        p & q -> s-
        ~p | ~q -> s+
      spec:
        mk_exclhi(p,q,r)
        mk_exclhi(r,s)
      footprint: {
        p = bool^0 = testing::p (1) 
        q = bool^0 = testing::q (2) 
        r = bool^0 = testing::r (3) 
        s = bool^0 = testing::s (4) 
        Created state:
        bool instance pool:
        1	testing::p
        2	testing::q
        3	testing::r
        4	testing::s
        resolved prs:
        p & q -> s-
        ~p | ~q -> s+
        resolved specs:
        mk_exclhi(p,q,r)
        mk_exclhi(r,s)
      }
      }

  Instances:
    tester = testing<> tester
}

footprint: {
  tester = process testing<>^0 = tester (1) 
  Created state:
  process instance pool:
  1	tester
}
