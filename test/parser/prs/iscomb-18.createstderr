
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	104
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	34
	13	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	14	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	17	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	21	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	23	##ADDR##	footprnt	0	#HEAD#	#TAIL#	355
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	142
	25	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	26	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	27	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	28	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	29	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	30	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	31	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	33	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	34	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	38	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	39	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	40	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	41	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	34
	47	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	34
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	53	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	55	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	56	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	57	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	61	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	63	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	66	##ADDR##	footprnt	0	#HEAD#	#TAIL#	650
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	68	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	69	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	70	##ADDR##	footprnt	0	#HEAD#	#TAIL#	665
	71	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    inv = process-definition (defined) inv(
        bool<> a
        bool<> b
      )
      In definition "inv", we have: {
      Instances:
        a = bool<> inv::a
        b = bool<> inv::b
      unroll sequence: 
        ports: (
          bool<> a
          bool<> b
        )
        a@[autokeeper=0]
      prs:
        a -> b-
        ~a -> b+
      footprint: {
        a = bool^0 = inv<>::a (1) @[ !autokeeper ] 
        b = bool^0 = inv<>::b (2) 
        Created state:
        bool instance pool:
        1	inv<>::a @[ !autokeeper ]
        2	inv<>::b
        resolved prs:
        a -> b-
        ~a -> b+
      }
      }

    multi_inv = process-definition (defined) multi_inv(
        inv<> x[0..3]
        bool<> y
        bool<> z
      )
      In definition "multi_inv", we have: {
      Instances:
        p = bool<> multi_inv::p
        q = bool<> multi_inv::q
        x = inv<> multi_inv::x^1
        y = bool<> multi_inv::y
        z = bool<> multi_inv::z
      unroll sequence: 
        ports: (
          inv<> x[0..3]
          bool<> y
          bool<> z
        )
        bool<> p
        bool<> q
        x[0] (p, q);
        y@[autokeeper=0]
        z@[autokeeper=0]
        y = x[1].a;
        z = x[2].b;
      footprint: {
        p = bool^0 = multi_inv<>::p (1) @[ !autokeeper ] 
        q = bool^0 = multi_inv<>::q (2) 
        x = process inv<>^1
          {
            [0] = multi_inv<>::x[0] (1) (
              a = bool^0 = multi_inv<>::p (1) @[ !autokeeper ] 
              b = bool^0 = multi_inv<>::q (2) 
            )
            [1] = multi_inv<>::x[1] (2) (
              a = bool^0 = multi_inv<>::y (3) @[ !autokeeper ] 
              b = bool^0 = multi_inv<>::x[1].b (4) 
            )
            [2] = multi_inv<>::x[2] (3) (
              a = bool^0 = multi_inv<>::x[2].a (5) @[ !autokeeper ] 
              b = bool^0 = multi_inv<>::z (6) @[ !autokeeper ] 
            )
            [3] = multi_inv<>::x[3] (4) (
              a = bool^0 = multi_inv<>::x[3].a (7) @[ !autokeeper ] 
              b = bool^0 = multi_inv<>::x[3].b (8) 
            )
          }
        y = bool^0 = multi_inv<>::y (3) @[ !autokeeper ] 
        z = bool^0 = multi_inv<>::z (6) @[ !autokeeper ] 
        Created state:
        process instance pool:
        1	multi_inv<>::x[0]
        2	multi_inv<>::x[1]
        3	multi_inv<>::x[2]
        4	multi_inv<>::x[3]
        bool instance pool:
        1	multi_inv<>::p @[ !autokeeper ]
        2	multi_inv<>::q
        3	multi_inv<>::y @[ !autokeeper ]
        4	multi_inv<>::x[1].b
        5	multi_inv<>::x[2].a @[ !autokeeper ]
        6	multi_inv<>::z @[ !autokeeper ]
        7	multi_inv<>::x[3].a @[ !autokeeper ]
        8	multi_inv<>::x[3].b
        bool port aliases:
        3: multi_inv<>::x[1].a = multi_inv<>::y @[ !autokeeper ]
        6: multi_inv<>::x[2].b = multi_inv<>::z @[ !autokeeper ]
      }
      }

  Instances:
    foo = multi_inv<> foo
}

footprint: {
  foo = process multi_inv<>^0 = foo (1) (
    x = process inv<>^1
      {
        [0] = foo.x[0] (2) (
          a = bool^0 = foo.x[0].a (1) @[ !autokeeper ] 
          b = bool^0 = foo.x[0].b (2) 
        )
        [1] = foo.x[1] (3) (
          a = bool^0 = foo.y (3) @[ !autokeeper ] 
          b = bool^0 = foo.x[1].b (4) 
        )
        [2] = foo.x[2] (4) (
          a = bool^0 = foo.x[2].a (5) @[ !autokeeper ] 
          b = bool^0 = foo.z (6) @[ !autokeeper ] 
        )
        [3] = foo.x[3] (5) (
          a = bool^0 = foo.x[3].a (7) @[ !autokeeper ] 
          b = bool^0 = foo.x[3].b (8) 
        )
      }
    y = bool^0 = foo.y (3) @[ !autokeeper ] 
    z = bool^0 = foo.z (6) @[ !autokeeper ] 
  )
  Created state:
  process instance pool:
  1	foo
  2	foo.x[0]
  3	foo.x[1]
  4	foo.x[2]
  5	foo.x[3]
  bool instance pool:
  1	foo.x[0].a @[ !autokeeper ]
  2	foo.x[0].b
  3	foo.y @[ !autokeeper ]
  4	foo.x[1].b
  5	foo.x[2].a @[ !autokeeper ]
  6	foo.z @[ !autokeeper ]
  7	foo.x[3].a @[ !autokeeper ]
  8	foo.x[3].b
}
