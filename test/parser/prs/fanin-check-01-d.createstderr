Warning: node aligner<>::_le has no pull-up nor pull-dn PRS fanin.
Warnings found (1) while creating complete type aligner<>.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	132
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	9	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	13	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	17	##ADDR##	procdefn	0	#HEAD#	#TAIL#	94
	18	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	19	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	22	##ADDR##	footprnt	0	#HEAD#	#TAIL#	280
	23	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	33	##ADDR##	PRSrnest	0	#HEAD#	#TAIL#	36
	34	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	35	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	38	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	40	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	42	##ADDR##	footprnt	0	#HEAD#	#TAIL#	517
	43	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	44	##ADDR##	procdefn	0	#HEAD#	#TAIL#	129
	45	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	46	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	47	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	48	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	49	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	50	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	51	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	52	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	55	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	56	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	59	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	60	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	64	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	65	##ADDR##	PRSrnest	0	#HEAD#	#TAIL#	36
	66	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	67	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	68	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	69	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	71	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	72	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	73	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	20
	74	##ADDR##	footprnt	0	#HEAD#	#TAIL#	517
	75	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	76	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	77	##ADDR##	procdefn	0	#HEAD#	#TAIL#	145
	78	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	79	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	80	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	81	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	82	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	83	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	84	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	85	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	86	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	87	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	88	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	89	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	90	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	91	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	92	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	93	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	95	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	96	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	97	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	98	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	99	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	28
	100	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	101	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	104	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	28
	105	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	107	##ADDR##	footprnt	0	#HEAD#	#TAIL#	680
	108	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	109	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	110	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	111	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	112	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	113	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	114	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	115	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	116	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	117	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	118	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	119	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	120	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	121	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	122	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	123	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	124	##ADDR##	footprnt	0	#HEAD#	#TAIL#	391
	125	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  4 definitions
  0 typedefs
  Definitions:
    aligner = process-definition (defined) aligner(
        bool<> !GND
        bool<> !Vdd
        e1of2<> l
      )
      In definition "aligner", we have: {
      Instances:
        !GND = bool<> aligner::!GND
        !Vdd = bool<> aligner::!Vdd
        _le = bool<> aligner::_le
        l = e1of2<> aligner::l
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          e1of2<> l
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        bool<> _le
      prs:
        {
        _le -> l.e-
        ~_le -> l.e+
        }
      footprint: {
        !GND = bool^0 = aligner<>::!GND (2) @[ supply_low port-alias ] 
        !Vdd = bool^0 = aligner<>::!Vdd (3) @[ supply_high port-alias ] 
        _le = bool^0 = aligner<>::_le (4) @[ loc-FO- loc-FO+ ] 
        l = process e1of2<>^0 = aligner<>::l (1) @[ port-alias ] (
          e = bool^0 = aligner<>::l.e (1) @[ port-alias loc-FI- loc-FI+ ] 
        )
        Created state:
        process instance pool: (1 ports, 0 local, 0 mapped)
        1	aligner<>::l @[ port-alias ]	e1of2<>
          bool: 1
        bool instance pool: (3 ports, 1 local, 0 mapped)
        1	aligner<>::l.e @[ port-alias loc-FI- loc-FI+ ]	
        2	aligner<>::!GND @[ supply_low port-alias ]	
        3	aligner<>::!Vdd @[ supply_high port-alias ]	
        4	aligner<>::_le @[ loc-FO- loc-FO+ ]	
        resolved prs:
        _le -> l.e-
        ~_le -> l.e+
        rule supply map: (rules, macros, @nodes : Vdd, GND)
        0..1 none none : 3, 2 | 3, 2
      }
      }

    conv = process-definition (defined) conv(
        bool<> !GND
        bool<> !Vdd
        e1of2<> r
      )
      In definition "conv", we have: {
      Instances:
        !GND = bool<> conv::!GND
        !Vdd = bool<> conv::!Vdd
        _r = bool<> conv::_r
        r = e1of2<> conv::r
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          e1of2<> r
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        bool<> _r
      prs:
        {
        r.e -> _r-
        ~r.e -> _r+
        }
      footprint: {
        !GND = bool^0 = conv<>::!GND (2) @[ supply_low port-alias ] 
        !Vdd = bool^0 = conv<>::!Vdd (3) @[ supply_high port-alias ] 
        _r = bool^0 = conv<>::_r (4) @[ loc-FI- loc-FI+ ] 
        r = process e1of2<>^0 = conv<>::r (1) @[ port-alias ] (
          e = bool^0 = conv<>::r.e (1) @[ port-alias loc-FO- loc-FO+ ] 
        )
        Created state:
        process instance pool: (1 ports, 0 local, 0 mapped)
        1	conv<>::r @[ port-alias ]	e1of2<>
          bool: 1
        bool instance pool: (3 ports, 1 local, 0 mapped)
        1	conv<>::r.e @[ port-alias loc-FO- loc-FO+ ]	
        2	conv<>::!GND @[ supply_low port-alias ]	
        3	conv<>::!Vdd @[ supply_high port-alias ]	
        4	conv<>::_r @[ loc-FI- loc-FI+ ]	
        resolved prs:
        r.e -> _r-
        ~r.e -> _r+
        rule supply map: (rules, macros, @nodes : Vdd, GND)
        0..1 none none : 3, 2 | 3, 2
      }
      }

    e1of2 = process-definition (defined) e1of2(
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        e = bool<> e1of2::e
      unroll sequence: 
        ports: (
          bool<> e
        )
      footprint: {
        e = bool^0 = e1of2<>::e (1) @[ port-alias ] 
        Created state:
        bool instance pool: (1 ports, 0 local, 0 mapped)
        1	e1of2<>::e @[ port-alias ]	
      }
      }

    top_type = process-definition (defined) top_type(
        bool<> !GND
        bool<> !Vdd
      )
      In definition "top_type", we have: {
      Instances:
        !GND = bool<> top_type::!GND
        !Vdd = bool<> top_type::!Vdd
        align = aligner<> top_type::align
        conv0 = conv<> top_type::conv0
        m = e1of2<> top_type::m
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        e1of2<> m
        conv<> conv0
        conv0 ( , , m);
        aligner<> align
        align ( , , m);
      footprint: {
        !GND = bool^0 = top_type<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = top_type<>::!Vdd (2) @[ supply_high port-alias ] 
        align = process aligner<>^0 = top_type<>::align (3) (
          !GND = bool^0 = top_type<>::!GND (1) @[ supply_low port-alias ] 
          !Vdd = bool^0 = top_type<>::!Vdd (2) @[ supply_high port-alias ] 
          l = process e1of2<>^0 = top_type<>::m (1) (
            e = bool^0 = top_type<>::m.e (3) @[ sub-FO- sub-FO+ sub-FI- sub-FI+ ] 
          )
        )
        conv0 = process conv<>^0 = top_type<>::conv0 (2) (
          !GND = bool^0 = top_type<>::!GND (1) @[ supply_low port-alias ] 
          !Vdd = bool^0 = top_type<>::!Vdd (2) @[ supply_high port-alias ] 
          r = process e1of2<>^0 = top_type<>::m (1) (
            e = bool^0 = top_type<>::m.e (3) @[ sub-FO- sub-FO+ sub-FI- sub-FI+ ] 
          )
        )
        m = process e1of2<>^0 = top_type<>::m (1) (
          e = bool^0 = top_type<>::m.e (3) @[ sub-FO- sub-FO+ sub-FI- sub-FI+ ] 
        )
        Created state:
        process instance pool: (0 ports, 3 local, 0 mapped)
        1	top_type<>::m	e1of2<>
          bool: 3
        2	top_type<>::conv0	conv<>
          process: 1
          bool: 3,1,2
        3	top_type<>::align	aligner<>
          process: 1
          bool: 3,1,2
        bool instance pool: (2 ports, 1 local, 2 mapped)
        1	top_type<>::!GND @[ supply_low port-alias ]	
        2	top_type<>::!Vdd @[ supply_high port-alias ]	
        3	top_type<>::m.e @[ sub-FO- sub-FO+ sub-FI- sub-FI+ ]	
        private sub-bool index map:
          (2 -> 0)
          (3 -> 1)
          (4 -> 2)
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    top = top_type<> top
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  top = process top_type<>^0 = top (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 3 mapped)
  1	top	top_type<>
    bool: 1,2
  private sub-process index map:
    (1 -> 0)
    (2 -> 3)
  bool instance pool: (0 ports, 2 local, 3 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
  private sub-bool index map:
    (1 -> 0)
    (2 -> 3)
}
