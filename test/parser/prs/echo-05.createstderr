
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	66
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	594
	5	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	9	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	44
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	21	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	36
	24	##ADDR##	cnstpr__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	28	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	29	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	30	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	31	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	35	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	38	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	41	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	43	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	44	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	49	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	52	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	55	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	56	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	57	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	58	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	61	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	62	##ADDR##	cnstpr__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	64	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	65	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	66	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	67	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	68	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	69	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	70	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    echo = process-definition (defined) echo(
        bool<> p
        bool<> q
        bool<> r
        bool<> s
        bool<> z
      )
      In definition "echo", we have: {
      Instances:
        p = bool<> p
        q = bool<> q
        r = bool<> r
        s = bool<> s
        z = bool<> z
      unroll sequence: 
        bool<> p
        bool<> q
        bool<> r
        bool<> s
        bool<> z
      prs:
        echo(<3,2,1>p,q)
        echo(<99.99>r,s)
        (p & q) | (r & s) -> z-
        ~((p & q) | (r & s)) -> z+
      footprint: {
        bool^0 p (instantiated) = ::echo::p (1) 
        bool^0 q (instantiated) = ::echo::q (2) 
        bool^0 r (instantiated) = ::echo::r (3) 
        bool^0 s (instantiated) = ::echo::s (4) 
        bool^0 z (instantiated) = ::echo::z (5) 
        bool instance pool:
        1	::echo::p
        2	::echo::q
        3	::echo::r
        4	::echo::s
        5	::echo::z
        resolved prs:
        (p & q) | (r & s) -> z-
        ~((p & q) | (r & s)) -> z+
        resolved macros:
        echo<3,2,1>(p,q)
        echo<99.99>(r,s)
      }
      }

  Instances:
    E = process echo<>^0 E (instantiated) = ::E (1) (
      bool^0 p (instantiated) = ::E.p (1) 
      bool^0 q (instantiated) = ::E.q (2) 
      bool^0 r (instantiated) = ::E.r (3) 
      bool^0 s (instantiated) = ::E.s (4) 
      bool^0 z (instantiated) = ::E.z (5) 
    )
}

Created state:
process instance pool:
1	::E
bool instance pool:
1	::E.p
2	::E.q
3	::E.r
4	::E.s
5	::E.z

