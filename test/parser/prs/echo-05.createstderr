
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	133
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	10	##ADDR##	portscop	0	#HEAD#	#TAIL#	32
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	52
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	21	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	44
	25	##ADDR##	cnstpr__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	29	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	30	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	24
	31	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	32	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	24
	36	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	37	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	39	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	42	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	44	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	24
	45	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	24
	50	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	55	##ADDR##	footprnt	0	#HEAD#	#TAIL#	643
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	footprnt	0	#HEAD#	#TAIL#	431
	59	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    echo = process-definition (defined) echo(
        bool<> p
        bool<> q
        bool<> r
        bool<> s
        bool<> z
      )
      In definition "echo", we have: {
      Instances:
        p = bool<> echo::p
        q = bool<> echo::q
        r = bool<> echo::r
        s = bool<> echo::s
        z = bool<> echo::z
      unroll sequence: 
        ports: (
          bool<> p
          bool<> q
          bool<> r
          bool<> s
          bool<> z
        )
      prs:
        echo<3,2,1>(p,q)
        echo<99.99>(r,s)
        (p & q) | (r & s) -> z-
        ~((p & q) | (r & s)) -> z+
      footprint: {
        p = bool^0 = echo<>::p (1) 
        q = bool^0 = echo<>::q (2) 
        r = bool^0 = echo<>::r (3) 
        s = bool^0 = echo<>::s (4) 
        z = bool^0 = echo<>::z (5) 
        Created state:
        bool instance pool:
        1	echo<>::p
        2	echo<>::q
        3	echo<>::r
        4	echo<>::s
        5	echo<>::z
        resolved prs:
        (p & q) | (r & s) -> z-
        ~((p & q) | (r & s)) -> z+
        resolved macros:
        echo<3,2,1>(p,q)
        echo<99.99>(r,s)
      }
      }

  Instances:
    E = echo<> E
}

footprint: {
  E = process echo<>^0 = E (1) (
    p = bool^0 = E.p (1) 
    q = bool^0 = E.q (2) 
    r = bool^0 = E.r (3) 
    s = bool^0 = E.s (4) 
    z = bool^0 = E.z (5) 
  )
  Created state:
  process instance pool:
  1	E
  bool instance pool:
  1	E.p
  2	E.q
  3	E.r
  4	E.s
  5	E.z
}
