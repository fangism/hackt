
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	52
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	130
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	9	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	procdefn	0	#HEAD#	#TAIL#	106
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	15	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	footprnt	0	#HEAD#	#TAIL#	314
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	87
	25	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	26	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	footprnt	0	#HEAD#	#TAIL#	282
	30	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	34	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	36	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	38	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	41	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	43	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	44	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	46	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	548
	48	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	50	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	52	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	53	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	54	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	55	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	59	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	60	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	61	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	64	##ADDR##	footprnt	0	#HEAD#	#TAIL#	488
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	66	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	67	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	68	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	69	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	70	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	71	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	72	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	73	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	74	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	75	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	76	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	77	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	78	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	79	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	80	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	81	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	82	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	83	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	84	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	85	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	86	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	87	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	88	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	89	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	90	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	91	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	92	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	93	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	95	##ADDR##	footprnt	0	#HEAD#	#TAIL#	762
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	97	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	procdefn	0	#HEAD#	#TAIL#	122
	100	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	101	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	102	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	103	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	104	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	105	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	106	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	107	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	108	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	109	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	110	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	111	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	112	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	113	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	114	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	115	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	116	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	117	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	118	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	119	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	120	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	121	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	122	##ADDR##	aprcmref	0	#HEAD#	#TAIL#	17
	123	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	124	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	125	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	126	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1295
	127	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	128	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	129	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	130	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	131	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	132	##ADDR##	procdefn	0	#HEAD#	#TAIL#	85
	133	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	134	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	135	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	136	##ADDR##	footprnt	0	#HEAD#	#TAIL#	954
	137	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	138	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	139	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	140	##ADDR##	footprnt	0	#HEAD#	#TAIL#	296
	141	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  7 definitions
  0 typedefs
  Definitions:
    alt_e1of2 = process-definition (defined) alt_e1of2(
        e1of2<> a
        bp<> t
        bp<> f
        bp<> e
      )
      In definition "alt_e1of2", we have: {
      Instances:
        a = e1of2<> alt_e1of2::a
        e = bp<> alt_e1of2::e
        f = bp<> alt_e1of2::f
        t = bp<> alt_e1of2::t
      unroll sequence: 
        ports: (
          e1of2<> a
          bp<> t
          bp<> f
          bp<> e
        )
        t.a = a.t;
        f.a = a.f;
        e.a = a.e;
      footprint: {
        a = process e1of2<>^0 = alt_e1of2<>::a (1) (
          t = bool^0 = alt_e1of2<>::a.t (1) 
          f = bool^0 = alt_e1of2<>::a.f (2) 
          e = bool^0 = alt_e1of2<>::a.e (3) 
        )
        e = process bp<>^0 = alt_e1of2<>::e (4) (
          a = bool^0 = alt_e1of2<>::a.e (3) 
        )
        f = process bp<>^0 = alt_e1of2<>::f (3) (
          a = bool^0 = alt_e1of2<>::a.f (2) 
        )
        t = process bp<>^0 = alt_e1of2<>::t (2) (
          a = bool^0 = alt_e1of2<>::a.t (1) 
        )
        Created state:
        process instance pool:
        1	alt_e1of2<>::a
        2	alt_e1of2<>::t
        3	alt_e1of2<>::f
        4	alt_e1of2<>::e
        bool instance pool:
        1	alt_e1of2<>::a.t
        2	alt_e1of2<>::a.f
        3	alt_e1of2<>::a.e
        bool port aliases:
        1: alt_e1of2<>::a.t = alt_e1of2<>::t.a
        2: alt_e1of2<>::a.f = alt_e1of2<>::f.a
        3: alt_e1of2<>::a.e = alt_e1of2<>::e.a
      }
      }

    blah1 = process-definition (defined) blah1(
        e1of2<> l
        e1of2<> r
      )
      In definition "blah1", we have: {
      Instances:
        l = e1of2<> blah1::l
        r = e1of2<> blah1::r
      unroll sequence: 
        ports: (
          e1of2<> l
          e1of2<> r
        )
        l.e@[iscomb=1]
      footprint: {
        l = process e1of2<>^0 = blah1<>::l (1) (
          t = bool^0 = blah1<>::l.t (1) 
          f = bool^0 = blah1<>::l.f (2) 
          e = bool^0 = blah1<>::l.e (3) @[ iscomb ] 
        )
        r = process e1of2<>^0 = blah1<>::r (2) (
          t = bool^0 = blah1<>::r.t (4) 
          f = bool^0 = blah1<>::r.f (5) 
          e = bool^0 = blah1<>::r.e (6) 
        )
        Created state:
        process instance pool:
        1	blah1<>::l
        2	blah1<>::r
        bool instance pool:
        1	blah1<>::l.t
        2	blah1<>::l.f
        3	blah1<>::l.e @[ iscomb ]
        4	blah1<>::r.t
        5	blah1<>::r.f
        6	blah1<>::r.e
      }
      }

    blah2 = process-definition (defined) blah2(
        e1of2<> l[0..0]
        e1of2<> r
      )
      In definition "blah2", we have: {
      Instances:
        l = e1of2<> blah2::l^1
        r = e1of2<> blah2::r
        xx = blah1<> blah2::xx
      unroll sequence: 
        ports: (
          e1of2<> l[0..0]
          e1of2<> r
        )
        blah1<> xx
        xx (l[0], r);
        r.t@[iscomb=1]
        r.f@[iscomb=1]
      footprint: {
        l = process e1of2<>^1
          {
            [0] = blah2<>::l[0] (3) (
              t = bool^0 = blah2<>::l[0].t (4) 
              f = bool^0 = blah2<>::l[0].f (5) 
              e = bool^0 = blah2<>::l[0].e (6) @[ iscomb ] 
            )
          }
        r = process e1of2<>^0 = blah2<>::r (1) (
          t = bool^0 = blah2<>::r.t (1) @[ iscomb ] 
          f = bool^0 = blah2<>::r.f (2) @[ iscomb ] 
          e = bool^0 = blah2<>::r.e (3) 
        )
        xx = process blah1<>^0 = blah2<>::xx (2) (
          l = process e1of2<>^0 = blah2<>::l[0] (3) (
            t = bool^0 = blah2<>::l[0].t (4) 
            f = bool^0 = blah2<>::l[0].f (5) 
            e = bool^0 = blah2<>::l[0].e (6) @[ iscomb ] 
          )
          r = process e1of2<>^0 = blah2<>::r (1) (
            t = bool^0 = blah2<>::r.t (1) @[ iscomb ] 
            f = bool^0 = blah2<>::r.f (2) @[ iscomb ] 
            e = bool^0 = blah2<>::r.e (3) 
          )
        )
        Created state:
        process instance pool:
        1	blah2<>::r
        2	blah2<>::xx
        3	blah2<>::l[0]
        bool instance pool:
        1	blah2<>::r.t @[ iscomb ]
        2	blah2<>::r.f @[ iscomb ]
        3	blah2<>::r.e
        4	blah2<>::l[0].t
        5	blah2<>::l[0].f
        6	blah2<>::l[0].e @[ iscomb ]
      }
      }

    blah3 = process-definition (defined) blah3(
        alt_e1of2<> in[0..0]
        alt_e1of2<> out
      )
      In definition "blah3", we have: {
      Instances:
        in = alt_e1of2<> blah3::in^1
        in_a = e1of2<> blah3::in_a
        ma = blah2<> blah3::ma
        out = alt_e1of2<> blah3::out
      unroll sequence: 
        ports: (
          alt_e1of2<> in[0..0]
          alt_e1of2<> out
        )
        e1of2<> in_a
        in_a = in[0].a;
        blah2<> ma
        ma ({ in_a }, out.a);
      footprint: {
        in = process alt_e1of2<>^1
          {
            [0] = blah3<>::in[0] (8) (
              a = process e1of2<>^0 = blah3<>::in_a (6) (
                t = bool^0 = blah3<>::in_a.t (4) 
                f = bool^0 = blah3<>::in_a.f (5) 
                e = bool^0 = blah3<>::in_a.e (6) @[ iscomb ] 
              )
              t = process bp<>^0 = blah3<>::in[0].t (9) (
                a = bool^0 = blah3<>::in_a.t (4) 
              )
              f = process bp<>^0 = blah3<>::in[0].f (10) (
                a = bool^0 = blah3<>::in_a.f (5) 
              )
              e = process bp<>^0 = blah3<>::in[0].e (11) (
                a = bool^0 = blah3<>::in_a.e (6) @[ iscomb ] 
              )
            )
          }
        in_a = process e1of2<>^0 = blah3<>::in_a (6) (
          t = bool^0 = blah3<>::in_a.t (4) 
          f = bool^0 = blah3<>::in_a.f (5) 
          e = bool^0 = blah3<>::in_a.e (6) @[ iscomb ] 
        )
        ma = process blah2<>^0 = blah3<>::ma (7) (
          l = process e1of2<>^1
            {
              [0] = blah3<>::in_a (6) (
                t = bool^0 = blah3<>::in_a.t (4) 
                f = bool^0 = blah3<>::in_a.f (5) 
                e = bool^0 = blah3<>::in_a.e (6) @[ iscomb ] 
              )
            }
          r = process e1of2<>^0 = blah3<>::out.a (2) (
            t = bool^0 = blah3<>::out.a.t (1) @[ iscomb ] 
            f = bool^0 = blah3<>::out.a.f (2) @[ iscomb ] 
            e = bool^0 = blah3<>::out.a.e (3) 
          )
        )
        out = process alt_e1of2<>^0 = blah3<>::out (1) (
          a = process e1of2<>^0 = blah3<>::out.a (2) (
            t = bool^0 = blah3<>::out.a.t (1) @[ iscomb ] 
            f = bool^0 = blah3<>::out.a.f (2) @[ iscomb ] 
            e = bool^0 = blah3<>::out.a.e (3) 
          )
          t = process bp<>^0 = blah3<>::out.t (3) (
            a = bool^0 = blah3<>::out.a.t (1) @[ iscomb ] 
          )
          f = process bp<>^0 = blah3<>::out.f (4) (
            a = bool^0 = blah3<>::out.a.f (2) @[ iscomb ] 
          )
          e = process bp<>^0 = blah3<>::out.e (5) (
            a = bool^0 = blah3<>::out.a.e (3) 
          )
        )
        Created state:
        process instance pool:
        1	blah3<>::out
        2	blah3<>::out.a
        3	blah3<>::out.t
        4	blah3<>::out.f
        5	blah3<>::out.e
        6	blah3<>::in_a
        7	blah3<>::ma
        8	blah3<>::in[0]
        9	blah3<>::in[0].t
        10	blah3<>::in[0].f
        11	blah3<>::in[0].e
        bool instance pool:
        1	blah3<>::out.a.t @[ iscomb ]
        2	blah3<>::out.a.f @[ iscomb ]
        3	blah3<>::out.a.e
        4	blah3<>::in_a.t
        5	blah3<>::in_a.f
        6	blah3<>::in_a.e @[ iscomb ]
        bool port aliases:
        1: blah3<>::out.a.t = blah3<>::out.t.a @[ iscomb ]
        2: blah3<>::out.a.f = blah3<>::out.f.a @[ iscomb ]
        3: blah3<>::out.a.e = blah3<>::out.e.a
        4: blah3<>::in[0].a.t = blah3<>::in[0].t.a
        5: blah3<>::in[0].a.f = blah3<>::in[0].f.a
        6: blah3<>::in[0].a.e = blah3<>::in[0].e.a @[ iscomb ]
      }
      }

    bp = process-definition (defined) bp(
        bool<> a
      )
      In definition "bp", we have: {
      Instances:
        a = bool<> bp::a
      unroll sequence: 
        ports: (
          bool<> a
        )
      footprint: {
        a = bool^0 = bp<>::a (1) 
        Created state:
        bool instance pool:
        1	bp<>::a
      }
      }

    e1of2 = process-definition (defined) e1of2(
        bool<> t
        bool<> f
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        e = bool<> e1of2::e
        f = bool<> e1of2::f
        t = bool<> e1of2::t
      unroll sequence: 
        ports: (
          bool<> t
          bool<> f
          bool<> e
        )
      footprint: {
        e = bool^0 = e1of2<>::e (3) 
        f = bool^0 = e1of2<>::f (2) 
        t = bool^0 = e1of2<>::t (1) 
        Created state:
        bool instance pool:
        1	e1of2<>::t
        2	e1of2<>::f
        3	e1of2<>::e
      }
      }

    obox = process-definition (defined) obox(
      )
      In definition "obox", we have: {
      Instances:
        bar = blah3<> obox::bar
      unroll sequence: 
        blah3<> bar
      footprint: {
        bar = process blah3<>^0 = obox<>::bar (1) (
          in = process alt_e1of2<>^1
            {
              [0] = obox<>::bar.in[0] (2) (
                a = process e1of2<>^0 = obox<>::bar.in[0].a (3) (
                  t = bool^0 = obox<>::bar.in[0].a.t (1) 
                  f = bool^0 = obox<>::bar.in[0].a.f (2) 
                  e = bool^0 = obox<>::bar.in[0].a.e (3) @[ iscomb ] 
                )
                t = process bp<>^0 = obox<>::bar.in[0].t (4) (
                  a = bool^0 = obox<>::bar.in[0].a.t (1) 
                )
                f = process bp<>^0 = obox<>::bar.in[0].f (5) (
                  a = bool^0 = obox<>::bar.in[0].a.f (2) 
                )
                e = process bp<>^0 = obox<>::bar.in[0].e (6) (
                  a = bool^0 = obox<>::bar.in[0].a.e (3) @[ iscomb ] 
                )
              )
            }
          out = process alt_e1of2<>^0 = obox<>::bar.out (7) (
            a = process e1of2<>^0 = obox<>::bar.out.a (8) (
              t = bool^0 = obox<>::bar.out.a.t (4) @[ iscomb ] 
              f = bool^0 = obox<>::bar.out.a.f (5) @[ iscomb ] 
              e = bool^0 = obox<>::bar.out.a.e (6) 
            )
            t = process bp<>^0 = obox<>::bar.out.t (9) (
              a = bool^0 = obox<>::bar.out.a.t (4) @[ iscomb ] 
            )
            f = process bp<>^0 = obox<>::bar.out.f (10) (
              a = bool^0 = obox<>::bar.out.a.f (5) @[ iscomb ] 
            )
            e = process bp<>^0 = obox<>::bar.out.e (11) (
              a = bool^0 = obox<>::bar.out.a.e (6) 
            )
          )
        )
        Created state:
        process instance pool:
        1	obox<>::bar
        2	obox<>::bar.in[0]
        3	obox<>::bar.in[0].a
        4	obox<>::bar.in[0].t
        5	obox<>::bar.in[0].f
        6	obox<>::bar.in[0].e
        7	obox<>::bar.out
        8	obox<>::bar.out.a
        9	obox<>::bar.out.t
        10	obox<>::bar.out.f
        11	obox<>::bar.out.e
        bool instance pool:
        1	obox<>::bar.in[0].a.t
        2	obox<>::bar.in[0].a.f
        3	obox<>::bar.in[0].a.e @[ iscomb ]
        4	obox<>::bar.out.a.t @[ iscomb ]
        5	obox<>::bar.out.a.f @[ iscomb ]
        6	obox<>::bar.out.a.e
      }
      }

  Instances:
    foo = obox<> foo
}

footprint: {
  foo = process obox<>^0 = foo (1) 
  Created state:
  process instance pool:
  1	foo
}
