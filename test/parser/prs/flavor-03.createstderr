
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	15	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	24
	16	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	35
	17	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	35
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	26	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	27	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	28	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	39
	29	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	35
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	footprnt	0	#HEAD#	#TAIL#	520
	40	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	44	##ADDR##	footprnt	0	#HEAD#	#TAIL#	377
	45	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    nand_type = process-definition (defined) nand_type(
        bool<> a
        bool<> b
        bool<> c
      )
      In definition "nand_type", we have: {
      Instances:
        a = bool<> nand_type::a
        b = bool<> nand_type::b
        c = bool<> nand_type::c
      unroll sequence: 
        ports: (
          bool<> a
          bool<> b
          bool<> c
        )
      prs:
        a<10;lvt> & b<10;svt=0> -> c-
        ~a<5,2;svt=1> | ~b<10;svt> -> c+
      footprint: {
        a = bool^0 = nand_type<>::a (1) 
        b = bool^0 = nand_type<>::b (2) 
        c = bool^0 = nand_type<>::c (3) 
        Created state:
        bool instance pool:
        1	nand_type<>::a
        2	nand_type<>::b
        3	nand_type<>::c
        resolved prs:
        a<10;lvt> & b<10;svt=0> -> c-
        ~a<5,2;svt=1> | ~b<10;svt> -> c+
      }
      }

  Instances:
    X = nand_type<> X
}

footprint: {
  X = process nand_type<>^0 = X (1) (
    a = bool^0 = X.a (1) 
    b = bool^0 = X.b (2) 
    c = bool^0 = X.c (3) 
  )
  Created state:
  process instance pool:
  1	X
  bool instance pool:
  1	X.a
  2	X.b
  3	X.c
}
