
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	261
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	40
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	PRSmacro	0	#HEAD#	#TAIL#	40
	21	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	24	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	25	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	26	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	27	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	29	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	31	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	32	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	37	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	39	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	40	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	45	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	51	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	52	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	53	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	54	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	55	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	56	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	58	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	59	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	60	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	61	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	62	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	63	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    echo = process-definition (defined) echo(
        bool<> p
        bool<> q
        bool<> r
        bool<> s
        bool<> z
      )
      In definition "echo", we have: {
      Instances:
        p = bool<> echo::p
        q = bool<> echo::q
        r = bool<> echo::r
        s = bool<> echo::s
        z = bool<> echo::z
      unroll sequence: 
        bool<> p
        bool<> q
        bool<> r
        bool<> s
        bool<> z
      prs:
        echo(p,q)
        echo(r,s)
        (p & q) | (r & s) -> z-
        ~((p & q) | (r & s)) -> z+
      footprint: {
        p = bool^0 = echo::p 
        q = bool^0 = echo::q 
        r = bool^0 = echo::r 
        s = bool^0 = echo::s 
        z = bool^0 = echo::z 
      }
      }

  Instances:
    E = echo<> E
}

footprint: {
  E = process echo<>^0 = E (
    p = bool^0 = E.p 
    q = bool^0 = E.q 
    r = bool^0 = E.r 
    s = bool^0 = E.s 
    z = bool^0 = E.z 
  )
}
