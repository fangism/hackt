
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	220
	5	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	9	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	53
	16	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	45
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	23	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	24	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	25	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	26	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	27	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	28	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    testing = process-definition (defined) testing(
      )
      In definition "testing", we have: {
      Instances:
        p = bool<> p
        q = bool<> q
        r = bool<> r
        s = bool<> s
      unroll sequence: 
        bool<> p
        bool<> q
        bool<> r
        bool<> s
      spec:
        mk_exclhi(p,q,r)
        mk_exclhi(r,s)
      footprint: {
        bool^0 p (instantiated) = ::testing::p 
        bool^0 q (instantiated) = ::testing::q 
        bool^0 r (instantiated) = ::testing::r 
        bool^0 s (instantiated) = ::testing::s 
      }
      }

  Instances:
    tester = process testing<>^0 tester (instantiated) = ::tester 
}

