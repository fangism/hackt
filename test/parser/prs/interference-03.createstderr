
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	35
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	117
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	9	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	48
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	33
	22	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	23	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	33
	28	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	30	##ADDR##	footprnt	0	#HEAD#	#TAIL#	399
	31	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	34	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	35	##ADDR##	procdefn	0	#HEAD#	#TAIL#	117
	36	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	37	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	38	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	39	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	40	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	41	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	42	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	43
	44	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	46	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	47	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	51	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	52	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	55	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	57	##ADDR##	footprnt	0	#HEAD#	#TAIL#	375
	58	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	59	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	60	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	62	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	63	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	64	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	65	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	68	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	69	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	70	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	71	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	72	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	73	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	74	##ADDR##	footprnt	0	#HEAD#	#TAIL#	602
	75	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	76	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	78	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    dyne = process-definition (defined) dyne(
        bool<> foo
        bool<> bar
      )
      In definition "dyne", we have: {
      Instances:
        bar = bool<> dyne::bar
        bar2 = bool<> dyne::bar2
        foo = bool<> dyne::foo
      unroll sequence: 
        ports: (
          bool<> foo
          bool<> bar
        )
        bool<> bar2
        bar2 = bar;
        bar@[ignore_weak_interference=]
      prs:
        bar -> foo- [weak=1; ]
        ~bar -> foo+ [weak=1; ]
      footprint: {
        bar = bool^0 = dyne<>::bar (2) @[ may_weak_interfere ] 
        bar2 = bool^0 = dyne<>::bar (2) @[ may_weak_interfere ] 
        foo = bool^0 = dyne<>::foo (1) 
        Created state:
        bool instance pool:
        1	dyne<>::foo
        2	dyne<>::bar @[ may_weak_interfere ]
        resolved prs:
        bar -> foo- [weak=1; ]
        ~bar -> foo+ [weak=1; ]
      }
      }

    yoyo = process-definition (defined) yoyo(
        bool<> foo
        bool<> bar
      )
      In definition "yoyo", we have: {
      Instances:
        bar = bool<> yoyo::bar
        foo = bool<> yoyo::foo
        foo2 = bool<> yoyo::foo2
      unroll sequence: 
        ports: (
          bool<> foo
          bool<> bar
        )
        foo@[ignore_interference=]
        bool<> foo2
        foo2 = foo;
      prs:
        foo -> bar-
        ~foo -> bar+
      footprint: {
        bar = bool^0 = yoyo<>::bar (2) 
        foo = bool^0 = yoyo<>::foo (1) @[ may_interfere ] 
        foo2 = bool^0 = yoyo<>::foo (1) @[ may_interfere ] 
        Created state:
        bool instance pool:
        1	yoyo<>::foo @[ may_interfere ]
        2	yoyo<>::bar
        resolved prs:
        foo -> bar-
        ~foo -> bar+
      }
      }

  Instances:
    bukkit = dyne<> bukkit
    cheezburger = yoyo<> cheezburger
    wee = yoyo<> wee
    wha = dyne<> wha
}

footprint: {
  bukkit = process dyne<>^0 = bukkit (4) (
    foo = bool^0 = cheezburger.foo (3) @[ may_interfere ] 
    bar = bool^0 = cheezburger.bar (4) @[ may_weak_interfere ] 
  )
  cheezburger = process yoyo<>^0 = cheezburger (2) (
    foo = bool^0 = cheezburger.foo (3) @[ may_interfere ] 
    bar = bool^0 = cheezburger.bar (4) @[ may_weak_interfere ] 
  )
  wee = process yoyo<>^0 = wee (1) (
    foo = bool^0 = wee.foo (1) @[ may_interfere ] 
    bar = bool^0 = wee.bar (2) 
  )
  wha = process dyne<>^0 = wha (3) (
    foo = bool^0 = wha.foo (5) 
    bar = bool^0 = wha.bar (6) @[ may_weak_interfere ] 
  )
  Created state:
  process instance pool:
  1	wee
  2	cheezburger
  3	wha
  4	bukkit
  bool instance pool:
  1	wee.foo @[ may_interfere ]
  2	wee.bar
  3	cheezburger.foo @[ may_interfere ]
  4	cheezburger.bar @[ may_weak_interfere ]
  5	wha.foo
  6	wha.bar @[ may_weak_interfere ]
}
