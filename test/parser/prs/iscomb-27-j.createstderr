
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	56
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	10	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	11	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	15	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	footprnt	0	#HEAD#	#TAIL#	302
	21	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	procdefn	0	#HEAD#	#TAIL#	87
	24	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	25	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	286
	29	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	31	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	32	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	34	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	36	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	37	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	footprnt	0	#HEAD#	#TAIL#	468
	41	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	42	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	43	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	44	##ADDR##	procdefn	0	#HEAD#	#TAIL#	122
	45	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	46	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	47	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	48	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	49	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	50	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	51	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	52	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	55	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	56	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	57	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	58	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	61	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	62	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	63	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	66	##ADDR##	footprnt	0	#HEAD#	#TAIL#	470
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	68	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	69	##ADDR##	procdefn	0	#HEAD#	#TAIL#	138
	70	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	71	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	72	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	73	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	74	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	75	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	76	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	77	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	78	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	79	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	80	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	81	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	82	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	83	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	84	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	85	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	86	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	87	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	88	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	89	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	91	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	92	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	93	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	95	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	96	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	97	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1118
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	100	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	101	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	102	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	103	##ADDR##	procdefn	0	#HEAD#	#TAIL#	105
	104	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	105	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	106	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	107	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	108	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	109	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	110	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	111	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	112	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	113	##ADDR##	footprnt	0	#HEAD#	#TAIL#	866
	114	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	115	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	116	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	117	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	118	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	119	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	120	##ADDR##	footprnt	0	#HEAD#	#TAIL#	386
	121	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  6 definitions
  0 typedefs
  Definitions:
    alt_e1of2 = process-definition (defined) alt_e1of2(
        e1of2<> a
        bp<> t
        bp<> e
      )
      In definition "alt_e1of2", we have: {
      Instances:
        a = e1of2<> alt_e1of2::a
        e = bp<> alt_e1of2::e
        t = bp<> alt_e1of2::t
      unroll sequence: 
        ports: (
          e1of2<> a
          bp<> t
          bp<> e
        )
        t.a = a.t;
        e.a = a.e;
      footprint: {
        a = process e1of2<>^0 = alt_e1of2<>::a (1) (
          t = bool^0 = alt_e1of2<>::a.t (1) 
          e = bool^0 = alt_e1of2<>::a.e (2) 
        )
        e = process bp<>^0 = alt_e1of2<>::e (3) (
          a = bool^0 = alt_e1of2<>::a.e (2) 
        )
        t = process bp<>^0 = alt_e1of2<>::t (2) (
          a = bool^0 = alt_e1of2<>::a.t (1) 
        )
        Created state:
        process instance pool: (3 ports)
        1	alt_e1of2<>::a	e1of2<>
          bool: 1,2
        2	alt_e1of2<>::t	bp<>
          bool: 1
        3	alt_e1of2<>::e	bp<>
          bool: 2
        bool instance pool: (2 ports)
        1	alt_e1of2<>::a.t	
        2	alt_e1of2<>::a.e	
        bool port aliases:
        1: alt_e1of2<>::a.t = alt_e1of2<>::t.a
        2: alt_e1of2<>::a.e = alt_e1of2<>::e.a
      }
      }

    blah2 = process-definition (defined) blah2(
        bool<> !GND
        bool<> !Vdd
        e1of2<> l
        e1of2<> r
      )
      In definition "blah2", we have: {
      Instances:
        !GND = bool<> blah2::!GND
        !Vdd = bool<> blah2::!Vdd
        l = e1of2<> blah2::l
        r = e1of2<> blah2::r
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          e1of2<> l
          e1of2<> r
        )
        r.t@[iscomb=1]
        l.e@[iscomb=1]
      footprint: {
        !GND = bool^0 = blah2<>::!GND (5) 
        !Vdd = bool^0 = blah2<>::!Vdd (6) 
        l = process e1of2<>^0 = blah2<>::l (1) (
          t = bool^0 = blah2<>::l.t (1) 
          e = bool^0 = blah2<>::l.e (2) @[ iscomb ] 
        )
        r = process e1of2<>^0 = blah2<>::r (2) (
          t = bool^0 = blah2<>::r.t (3) @[ iscomb ] 
          e = bool^0 = blah2<>::r.e (4) 
        )
        Created state:
        process instance pool: (2 ports)
        1	blah2<>::l	e1of2<>
          bool: 1,2
        2	blah2<>::r	e1of2<>
          bool: 3,4
        bool instance pool: (6 ports)
        1	blah2<>::l.t	
        2	blah2<>::l.e @[ iscomb ]	
        3	blah2<>::r.t @[ iscomb ]	
        4	blah2<>::r.e	
        5	blah2<>::!GND	
        6	blah2<>::!Vdd	
      }
      }

    blah3 = process-definition (defined) blah3(
        bool<> !GND
        bool<> !Vdd
        alt_e1of2<> in
        alt_e1of2<> out
      )
      In definition "blah3", we have: {
      Instances:
        !GND = bool<> blah3::!GND
        !Vdd = bool<> blah3::!Vdd
        in = alt_e1of2<> blah3::in
        in_a = e1of2<> blah3::in_a
        ma = blah2<> blah3::ma
        out = alt_e1of2<> blah3::out
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          alt_e1of2<> in
          alt_e1of2<> out
        )
        e1of2<> in_a
        in_a = in.a;
        blah2<> ma
        ma ( , , in_a, out.a);
      footprint: {
        !GND = bool^0 = blah3<>::!GND (5) 
        !Vdd = bool^0 = blah3<>::!Vdd (6) 
        in = process alt_e1of2<>^0 = blah3<>::in (1) (
          a = process e1of2<>^0 = blah3<>::in_a (2) (
            t = bool^0 = blah3<>::in_a.t (1) 
            e = bool^0 = blah3<>::in_a.e (2) @[ iscomb ] 
          )
          t = process bp<>^0 = blah3<>::in.t (3) (
            a = bool^0 = blah3<>::in_a.t (1) 
          )
          e = process bp<>^0 = blah3<>::in.e (4) (
            a = bool^0 = blah3<>::in_a.e (2) @[ iscomb ] 
          )
        )
        in_a = process e1of2<>^0 = blah3<>::in_a (2) (
          t = bool^0 = blah3<>::in_a.t (1) 
          e = bool^0 = blah3<>::in_a.e (2) @[ iscomb ] 
        )
        ma = process blah2<>^0 = blah3<>::ma (9) (
          !GND = bool^0 = blah3<>::!GND (5) 
          !Vdd = bool^0 = blah3<>::!Vdd (6) 
          l = process e1of2<>^0 = blah3<>::in_a (2) (
            t = bool^0 = blah3<>::in_a.t (1) 
            e = bool^0 = blah3<>::in_a.e (2) @[ iscomb ] 
          )
          r = process e1of2<>^0 = blah3<>::out.a (6) (
            t = bool^0 = blah3<>::out.a.t (3) @[ iscomb ] 
            e = bool^0 = blah3<>::out.a.e (4) 
          )
        )
        out = process alt_e1of2<>^0 = blah3<>::out (5) (
          a = process e1of2<>^0 = blah3<>::out.a (6) (
            t = bool^0 = blah3<>::out.a.t (3) @[ iscomb ] 
            e = bool^0 = blah3<>::out.a.e (4) 
          )
          t = process bp<>^0 = blah3<>::out.t (7) (
            a = bool^0 = blah3<>::out.a.t (3) @[ iscomb ] 
          )
          e = process bp<>^0 = blah3<>::out.e (8) (
            a = bool^0 = blah3<>::out.a.e (4) 
          )
        )
        Created state:
        process instance pool: (8 ports)
        1	blah3<>::in	alt_e1of2<>
          process: 2,3,4
          bool: 1,2
        2	blah3<>::in_a	e1of2<>
          bool: 1,2
        3	blah3<>::in.t	bp<>
          bool: 1
        4	blah3<>::in.e	bp<>
          bool: 2
        5	blah3<>::out	alt_e1of2<>
          process: 6,7,8
          bool: 3,4
        6	blah3<>::out.a	e1of2<>
          bool: 3,4
        7	blah3<>::out.t	bp<>
          bool: 3
        8	blah3<>::out.e	bp<>
          bool: 4
        9	blah3<>::ma	blah2<>
          process: 2,6
          bool: 1,2,3,4,5,6
        bool instance pool: (6 ports)
        1	blah3<>::in_a.t	
        2	blah3<>::in_a.e @[ iscomb ]	
        3	blah3<>::out.a.t @[ iscomb ]	
        4	blah3<>::out.a.e	
        5	blah3<>::!GND	
        6	blah3<>::!Vdd	
        bool port aliases:
        1: blah3<>::in.a.t = blah3<>::in.t.a
        2: blah3<>::in.a.e = blah3<>::in.e.a @[ iscomb ]
        3: blah3<>::out.a.t = blah3<>::out.t.a @[ iscomb ]
        4: blah3<>::out.a.e = blah3<>::out.e.a
      }
      }

    bp = process-definition (defined) bp(
        bool<> a
      )
      In definition "bp", we have: {
      Instances:
        a = bool<> bp::a
      unroll sequence: 
        ports: (
          bool<> a
        )
      footprint: {
        a = bool^0 = bp<>::a (1) 
        Created state:
        bool instance pool: (1 ports)
        1	bp<>::a	
      }
      }

    e1of2 = process-definition (defined) e1of2(
        bool<> t
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        e = bool<> e1of2::e
        t = bool<> e1of2::t
      unroll sequence: 
        ports: (
          bool<> t
          bool<> e
        )
      footprint: {
        e = bool^0 = e1of2<>::e (2) 
        t = bool^0 = e1of2<>::t (1) 
        Created state:
        bool instance pool: (2 ports)
        1	e1of2<>::t	
        2	e1of2<>::e	
      }
      }

    obox = process-definition (defined) obox(
        bool<> !GND
        bool<> !Vdd
      )
      In definition "obox", we have: {
      Instances:
        !GND = bool<> obox::!GND
        !Vdd = bool<> obox::!Vdd
        bar = blah3<> obox::bar
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
        )
        blah3<> bar
      footprint: {
        !GND = bool^0 = obox<>::!GND (1) 
        !Vdd = bool^0 = obox<>::!Vdd (2) 
        bar = process blah3<>^0 = obox<>::bar (1) (
          !GND = bool^0 = obox<>::!GND (1) 
          !Vdd = bool^0 = obox<>::!Vdd (2) 
          in = process alt_e1of2<>^0 = obox<>::bar.in (2) (
            a = process e1of2<>^0 = obox<>::bar.in.a (3) (
              t = bool^0 = obox<>::bar.in.a.t (3) 
              e = bool^0 = obox<>::bar.in.a.e (4) @[ iscomb ] 
            )
            t = process bp<>^0 = obox<>::bar.in.t (4) (
              a = bool^0 = obox<>::bar.in.a.t (3) 
            )
            e = process bp<>^0 = obox<>::bar.in.e (5) (
              a = bool^0 = obox<>::bar.in.a.e (4) @[ iscomb ] 
            )
          )
          out = process alt_e1of2<>^0 = obox<>::bar.out (6) (
            a = process e1of2<>^0 = obox<>::bar.out.a (7) (
              t = bool^0 = obox<>::bar.out.a.t (5) @[ iscomb ] 
              e = bool^0 = obox<>::bar.out.a.e (6) 
            )
            t = process bp<>^0 = obox<>::bar.out.t (8) (
              a = bool^0 = obox<>::bar.out.a.t (5) @[ iscomb ] 
            )
            e = process bp<>^0 = obox<>::bar.out.e (9) (
              a = bool^0 = obox<>::bar.out.a.e (6) 
            )
          )
        )
        Created state:
        process instance pool: (0 ports)
        1	obox<>::bar	blah3<>
          process: 2,3,4,5,6,7,8,9
          bool: 3,4,5,6,1,2
        2	obox<>::bar.in	alt_e1of2<>
          process: 3,4,5
          bool: 3,4
        3	obox<>::bar.in.a	e1of2<>
          bool: 3,4
        4	obox<>::bar.in.t	bp<>
          bool: 3
        5	obox<>::bar.in.e	bp<>
          bool: 4
        6	obox<>::bar.out	alt_e1of2<>
          process: 7,8,9
          bool: 5,6
        7	obox<>::bar.out.a	e1of2<>
          bool: 5,6
        8	obox<>::bar.out.t	bp<>
          bool: 5
        9	obox<>::bar.out.e	bp<>
          bool: 6
        private sub-process index map:
          (1 -> 0)
          (10 -> 1)
        bool instance pool: (2 ports)
        1	obox<>::!GND	
        2	obox<>::!Vdd	
        3	obox<>::bar.in.a.t	
        4	obox<>::bar.in.a.e @[ iscomb ]	
        5	obox<>::bar.out.a.t @[ iscomb ]	
        6	obox<>::bar.out.a.e	
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    foo = obox<> foo
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  foo = process obox<>^0 = foo (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
  )
  Created state:
  process instance pool: (0 ports)
  1	foo	obox<>
    bool: 1,2
  private sub-process index map:
    (1 -> 0)
    (2 -> 10)
  bool instance pool: (0 ports)
  1	!GND	
  2	!Vdd	
  private sub-bool index map:
    (1 -> 0)
    (2 -> 4)
}
