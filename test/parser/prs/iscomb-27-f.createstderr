
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	52
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	9	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	15	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	footprnt	0	#HEAD#	#TAIL#	314
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	75
	25	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	26	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	32	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	33	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	35	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	37	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	38	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	40	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	42	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	43	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	45	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	47	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	48	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	49	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	50	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	51	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	52	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	54	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	55	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	56	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	57	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	58	##ADDR##	footprnt	0	#HEAD#	#TAIL#	488
	59	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	60	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	61	##ADDR##	procdefn	0	#HEAD#	#TAIL#	114
	62	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	63	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	64	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	65	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	66	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	67	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	68	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	69	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	70	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	71	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	72	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	73	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	74	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	75	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	76	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	77	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	78	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	79	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	80	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	81	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	82	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	83	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	84	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	85	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	86	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	87	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	88	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	89	##ADDR##	footprnt	0	#HEAD#	#TAIL#	762
	90	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	91	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	93	##ADDR##	procdefn	0	#HEAD#	#TAIL#	106
	94	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	95	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	96	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	97	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	98	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	99	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	100	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	101	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	104	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	105	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	aprcmref	0	#HEAD#	#TAIL#	17
	107	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	108	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	109	##ADDR##	footprnt	0	#HEAD#	#TAIL#	746
	110	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	111	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	112	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	113	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	114	##ADDR##	procdefn	0	#HEAD#	#TAIL#	81
	115	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	116	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	117	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	118	##ADDR##	footprnt	0	#HEAD#	#TAIL#	524
	119	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	120	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	121	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	122	##ADDR##	footprnt	0	#HEAD#	#TAIL#	296
	123	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  7 definitions
  0 typedefs
  Definitions:
    alt_e1of2 = process-definition (defined) alt_e1of2(
        e1of2<> a
        bp<> t
        bp<> f
        bp<> e
      )
      In definition "alt_e1of2", we have: {
      Instances:
        a = e1of2<> alt_e1of2::a
        e = bp<> alt_e1of2::e
        f = bp<> alt_e1of2::f
        t = bp<> alt_e1of2::t
      unroll sequence: 
        ports: (
          e1of2<> a
          bp<> t
          bp<> f
          bp<> e
        )
        t.a = a.t;
        f.a = a.f;
        e.a = a.e;
      }

    blah1 = process-definition (defined) blah1(
        e1of2<> l
        e1of2<> r
      )
      In definition "blah1", we have: {
      Instances:
        l = e1of2<> blah1::l
        r = e1of2<> blah1::r
      unroll sequence: 
        ports: (
          e1of2<> l
          e1of2<> r
        )
        l.e@[iscomb=1]
      footprint: {
        l = process e1of2<>^0 = blah1<>::l (1) (
          t = bool^0 = blah1<>::l.t (1) 
          f = bool^0 = blah1<>::l.f (2) 
          e = bool^0 = blah1<>::l.e (3) @[ iscomb ] 
        )
        r = process e1of2<>^0 = blah1<>::r (2) (
          t = bool^0 = blah1<>::r.t (4) 
          f = bool^0 = blah1<>::r.f (5) 
          e = bool^0 = blah1<>::r.e (6) 
        )
        Created state:
        process instance pool:
        1	blah1<>::l
        2	blah1<>::r
        bool instance pool:
        1	blah1<>::l.t
        2	blah1<>::l.f
        3	blah1<>::l.e @[ iscomb ]
        4	blah1<>::r.t
        5	blah1<>::r.f
        6	blah1<>::r.e
      }
      }

    blah2 = process-definition (defined) blah2(
        e1of2<> l[0..0]
        e1of2<> r
      )
      In definition "blah2", we have: {
      Instances:
        l = e1of2<> blah2::l^1
        r = e1of2<> blah2::r
        xx = blah1<> blah2::xx
      unroll sequence: 
        ports: (
          e1of2<> l[0..0]
          e1of2<> r
        )
        blah1<> xx
        xx (l[0], r);
        r.t@[iscomb=1]
        r.f@[iscomb=1]
      footprint: {
        l = process e1of2<>^1
          {
            [0] = blah2<>::l[0] (3) (
              t = bool^0 = blah2<>::l[0].t (4) 
              f = bool^0 = blah2<>::l[0].f (5) 
              e = bool^0 = blah2<>::l[0].e (6) @[ iscomb ] 
            )
          }
        r = process e1of2<>^0 = blah2<>::r (1) (
          t = bool^0 = blah2<>::r.t (1) @[ iscomb ] 
          f = bool^0 = blah2<>::r.f (2) @[ iscomb ] 
          e = bool^0 = blah2<>::r.e (3) 
        )
        xx = process blah1<>^0 = blah2<>::xx (2) (
          l = process e1of2<>^0 = blah2<>::l[0] (3) (
            t = bool^0 = blah2<>::l[0].t (4) 
            f = bool^0 = blah2<>::l[0].f (5) 
            e = bool^0 = blah2<>::l[0].e (6) @[ iscomb ] 
          )
          r = process e1of2<>^0 = blah2<>::r (1) (
            t = bool^0 = blah2<>::r.t (1) @[ iscomb ] 
            f = bool^0 = blah2<>::r.f (2) @[ iscomb ] 
            e = bool^0 = blah2<>::r.e (3) 
          )
        )
        Created state:
        process instance pool:
        1	blah2<>::r
        2	blah2<>::xx
        3	blah2<>::l[0]
        bool instance pool:
        1	blah2<>::r.t @[ iscomb ]
        2	blah2<>::r.f @[ iscomb ]
        3	blah2<>::r.e
        4	blah2<>::l[0].t
        5	blah2<>::l[0].f
        6	blah2<>::l[0].e @[ iscomb ]
      }
      }

    blah3 = process-definition (defined) blah3(
        e1of2<> in
        e1of2<> out
      )
      In definition "blah3", we have: {
      Instances:
        in = e1of2<> blah3::in
        ma = blah2<> blah3::ma
        out = e1of2<> blah3::out
      unroll sequence: 
        ports: (
          e1of2<> in
          e1of2<> out
        )
        blah2<> ma
        ma ({ in }, out);
      footprint: {
        in = process e1of2<>^0 = blah3<>::in (1) (
          t = bool^0 = blah3<>::in.t (1) 
          f = bool^0 = blah3<>::in.f (2) 
          e = bool^0 = blah3<>::in.e (3) @[ iscomb ] 
        )
        ma = process blah2<>^0 = blah3<>::ma (3) (
          l = process e1of2<>^1
            {
              [0] = blah3<>::in (1) (
                t = bool^0 = blah3<>::in.t (1) 
                f = bool^0 = blah3<>::in.f (2) 
                e = bool^0 = blah3<>::in.e (3) @[ iscomb ] 
              )
            }
          r = process e1of2<>^0 = blah3<>::out (2) (
            t = bool^0 = blah3<>::out.t (4) @[ iscomb ] 
            f = bool^0 = blah3<>::out.f (5) @[ iscomb ] 
            e = bool^0 = blah3<>::out.e (6) 
          )
        )
        out = process e1of2<>^0 = blah3<>::out (2) (
          t = bool^0 = blah3<>::out.t (4) @[ iscomb ] 
          f = bool^0 = blah3<>::out.f (5) @[ iscomb ] 
          e = bool^0 = blah3<>::out.e (6) 
        )
        Created state:
        process instance pool:
        1	blah3<>::in
        2	blah3<>::out
        3	blah3<>::ma
        bool instance pool:
        1	blah3<>::in.t
        2	blah3<>::in.f
        3	blah3<>::in.e @[ iscomb ]
        4	blah3<>::out.t @[ iscomb ]
        5	blah3<>::out.f @[ iscomb ]
        6	blah3<>::out.e
      }
      }

    bp = process-definition (defined) bp(
        bool<> a
      )
      In definition "bp", we have: {
      Instances:
        a = bool<> bp::a
      unroll sequence: 
        ports: (
          bool<> a
        )
      }

    e1of2 = process-definition (defined) e1of2(
        bool<> t
        bool<> f
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        e = bool<> e1of2::e
        f = bool<> e1of2::f
        t = bool<> e1of2::t
      unroll sequence: 
        ports: (
          bool<> t
          bool<> f
          bool<> e
        )
      footprint: {
        e = bool^0 = e1of2<>::e (3) 
        f = bool^0 = e1of2<>::f (2) 
        t = bool^0 = e1of2<>::t (1) 
        Created state:
        bool instance pool:
        1	e1of2<>::t
        2	e1of2<>::f
        3	e1of2<>::e
      }
      }

    obox = process-definition (defined) obox(
      )
      In definition "obox", we have: {
      Instances:
        bar = blah3<> obox::bar
      unroll sequence: 
        blah3<> bar
      footprint: {
        bar = process blah3<>^0 = obox<>::bar (1) (
          in = process e1of2<>^0 = obox<>::bar.in (2) (
            t = bool^0 = obox<>::bar.in.t (1) 
            f = bool^0 = obox<>::bar.in.f (2) 
            e = bool^0 = obox<>::bar.in.e (3) @[ iscomb ] 
          )
          out = process e1of2<>^0 = obox<>::bar.out (3) (
            t = bool^0 = obox<>::bar.out.t (4) @[ iscomb ] 
            f = bool^0 = obox<>::bar.out.f (5) @[ iscomb ] 
            e = bool^0 = obox<>::bar.out.e (6) 
          )
        )
        Created state:
        process instance pool:
        1	obox<>::bar
        2	obox<>::bar.in
        3	obox<>::bar.out
        bool instance pool:
        1	obox<>::bar.in.t
        2	obox<>::bar.in.f
        3	obox<>::bar.in.e @[ iscomb ]
        4	obox<>::bar.out.t @[ iscomb ]
        5	obox<>::bar.out.f @[ iscomb ]
        6	obox<>::bar.out.e
      }
      }

  Instances:
    foo = obox<> foo
}

footprint: {
  foo = process obox<>^0 = foo (1) 
  Created state:
  process instance pool:
  1	foo
}
