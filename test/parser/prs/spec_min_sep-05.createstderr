
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	144
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	47
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	47
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	27	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	47
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	47
	32	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	37	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	47
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	51
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	footprnt	0	#HEAD#	#TAIL#	640
	57	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	footprnt	0	#HEAD#	#TAIL#	369
	60	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    groupie = process-definition (defined) groupie(
        bool<> p
        bool<> q
        bool<> r
      )
      In definition "groupie", we have: {
      Instances:
        p = bool<> groupie::p
        q = bool<> groupie::q
        r = bool<> groupie::r
        x = bool<> groupie::x^1
      unroll sequence: 
        bool<> p
        bool<> q
        bool<> r
        bool<> x[0..2]
      spec:
        min_sep<15>(x,q)
        min_sep<10>(p,x[0..1])
        min_sep<20>(x,r)
        min_sep<25>(q,x[0..1])
        min_sep<30>(x[0],x[1..2])
        min_sep<40>({x[0],x[1]},x[2])
      footprint: {
        p = bool^0 = groupie::p (1) 
        q = bool^0 = groupie::q (2) 
        r = bool^0 = groupie::r (3) 
        x = bool^1
          {
            [0] = groupie::x[0] (4) 
            [1] = groupie::x[1] (5) 
            [2] = groupie::x[2] (6) 
          }
        Created state:
        bool instance pool:
        1	groupie::p
        2	groupie::q
        3	groupie::r
        4	groupie::x[0]
        5	groupie::x[1]
        6	groupie::x[2]
        resolved specs:
        min_sep<15>({x[0],x[1],x[2]},q)
        min_sep<10>(p,{x[0],x[1]})
        min_sep<20>({x[0],x[1],x[2]},r)
        min_sep<25>(q,{x[0],x[1]})
        min_sep<30>(x[0],{x[1],x[2]})
        min_sep<40>({x[0],x[1]},x[2])
      }
      }

  Instances:
    g = groupie<> g
}

footprint: {
  g = process groupie<>^0 = g (1) (
    p = bool^0 = g.p (1) 
    q = bool^0 = g.q (2) 
    r = bool^0 = g.r (3) 
  )
  Created state:
  process instance pool:
  1	g
  bool instance pool:
  1	g.p
  2	g.q
  3	g.r
}
