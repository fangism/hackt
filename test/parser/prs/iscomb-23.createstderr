
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	48
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	117
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	9	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	procdefn	0	#HEAD#	#TAIL#	96
	18	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	19	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	20	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	26	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	footprnt	0	#HEAD#	#TAIL#	298
	28	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	29	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	31	##ADDR##	procdefn	0	#HEAD#	#TAIL#	97
	32	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	33	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	34	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	38	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	34
	39	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	footprnt	0	#HEAD#	#TAIL#	298
	43	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	44	##ADDR##	footprnt	0	#HEAD#	#TAIL#	610
	45	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	46	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	49	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	50	##ADDR##	procdefn	0	#HEAD#	#TAIL#	103
	51	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	52	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	53	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	54	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	55	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	59	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	60	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	62	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	64	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	65	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	66	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	67	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	footprnt	0	#HEAD#	#TAIL#	434
	69	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	70	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	71	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	72	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	73	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	74	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	75	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	76	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	77	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	78	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	79	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	80	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	81	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	82	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	83	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	84	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	85	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	86	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	87	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	88	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	89	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	90	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	91	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	92	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	93	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	95	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	96	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	97	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	98	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	99	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	100	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	101	##ADDR##	footprnt	0	#HEAD#	#TAIL#	434
	102	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	103	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	104	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	105	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	107	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	108	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	109	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	110	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	111	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	112	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	113	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	114	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1418
	115	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	116	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	117	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	118	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	119	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	120	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	121	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	122	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1030
	123	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  6 definitions
  0 typedefs
  Definitions:
    deep = process-definition (defined) deep(
        multi_inv<> x
        multi_inv<> y
      )
      In definition "deep", we have: {
      Instances:
        P = smoosh<> deep::P
        Q = twist<> deep::Q
        x = multi_inv<> deep::x
        y = multi_inv<> deep::y
      unroll sequence: 
        ports: (
          multi_inv<> x
          multi_inv<> y
        )
        smoosh<> P
        P (x.s[0], x.t[0]);
        twist<> Q
        Q (x.s[1], x.t[1]);
      footprint: {
        P = process smoosh<>^0 = deep<>::P (11) (
          j = process inv<>^0 = deep<>::x.s[0] (2) (
            a = bool^0 = deep<>::x.s[0].a (1) @[ iscomb ] 
            b = bool^0 = deep<>::x.s[0].b (2) @[ !autokeeper ] 
          )
          k = process inv2<>^0 = deep<>::x.t[0] (4) (
            a = bool^0 = deep<>::x.s[0].a (1) @[ iscomb ] 
            b = bool^0 = deep<>::x.s[0].b (2) @[ !autokeeper ] 
          )
        )
        Q = process twist<>^0 = deep<>::Q (12) (
          f = process inv<>^0 = deep<>::x.s[1] (3) (
            a = bool^0 = deep<>::x.s[1].a (3) @[ iscomb !autokeeper ] 
            b = bool^0 = deep<>::x.s[1].b (4) 
          )
          g = process inv2<>^0 = deep<>::x.t[1] (5) (
            a = bool^0 = deep<>::x.s[1].b (4) 
            b = bool^0 = deep<>::x.s[1].a (3) @[ iscomb !autokeeper ] 
          )
        )
        x = process multi_inv<>^0 = deep<>::x (1) (
          s = process inv<>^1
            {
              [0] = deep<>::x.s[0] (2) (
                a = bool^0 = deep<>::x.s[0].a (1) @[ iscomb ] 
                b = bool^0 = deep<>::x.s[0].b (2) @[ !autokeeper ] 
              )
              [1] = deep<>::x.s[1] (3) (
                a = bool^0 = deep<>::x.s[1].a (3) @[ iscomb !autokeeper ] 
                b = bool^0 = deep<>::x.s[1].b (4) 
              )
            }
          t = process inv2<>^1
            {
              [0] = deep<>::x.t[0] (4) (
                a = bool^0 = deep<>::x.s[0].a (1) @[ iscomb ] 
                b = bool^0 = deep<>::x.s[0].b (2) @[ !autokeeper ] 
              )
              [1] = deep<>::x.t[1] (5) (
                a = bool^0 = deep<>::x.s[1].b (4) 
                b = bool^0 = deep<>::x.s[1].a (3) @[ iscomb !autokeeper ] 
              )
            }
        )
        y = process multi_inv<>^0 = deep<>::y (6) (
          s = process inv<>^1
            {
              [0] = deep<>::y.s[0] (7) (
                a = bool^0 = deep<>::y.s[0].a (5) @[ iscomb ] 
                b = bool^0 = deep<>::y.s[0].b (6) 
              )
              [1] = deep<>::y.s[1] (8) (
                a = bool^0 = deep<>::y.s[1].a (7) @[ iscomb ] 
                b = bool^0 = deep<>::y.s[1].b (8) 
              )
            }
          t = process inv2<>^1
            {
              [0] = deep<>::y.t[0] (9) (
                a = bool^0 = deep<>::y.t[0].a (9) 
                b = bool^0 = deep<>::y.t[0].b (10) @[ !autokeeper ] 
              )
              [1] = deep<>::y.t[1] (10) (
                a = bool^0 = deep<>::y.t[1].a (11) 
                b = bool^0 = deep<>::y.t[1].b (12) @[ !autokeeper ] 
              )
            }
        )
        Created state:
        process instance pool:
        1	deep<>::x
        2	deep<>::x.s[0]
        3	deep<>::x.s[1]
        4	deep<>::x.t[0]
        5	deep<>::x.t[1]
        6	deep<>::y
        7	deep<>::y.s[0]
        8	deep<>::y.s[1]
        9	deep<>::y.t[0]
        10	deep<>::y.t[1]
        11	deep<>::P
        12	deep<>::Q
        bool instance pool:
        1	deep<>::x.s[0].a @[ iscomb ]
        2	deep<>::x.s[0].b @[ !autokeeper ]
        3	deep<>::x.s[1].a @[ iscomb !autokeeper ]
        4	deep<>::x.s[1].b
        5	deep<>::y.s[0].a @[ iscomb ]
        6	deep<>::y.s[0].b
        7	deep<>::y.s[1].a @[ iscomb ]
        8	deep<>::y.s[1].b
        9	deep<>::y.t[0].a
        10	deep<>::y.t[0].b @[ !autokeeper ]
        11	deep<>::y.t[1].a
        12	deep<>::y.t[1].b @[ !autokeeper ]
        bool port aliases:
        1: deep<>::x.s[0].a = deep<>::x.t[0].a @[ iscomb ]
        2: deep<>::x.s[0].b = deep<>::x.t[0].b @[ !autokeeper ]
        3: deep<>::x.s[1].a = deep<>::x.t[1].b @[ iscomb !autokeeper ]
        4: deep<>::x.s[1].b = deep<>::x.t[1].a
      }
      }

    inv = process-definition (defined) inv(
        bool<> a
        bool<> b
      )
      In definition "inv", we have: {
      Instances:
        a = bool<> inv::a
        b = bool<> inv::b
      unroll sequence: 
        ports: (
          bool<> a
          bool<> b
        )
        a@[iscomb=]
      footprint: {
        a = bool^0 = inv<>::a (1) @[ iscomb ] 
        b = bool^0 = inv<>::b (2) 
        Created state:
        bool instance pool:
        1	inv<>::a @[ iscomb ]
        2	inv<>::b
      }
      }

    inv2 = process-definition (defined) inv2(
        bool<> a
        bool<> b
      )
      In definition "inv2", we have: {
      Instances:
        a = bool<> inv2::a
        b = bool<> inv2::b
      unroll sequence: 
        ports: (
          bool<> a
          bool<> b
        )
        b@[autokeeper=0]
      footprint: {
        a = bool^0 = inv2<>::a (1) 
        b = bool^0 = inv2<>::b (2) @[ !autokeeper ] 
        Created state:
        bool instance pool:
        1	inv2<>::a
        2	inv2<>::b @[ !autokeeper ]
      }
      }

    multi_inv = process-definition (defined) multi_inv(
        inv<> s[0..1]
        inv2<> t[0..1]
      )
      In definition "multi_inv", we have: {
      Instances:
        s = inv<> multi_inv::s^1
        t = inv2<> multi_inv::t^1
      unroll sequence: 
        ports: (
          inv<> s[0..1]
          inv2<> t[0..1]
        )
      footprint: {
        s = process inv<>^1
          {
            [0] = multi_inv<>::s[0] (1) (
              a = bool^0 = multi_inv<>::s[0].a (1) @[ iscomb ] 
              b = bool^0 = multi_inv<>::s[0].b (2) 
            )
            [1] = multi_inv<>::s[1] (2) (
              a = bool^0 = multi_inv<>::s[1].a (3) @[ iscomb ] 
              b = bool^0 = multi_inv<>::s[1].b (4) 
            )
          }
        t = process inv2<>^1
          {
            [0] = multi_inv<>::t[0] (3) (
              a = bool^0 = multi_inv<>::t[0].a (5) 
              b = bool^0 = multi_inv<>::t[0].b (6) @[ !autokeeper ] 
            )
            [1] = multi_inv<>::t[1] (4) (
              a = bool^0 = multi_inv<>::t[1].a (7) 
              b = bool^0 = multi_inv<>::t[1].b (8) @[ !autokeeper ] 
            )
          }
        Created state:
        process instance pool:
        1	multi_inv<>::s[0]
        2	multi_inv<>::s[1]
        3	multi_inv<>::t[0]
        4	multi_inv<>::t[1]
        bool instance pool:
        1	multi_inv<>::s[0].a @[ iscomb ]
        2	multi_inv<>::s[0].b
        3	multi_inv<>::s[1].a @[ iscomb ]
        4	multi_inv<>::s[1].b
        5	multi_inv<>::t[0].a
        6	multi_inv<>::t[0].b @[ !autokeeper ]
        7	multi_inv<>::t[1].a
        8	multi_inv<>::t[1].b @[ !autokeeper ]
      }
      }

    smoosh = process-definition (defined) smoosh(
        inv<> j
        inv2<> k
      )
      In definition "smoosh", we have: {
      Instances:
        j = inv<> smoosh::j
        k = inv2<> smoosh::k
      unroll sequence: 
        ports: (
          inv<> j
          inv2<> k
        )
        j.a = k.a;
        j.b = k.b;
      footprint: {
        j = process inv<>^0 = smoosh<>::j (1) (
          a = bool^0 = smoosh<>::j.a (1) @[ iscomb ] 
          b = bool^0 = smoosh<>::j.b (2) @[ !autokeeper ] 
        )
        k = process inv2<>^0 = smoosh<>::k (2) (
          a = bool^0 = smoosh<>::j.a (1) @[ iscomb ] 
          b = bool^0 = smoosh<>::j.b (2) @[ !autokeeper ] 
        )
        Created state:
        process instance pool:
        1	smoosh<>::j
        2	smoosh<>::k
        bool instance pool:
        1	smoosh<>::j.a @[ iscomb ]
        2	smoosh<>::j.b @[ !autokeeper ]
        bool port aliases:
        1: smoosh<>::j.a = smoosh<>::k.a @[ iscomb ]
        2: smoosh<>::j.b = smoosh<>::k.b @[ !autokeeper ]
      }
      }

    twist = process-definition (defined) twist(
        inv<> f
        inv2<> g
      )
      In definition "twist", we have: {
      Instances:
        f = inv<> twist::f
        g = inv2<> twist::g
      unroll sequence: 
        ports: (
          inv<> f
          inv2<> g
        )
        f.a = g.b;
        f.b = g.a;
      footprint: {
        f = process inv<>^0 = twist<>::f (1) (
          a = bool^0 = twist<>::f.a (1) @[ iscomb !autokeeper ] 
          b = bool^0 = twist<>::f.b (2) 
        )
        g = process inv2<>^0 = twist<>::g (2) (
          a = bool^0 = twist<>::f.b (2) 
          b = bool^0 = twist<>::f.a (1) @[ iscomb !autokeeper ] 
        )
        Created state:
        process instance pool:
        1	twist<>::f
        2	twist<>::g
        bool instance pool:
        1	twist<>::f.a @[ iscomb !autokeeper ]
        2	twist<>::f.b
        bool port aliases:
        1: twist<>::f.a = twist<>::g.b @[ iscomb !autokeeper ]
        2: twist<>::f.b = twist<>::g.a
      }
      }

  Instances:
    sh1t = deep<> sh1t
}

footprint: {
  sh1t = process deep<>^0 = sh1t (1) (
    x = process multi_inv<>^0 = sh1t.x (2) (
      s = process inv<>^1
        {
          [0] = sh1t.x.s[0] (3) (
            a = bool^0 = sh1t.x.s[0].a (1) @[ iscomb ] 
            b = bool^0 = sh1t.x.s[0].b (2) @[ !autokeeper ] 
          )
          [1] = sh1t.x.s[1] (4) (
            a = bool^0 = sh1t.x.s[1].a (3) @[ iscomb !autokeeper ] 
            b = bool^0 = sh1t.x.s[1].b (4) 
          )
        }
      t = process inv2<>^1
        {
          [0] = sh1t.x.t[0] (5) (
            a = bool^0 = sh1t.x.s[0].a (1) @[ iscomb ] 
            b = bool^0 = sh1t.x.s[0].b (2) @[ !autokeeper ] 
          )
          [1] = sh1t.x.t[1] (6) (
            a = bool^0 = sh1t.x.s[1].b (4) 
            b = bool^0 = sh1t.x.s[1].a (3) @[ iscomb !autokeeper ] 
          )
        }
    )
    y = process multi_inv<>^0 = sh1t.y (7) (
      s = process inv<>^1
        {
          [0] = sh1t.y.s[0] (8) (
            a = bool^0 = sh1t.y.s[0].a (5) @[ iscomb ] 
            b = bool^0 = sh1t.y.s[0].b (6) 
          )
          [1] = sh1t.y.s[1] (9) (
            a = bool^0 = sh1t.y.s[1].a (7) @[ iscomb ] 
            b = bool^0 = sh1t.y.s[1].b (8) 
          )
        }
      t = process inv2<>^1
        {
          [0] = sh1t.y.t[0] (10) (
            a = bool^0 = sh1t.y.t[0].a (9) 
            b = bool^0 = sh1t.y.t[0].b (10) @[ !autokeeper ] 
          )
          [1] = sh1t.y.t[1] (11) (
            a = bool^0 = sh1t.y.t[1].a (11) 
            b = bool^0 = sh1t.y.t[1].b (12) @[ !autokeeper ] 
          )
        }
    )
  )
  Created state:
  process instance pool:
  1	sh1t
  2	sh1t.x
  3	sh1t.x.s[0]
  4	sh1t.x.s[1]
  5	sh1t.x.t[0]
  6	sh1t.x.t[1]
  7	sh1t.y
  8	sh1t.y.s[0]
  9	sh1t.y.s[1]
  10	sh1t.y.t[0]
  11	sh1t.y.t[1]
  bool instance pool:
  1	sh1t.x.s[0].a @[ iscomb ]
  2	sh1t.x.s[0].b @[ !autokeeper ]
  3	sh1t.x.s[1].a @[ iscomb !autokeeper ]
  4	sh1t.x.s[1].b
  5	sh1t.y.s[0].a @[ iscomb ]
  6	sh1t.y.s[0].b
  7	sh1t.y.s[1].a @[ iscomb ]
  8	sh1t.y.s[1].b
  9	sh1t.y.t[0].a
  10	sh1t.y.t[0].b @[ !autokeeper ]
  11	sh1t.y.t[1].a
  12	sh1t.y.t[1].b @[ !autokeeper ]
}
