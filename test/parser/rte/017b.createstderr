
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	156
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	13	##ADDR##	portscop	0	#HEAD#	#TAIL#	36
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	16	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	32	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	RTEanest	0	#HEAD#	#TAIL#	20
	38	##ADDR##	RTEassgn	0	#HEAD#	#TAIL#	16
	39	##ADDR##	RTEbinop	0	#HEAD#	#TAIL#	21
	40	##ADDR##	RTElitrl	0	#HEAD#	#TAIL#	12
	41	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	RTElitrl	0	#HEAD#	#TAIL#	12
	43	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	RTEassgn	0	#HEAD#	#TAIL#	16
	46	##ADDR##	RTEbinop	0	#HEAD#	#TAIL#	21
	47	##ADDR##	RTElitrl	0	#HEAD#	#TAIL#	12
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	RTElitrl	0	#HEAD#	#TAIL#	12
	50	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	footprnt	0	#HEAD#	#TAIL#	456
	53	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	55	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	56	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	57	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	61	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	64	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	65	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	66	##ADDR##	footprnt	0	#HEAD#	#TAIL#	507
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    foo = process-definition (defined) foo(
        bool<> !GND
        bool<> !Vdd
        bool<> x
        bool<> y
        bool<> w
        bool<> z
      )
      In definition "foo", we have: {
      Instances:
        !GND = bool<> foo::!GND
        !Vdd = bool<> foo::!Vdd
        w = bool<> foo::w
        x = bool<> foo::x
        y = bool<> foo::y
        z = bool<> foo::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          bool<> x
          bool<> y
          bool<> w
          bool<> z
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        x@[atomic]
        y@[atomic]
        w@[atomic]
      rte:
        {
        x = y & z
        w = z | y
        }
      footprint: {
        !GND = bool^0 = foo<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = foo<>::!Vdd (2) @[ supply_high port-alias ] 
        w = bool^0 = foo<>::w (5) @[ atomic loc-def port-alias ] 
        x = bool^0 = foo<>::x (3) @[ atomic loc-def port-alias ] 
        y = bool^0 = foo<>::y (4) @[ atomic loc-use port-alias ] 
        z = bool^0 = foo<>::z (6) @[ loc-use port-alias ] 
        Created state:
        bool instance pool: (6 ports, 0 local, 0 mapped)
        1	foo<>::!GND @[ supply_low port-alias ]	
        2	foo<>::!Vdd @[ supply_high port-alias ]	
        3	foo<>::x @[ atomic loc-def port-alias ]	
        4	foo<>::y @[ atomic loc-use port-alias ]	
        5	foo<>::w @[ atomic loc-def port-alias ]	
        6	foo<>::z @[ loc-use port-alias ]	
        resolved rte:
        x = y & z
        w = z | y
        Atomic dependency graph:
          3 -> {4,}
          4 -> {}
          5 -> {4,}
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    bar = foo<> bar
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  bar = process foo<>^0 = bar (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    x = bool^0 = bar.x (3) @[ atomic sub-def ] 
    y = bool^0 = bar.y (4) @[ atomic sub-use ] 
    w = bool^0 = bar.w (5) @[ atomic sub-def ] 
    z = bool^0 = bar.z (6) @[ sub-use ] 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 0 mapped)
  1	bar	foo<>
    bool: 1,2,3,4,5,6
  bool instance pool: (0 ports, 6 local, 0 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
  3	bar.x @[ atomic sub-def ]	
  4	bar.y @[ atomic sub-use ]	
  5	bar.w @[ atomic sub-def ]	
  6	bar.z @[ sub-use ]	
  Atomic dependency graph:
    3 -> {4,}
    4 -> {}
    5 -> {4,}
}
