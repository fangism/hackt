
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	64
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	164
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	9	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	14	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	15	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	16	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	17	##ADDR##	portscop	0	#HEAD#	#TAIL#	44
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	80
	25	##ADDR##	footprnt	0	#HEAD#	#TAIL#	270
	26	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	proctpdf	0	#HEAD#	#TAIL#	42
	29	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	procdefn	0	#HEAD#	#TAIL#	113
	31	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	32	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	33	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	34	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	35	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	42	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	45	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	34
	46	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	376
	48	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	49	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	51	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	52	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	condscop	0	#HEAD#	#TAIL#	32
	55	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	procdefn	0	#HEAD#	#TAIL#	156
	59	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	60	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	61	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	62	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	63	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	64	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	65	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	66	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	67	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	68	##ADDR##	portscop	0	#HEAD#	#TAIL#	44
	69	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	70	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	71	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	72	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	73	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	74	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	77	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	78	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	79	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	80	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	81	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	82	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	28
	83	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	84	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	85	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	86	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	87	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	88	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	89	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	footprnt	0	#HEAD#	#TAIL#	868
	91	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	93	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	95	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	97	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	48
	98	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	99	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	100	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	101	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	102	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	103	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	104	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	105	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1513
	106	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	107	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	108	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	109	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	110	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	111	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	112	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	113	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	114	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	115	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	116	##ADDR##	procdefn	0	#HEAD#	#TAIL#	161
	117	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	118	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	119	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	120	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	121	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	122	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	123	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	124	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	125	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	126	##ADDR##	portscop	0	#HEAD#	#TAIL#	44
	127	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	128	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	129	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	130	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	131	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	132	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	133	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	134	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	135	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	136	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	137	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	138	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	139	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	140	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	48
	141	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	142	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	143	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	144	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	145	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	146	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	147	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	148	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1504
	149	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	150	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	151	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	152	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	153	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	154	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	155	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	156	##ADDR##	procdefn	0	#HEAD#	#TAIL#	166
	157	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	158	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	159	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	160	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	161	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	162	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	163	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	164	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	165	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	166	##ADDR##	portscop	0	#HEAD#	#TAIL#	44
	167	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	168	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	169	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	170	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	171	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	172	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	173	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	174	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	175	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	176	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	177	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	178	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	179	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	180	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	181	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	182	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	183	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	48
	184	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	185	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	186	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	187	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	188	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	189	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	190	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	191	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1504
	192	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	193	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	194	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	195	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	196	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	197	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	198	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	199	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	200	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	201	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	202	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	203	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	204	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	205	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	206	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	207	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1606
	208	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	209	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  6 definitions
  1 typedefs
  Definitions:
    doh = process-definition (defined) doh<>
<
      pbool<> Q
      >(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "doh", we have: {
      Parameters:
        Q = pbool<> doh::Q
      Instances:
        !GND = bool<> doh::!GND
        !Vdd = bool<> doh::!Vdd
        co = e1of2<> doh::co
        fa0 = foo<> doh::fa0
        g = globals<> doh::g
        so = e1of2<> doh::so
        x = e1of2<> doh::x
        y = e1of2<> doh::y
        z = e1of2<> doh::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          e1of2<> x
          e1of2<> y
          e1of2<> z
          e1of2<> co
          e1of2<> so
        )
        [ Q ->
          foo<> fa0
          fa0 ( , , g, x, y, z, co, so);
        ]
      footprint collection: {
        <true> {
          !GND = bool^0 = doh<true>::!GND (14) 
          !Vdd = bool^0 = doh<true>::!Vdd (15) 
          Q = pbool^0 value: 1
          co = process e1of<2>^0 = doh<true>::co (5) (
            d = bool^1
              {
                [0] = doh<true>::co.d[0] (8) 
                [1] = doh<true>::co.d[1] (9) 
              }
            e = bool^0 = doh<true>::co.e (10) 
          )
          fa0 = process foo<>^0 = doh<true>::fa0 (7) (
            !GND = bool^0 = doh<true>::!GND (14) 
            !Vdd = bool^0 = doh<true>::!Vdd (15) 
            g = process globals<>^0 = doh<true>::g (1) 
            x = process e1of<2>^0 = doh<true>::x (2) (
              d = bool^1
                {
                  [0] = doh<true>::x.d[0] (1) 
                  [1] = doh<true>::x.d[1] (2) 
                }
              e = bool^0 = doh<true>::x.e (3) 
            )
            y = process e1of<2>^0 = doh<true>::y (3) (
              d = bool^1
                {
                  [0] = doh<true>::y.d[0] (4) 
                  [1] = doh<true>::y.d[1] (5) 
                }
              e = bool^0 = doh<true>::x.e (3) 
            )
            z = process e1of<2>^0 = doh<true>::z (4) (
              d = bool^1
                {
                  [0] = doh<true>::z.d[0] (6) 
                  [1] = doh<true>::z.d[1] (7) 
                }
              e = bool^0 = doh<true>::x.e (3) 
            )
            co = process e1of<2>^0 = doh<true>::co (5) (
              d = bool^1
                {
                  [0] = doh<true>::co.d[0] (8) 
                  [1] = doh<true>::co.d[1] (9) 
                }
              e = bool^0 = doh<true>::co.e (10) 
            )
            so = process e1of<2>^0 = doh<true>::so (6) (
              d = bool^1
                {
                  [0] = doh<true>::so.d[0] (11) 
                  [1] = doh<true>::so.d[1] (12) 
                }
              e = bool^0 = doh<true>::so.e (13) 
            )
          )
          g = process globals<>^0 = doh<true>::g (1) 
          so = process e1of<2>^0 = doh<true>::so (6) (
            d = bool^1
              {
                [0] = doh<true>::so.d[0] (11) 
                [1] = doh<true>::so.d[1] (12) 
              }
            e = bool^0 = doh<true>::so.e (13) 
          )
          x = process e1of<2>^0 = doh<true>::x (2) (
            d = bool^1
              {
                [0] = doh<true>::x.d[0] (1) 
                [1] = doh<true>::x.d[1] (2) 
              }
            e = bool^0 = doh<true>::x.e (3) 
          )
          y = process e1of<2>^0 = doh<true>::y (3) (
            d = bool^1
              {
                [0] = doh<true>::y.d[0] (4) 
                [1] = doh<true>::y.d[1] (5) 
              }
            e = bool^0 = doh<true>::x.e (3) 
          )
          z = process e1of<2>^0 = doh<true>::z (4) (
            d = bool^1
              {
                [0] = doh<true>::z.d[0] (6) 
                [1] = doh<true>::z.d[1] (7) 
              }
            e = bool^0 = doh<true>::x.e (3) 
          )
          Created state:
          process instance pool: (6 ports)
          1	doh<true>::g	globals<>
          2	doh<true>::x	e1of<2>
            bool: 3,1,2
          3	doh<true>::y	e1of<2>
            bool: 3,4,5
          4	doh<true>::z	e1of<2>
            bool: 3,6,7
          5	doh<true>::co	e1of<2>
            bool: 10,8,9
          6	doh<true>::so	e1of<2>
            bool: 13,11,12
          7	doh<true>::fa0	foo<>
            process: 1,2,3,4,5,6
            bool: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
          bool instance pool: (15 ports)
          1	doh<true>::x.d[0]	
          2	doh<true>::x.d[1]	
          3	doh<true>::x.e	
          4	doh<true>::y.d[0]	
          5	doh<true>::y.d[1]	
          6	doh<true>::z.d[0]	
          7	doh<true>::z.d[1]	
          8	doh<true>::co.d[0]	
          9	doh<true>::co.d[1]	
          10	doh<true>::co.e	
          11	doh<true>::so.d[0]	
          12	doh<true>::so.d[1]	
          13	doh<true>::so.e	
          14	doh<true>::!GND	
          15	doh<true>::!Vdd	
          bool port aliases:
          3: doh<true>::x.e = doh<true>::y.e = doh<true>::z.e
        }
      }
      }

    e1of = process-definition (defined) e1of<
      pint<> N
      >(
        bool<> d[0..N-1]
        bool<> e
      )
      In definition "e1of", we have: {
      Parameters:
        N = pint<> e1of::N
      Instances:
        d = bool<> e1of::d^1
        e = bool<> e1of::e
      unroll sequence: 
        ports: (
          bool<> d[0..N-1]
          bool<> e
        )
      spec:
        exclhi(d)
      footprint collection: {
        <2> {
          N = pint^0 value: 2
          d = bool^1
            {
              [0] = e1of<2>::d[0] (2) 
              [1] = e1of<2>::d[1] (3) 
            }
          e = bool^0 = e1of<2>::e (1) 
          Created state:
          bool instance pool: (3 ports)
          1	e1of<2>::e	
          2	e1of<2>::d[0]	
          3	e1of<2>::d[1]	
          resolved specs:
          exclhi({d[0],d[1]})
        }
      }
      }

    foo = process-definition (defined) foo(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "foo", we have: {
      Instances:
        !GND = bool<> foo::!GND
        !Vdd = bool<> foo::!Vdd
        co = e1of2<> foo::co
        g = globals<> foo::g
        ie = bool<> foo::ie
        so = e1of2<> foo::so
        x = e1of2<> foo::x
        y = e1of2<> foo::y
        z = e1of2<> foo::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          e1of2<> x
          e1of2<> y
          e1of2<> z
          e1of2<> co
          e1of2<> so
        )
        bool<> ie
        x.e = y.e = z.e = ie;
      footprint: {
        !GND = bool^0 = foo<>::!GND (14) 
        !Vdd = bool^0 = foo<>::!Vdd (15) 
        co = process e1of<2>^0 = foo<>::co (5) (
          d = bool^1
            {
              [0] = foo<>::co.d[0] (8) 
              [1] = foo<>::co.d[1] (9) 
            }
          e = bool^0 = foo<>::co.e (10) 
        )
        g = process globals<>^0 = foo<>::g (1) 
        ie = bool^0 = foo<>::ie (3) 
        so = process e1of<2>^0 = foo<>::so (6) (
          d = bool^1
            {
              [0] = foo<>::so.d[0] (11) 
              [1] = foo<>::so.d[1] (12) 
            }
          e = bool^0 = foo<>::so.e (13) 
        )
        x = process e1of<2>^0 = foo<>::x (2) (
          d = bool^1
            {
              [0] = foo<>::x.d[0] (1) 
              [1] = foo<>::x.d[1] (2) 
            }
          e = bool^0 = foo<>::ie (3) 
        )
        y = process e1of<2>^0 = foo<>::y (3) (
          d = bool^1
            {
              [0] = foo<>::y.d[0] (4) 
              [1] = foo<>::y.d[1] (5) 
            }
          e = bool^0 = foo<>::ie (3) 
        )
        z = process e1of<2>^0 = foo<>::z (4) (
          d = bool^1
            {
              [0] = foo<>::z.d[0] (6) 
              [1] = foo<>::z.d[1] (7) 
            }
          e = bool^0 = foo<>::ie (3) 
        )
        Created state:
        process instance pool: (6 ports)
        1	foo<>::g	globals<>
        2	foo<>::x	e1of<2>
          bool: 3,1,2
        3	foo<>::y	e1of<2>
          bool: 3,4,5
        4	foo<>::z	e1of<2>
          bool: 3,6,7
        5	foo<>::co	e1of<2>
          bool: 10,8,9
        6	foo<>::so	e1of<2>
          bool: 13,11,12
        bool instance pool: (15 ports)
        1	foo<>::x.d[0]	
        2	foo<>::x.d[1]	
        3	foo<>::ie	
        4	foo<>::y.d[0]	
        5	foo<>::y.d[1]	
        6	foo<>::z.d[0]	
        7	foo<>::z.d[1]	
        8	foo<>::co.d[0]	
        9	foo<>::co.d[1]	
        10	foo<>::co.e	
        11	foo<>::so.d[0]	
        12	foo<>::so.d[1]	
        13	foo<>::so.e	
        14	foo<>::!GND	
        15	foo<>::!Vdd	
        bool port aliases:
        3: foo<>::x.e = foo<>::y.e = foo<>::z.e
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    top_type = process-definition (defined) top_type(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "top_type", we have: {
      Instances:
        !GND = bool<> top_type::!GND
        !Vdd = bool<> top_type::!Vdd
        co = e1of2<> top_type::co
        g = globals<> top_type::g
        so = e1of2<> top_type::so
        top_fa = foo<> top_type::top_fa
        x = e1of2<> top_type::x
        y = e1of2<> top_type::y
        z = e1of2<> top_type::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          e1of2<> x
          e1of2<> y
          e1of2<> z
          e1of2<> co
          e1of2<> so
        )
        foo<> top_fa
        top_fa ( , , g, x, y, z, co, so);
      footprint: {
        !GND = bool^0 = top_type<>::!GND (14) 
        !Vdd = bool^0 = top_type<>::!Vdd (15) 
        co = process e1of<2>^0 = top_type<>::co (5) (
          d = bool^1
            {
              [0] = top_type<>::co.d[0] (8) 
              [1] = top_type<>::co.d[1] (9) 
            }
          e = bool^0 = top_type<>::co.e (10) 
        )
        g = process globals<>^0 = top_type<>::g (1) 
        so = process e1of<2>^0 = top_type<>::so (6) (
          d = bool^1
            {
              [0] = top_type<>::so.d[0] (11) 
              [1] = top_type<>::so.d[1] (12) 
            }
          e = bool^0 = top_type<>::so.e (13) 
        )
        top_fa = process foo<>^0 = top_type<>::top_fa (7) (
          !GND = bool^0 = top_type<>::!GND (14) 
          !Vdd = bool^0 = top_type<>::!Vdd (15) 
          g = process globals<>^0 = top_type<>::g (1) 
          x = process e1of<2>^0 = top_type<>::x (2) (
            d = bool^1
              {
                [0] = top_type<>::x.d[0] (1) 
                [1] = top_type<>::x.d[1] (2) 
              }
            e = bool^0 = top_type<>::x.e (3) 
          )
          y = process e1of<2>^0 = top_type<>::y (3) (
            d = bool^1
              {
                [0] = top_type<>::y.d[0] (4) 
                [1] = top_type<>::y.d[1] (5) 
              }
            e = bool^0 = top_type<>::x.e (3) 
          )
          z = process e1of<2>^0 = top_type<>::z (4) (
            d = bool^1
              {
                [0] = top_type<>::z.d[0] (6) 
                [1] = top_type<>::z.d[1] (7) 
              }
            e = bool^0 = top_type<>::x.e (3) 
          )
          co = process e1of<2>^0 = top_type<>::co (5) (
            d = bool^1
              {
                [0] = top_type<>::co.d[0] (8) 
                [1] = top_type<>::co.d[1] (9) 
              }
            e = bool^0 = top_type<>::co.e (10) 
          )
          so = process e1of<2>^0 = top_type<>::so (6) (
            d = bool^1
              {
                [0] = top_type<>::so.d[0] (11) 
                [1] = top_type<>::so.d[1] (12) 
              }
            e = bool^0 = top_type<>::so.e (13) 
          )
        )
        x = process e1of<2>^0 = top_type<>::x (2) (
          d = bool^1
            {
              [0] = top_type<>::x.d[0] (1) 
              [1] = top_type<>::x.d[1] (2) 
            }
          e = bool^0 = top_type<>::x.e (3) 
        )
        y = process e1of<2>^0 = top_type<>::y (3) (
          d = bool^1
            {
              [0] = top_type<>::y.d[0] (4) 
              [1] = top_type<>::y.d[1] (5) 
            }
          e = bool^0 = top_type<>::x.e (3) 
        )
        z = process e1of<2>^0 = top_type<>::z (4) (
          d = bool^1
            {
              [0] = top_type<>::z.d[0] (6) 
              [1] = top_type<>::z.d[1] (7) 
            }
          e = bool^0 = top_type<>::x.e (3) 
        )
        Created state:
        process instance pool: (6 ports)
        1	top_type<>::g	globals<>
        2	top_type<>::x	e1of<2>
          bool: 3,1,2
        3	top_type<>::y	e1of<2>
          bool: 3,4,5
        4	top_type<>::z	e1of<2>
          bool: 3,6,7
        5	top_type<>::co	e1of<2>
          bool: 10,8,9
        6	top_type<>::so	e1of<2>
          bool: 13,11,12
        7	top_type<>::top_fa	foo<>
          process: 1,2,3,4,5,6
          bool: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
        bool instance pool: (15 ports)
        1	top_type<>::x.d[0]	
        2	top_type<>::x.d[1]	
        3	top_type<>::x.e	
        4	top_type<>::y.d[0]	
        5	top_type<>::y.d[1]	
        6	top_type<>::z.d[0]	
        7	top_type<>::z.d[1]	
        8	top_type<>::co.d[0]	
        9	top_type<>::co.d[1]	
        10	top_type<>::co.e	
        11	top_type<>::so.d[0]	
        12	top_type<>::so.d[1]	
        13	top_type<>::so.e	
        14	top_type<>::!GND	
        15	top_type<>::!Vdd	
        bool port aliases:
        3: top_type<>::x.e = top_type<>::y.e = top_type<>::z.e
      }
      }

    top_type2 = process-definition (defined) top_type2(
        bool<> !GND
        bool<> !Vdd
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "top_type2", we have: {
      Instances:
        !GND = bool<> top_type2::!GND
        !Vdd = bool<> top_type2::!Vdd
        co = e1of2<> top_type2::co
        g = globals<> top_type2::g
        so = e1of2<> top_type2::so
        top_cpa = doh<> top_type2::top_cpa
        x = e1of2<> top_type2::x
        y = e1of2<> top_type2::y
        z = e1of2<> top_type2::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          globals<> g
          e1of2<> x
          e1of2<> y
          e1of2<> z
          e1of2<> co
          e1of2<> so
        )
        doh<> top_cpa
        top_cpa<true>
        top_cpa ( , , g, x, y, z, co, so);
      footprint: {
        !GND = bool^0 = top_type2<>::!GND (14) 
        !Vdd = bool^0 = top_type2<>::!Vdd (15) 
        co = process e1of<2>^0 = top_type2<>::co (5) (
          d = bool^1
            {
              [0] = top_type2<>::co.d[0] (8) 
              [1] = top_type2<>::co.d[1] (9) 
            }
          e = bool^0 = top_type2<>::co.e (10) 
        )
        g = process globals<>^0 = top_type2<>::g (1) 
        so = process e1of<2>^0 = top_type2<>::so (6) (
          d = bool^1
            {
              [0] = top_type2<>::so.d[0] (11) 
              [1] = top_type2<>::so.d[1] (12) 
            }
          e = bool^0 = top_type2<>::so.e (13) 
        )
        top_cpa = process doh<>^0<true> = top_type2<>::top_cpa (7) (
          !GND = bool^0 = top_type2<>::!GND (14) 
          !Vdd = bool^0 = top_type2<>::!Vdd (15) 
          g = process globals<>^0 = top_type2<>::g (1) 
          x = process e1of<2>^0 = top_type2<>::x (2) (
            d = bool^1
              {
                [0] = top_type2<>::x.d[0] (1) 
                [1] = top_type2<>::x.d[1] (2) 
              }
            e = bool^0 = top_type2<>::x.e (3) 
          )
          y = process e1of<2>^0 = top_type2<>::y (3) (
            d = bool^1
              {
                [0] = top_type2<>::y.d[0] (4) 
                [1] = top_type2<>::y.d[1] (5) 
              }
            e = bool^0 = top_type2<>::x.e (3) 
          )
          z = process e1of<2>^0 = top_type2<>::z (4) (
            d = bool^1
              {
                [0] = top_type2<>::z.d[0] (6) 
                [1] = top_type2<>::z.d[1] (7) 
              }
            e = bool^0 = top_type2<>::x.e (3) 
          )
          co = process e1of<2>^0 = top_type2<>::co (5) (
            d = bool^1
              {
                [0] = top_type2<>::co.d[0] (8) 
                [1] = top_type2<>::co.d[1] (9) 
              }
            e = bool^0 = top_type2<>::co.e (10) 
          )
          so = process e1of<2>^0 = top_type2<>::so (6) (
            d = bool^1
              {
                [0] = top_type2<>::so.d[0] (11) 
                [1] = top_type2<>::so.d[1] (12) 
              }
            e = bool^0 = top_type2<>::so.e (13) 
          )
        )
        x = process e1of<2>^0 = top_type2<>::x (2) (
          d = bool^1
            {
              [0] = top_type2<>::x.d[0] (1) 
              [1] = top_type2<>::x.d[1] (2) 
            }
          e = bool^0 = top_type2<>::x.e (3) 
        )
        y = process e1of<2>^0 = top_type2<>::y (3) (
          d = bool^1
            {
              [0] = top_type2<>::y.d[0] (4) 
              [1] = top_type2<>::y.d[1] (5) 
            }
          e = bool^0 = top_type2<>::x.e (3) 
        )
        z = process e1of<2>^0 = top_type2<>::z (4) (
          d = bool^1
            {
              [0] = top_type2<>::z.d[0] (6) 
              [1] = top_type2<>::z.d[1] (7) 
            }
          e = bool^0 = top_type2<>::x.e (3) 
        )
        Created state:
        process instance pool: (6 ports)
        1	top_type2<>::g	globals<>
        2	top_type2<>::x	e1of<2>
          bool: 3,1,2
        3	top_type2<>::y	e1of<2>
          bool: 3,4,5
        4	top_type2<>::z	e1of<2>
          bool: 3,6,7
        5	top_type2<>::co	e1of<2>
          bool: 10,8,9
        6	top_type2<>::so	e1of<2>
          bool: 13,11,12
        7	top_type2<>::top_cpa<true>	doh<true>
          process: 1,2,3,4,5,6
          bool: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
        private sub-process index map:
          (7 -> 0)
          (8 -> 1)
        bool instance pool: (15 ports)
        1	top_type2<>::x.d[0]	
        2	top_type2<>::x.d[1]	
        3	top_type2<>::x.e	
        4	top_type2<>::y.d[0]	
        5	top_type2<>::y.d[1]	
        6	top_type2<>::z.d[0]	
        7	top_type2<>::z.d[1]	
        8	top_type2<>::co.d[0]	
        9	top_type2<>::co.d[1]	
        10	top_type2<>::co.e	
        11	top_type2<>::so.d[0]	
        12	top_type2<>::so.d[1]	
        13	top_type2<>::so.e	
        14	top_type2<>::!GND	
        15	top_type2<>::!Vdd	
        bool port aliases:
        3: top_type2<>::x.e = top_type2<>::y.e = top_type2<>::z.e
      }
      }

  Typedefs:
    e1of2 = process-definition-alias: e1of2
      = e1of<2>
  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    top = top_type<> top
    top2 = top_type2<> top2
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  top = process top_type<>^0 = top (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    g = process globals<>^0 = top.g (2) 
    x = process e1of<2>^0 = top.x (3) (
      d = bool^1
        {
          [0] = top.x.d[0] (3) 
          [1] = top.x.d[1] (4) 
        }
      e = bool^0 = top.x.e (5) 
    )
    y = process e1of<2>^0 = top.y (4) (
      d = bool^1
        {
          [0] = top.y.d[0] (6) 
          [1] = top.y.d[1] (7) 
        }
      e = bool^0 = top.x.e (5) 
    )
    z = process e1of<2>^0 = top.z (5) (
      d = bool^1
        {
          [0] = top.z.d[0] (8) 
          [1] = top.z.d[1] (9) 
        }
      e = bool^0 = top.x.e (5) 
    )
    co = process e1of<2>^0 = top.co (6) (
      d = bool^1
        {
          [0] = top.co.d[0] (10) 
          [1] = top.co.d[1] (11) 
        }
      e = bool^0 = top.co.e (12) 
    )
    so = process e1of<2>^0 = top.so (7) (
      d = bool^1
        {
          [0] = top.so.d[0] (13) 
          [1] = top.so.d[1] (14) 
        }
      e = bool^0 = top.so.e (15) 
    )
  )
  top2 = process top_type2<>^0 = top2 (8) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    g = process globals<>^0 = top2.g (9) 
    x = process e1of<2>^0 = top2.x (10) (
      d = bool^1
        {
          [0] = top2.x.d[0] (16) 
          [1] = top2.x.d[1] (17) 
        }
      e = bool^0 = top2.x.e (18) 
    )
    y = process e1of<2>^0 = top2.y (11) (
      d = bool^1
        {
          [0] = top2.y.d[0] (19) 
          [1] = top2.y.d[1] (20) 
        }
      e = bool^0 = top2.x.e (18) 
    )
    z = process e1of<2>^0 = top2.z (12) (
      d = bool^1
        {
          [0] = top2.z.d[0] (21) 
          [1] = top2.z.d[1] (22) 
        }
      e = bool^0 = top2.x.e (18) 
    )
    co = process e1of<2>^0 = top2.co (13) (
      d = bool^1
        {
          [0] = top2.co.d[0] (23) 
          [1] = top2.co.d[1] (24) 
        }
      e = bool^0 = top2.co.e (25) 
    )
    so = process e1of<2>^0 = top2.so (14) (
      d = bool^1
        {
          [0] = top2.so.d[0] (26) 
          [1] = top2.so.d[1] (27) 
        }
      e = bool^0 = top2.so.e (28) 
    )
  )
  Created state:
  process instance pool: (0 ports)
  1	top	top_type<>
    process: 2,3,4,5,6,7
    bool: 3,4,5,6,7,8,9,10,11,12,13,14,15,1,2
  2	top.g	globals<>
  3	top.x	e1of<2>
    bool: 5,3,4
  4	top.y	e1of<2>
    bool: 5,6,7
  5	top.z	e1of<2>
    bool: 5,8,9
  6	top.co	e1of<2>
    bool: 12,10,11
  7	top.so	e1of<2>
    bool: 15,13,14
  8	top2	top_type2<>
    process: 9,10,11,12,13,14
    bool: 16,17,18,19,20,21,22,23,24,25,26,27,28,1,2
  9	top2.g	globals<>
  10	top2.x	e1of<2>
    bool: 18,16,17
  11	top2.y	e1of<2>
    bool: 18,19,20
  12	top2.z	e1of<2>
    bool: 18,21,22
  13	top2.co	e1of<2>
    bool: 25,23,24
  14	top2.so	e1of<2>
    bool: 28,26,27
  private sub-process index map:
    (1 -> 0)
    (8 -> 1)
    (15 -> 3)
  bool instance pool: (0 ports)
  1	!GND	
  2	!Vdd	
  3	top.x.d[0]	
  4	top.x.d[1]	
  5	top.x.e	
  6	top.y.d[0]	
  7	top.y.d[1]	
  8	top.z.d[0]	
  9	top.z.d[1]	
  10	top.co.d[0]	
  11	top.co.d[1]	
  12	top.co.e	
  13	top.so.d[0]	
  14	top.so.d[1]	
  15	top.so.e	
  16	top2.x.d[0]	
  17	top2.x.d[1]	
  18	top2.x.e	
  19	top2.y.d[0]	
  20	top2.y.d[1]	
  21	top2.z.d[0]	
  22	top2.z.d[1]	
  23	top2.co.d[0]	
  24	top2.co.d[1]	
  25	top2.co.e	
  26	top2.so.d[0]	
  27	top2.so.d[1]	
  28	top2.so.e	
}
