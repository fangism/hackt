
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	56
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	164
	4	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	procdefn	0	#HEAD#	#TAIL#	76
	16	##ADDR##	footprnt	0	#HEAD#	#TAIL#	262
	17	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	proctpdf	0	#HEAD#	#TAIL#	42
	20	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	procdefn	0	#HEAD#	#TAIL#	113
	22	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	23	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	24	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	25	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	29	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	33	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	SPCdrctv	0	#HEAD#	#TAIL#	34
	37	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	footprnt	0	#HEAD#	#TAIL#	368
	40	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	42	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	44	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	45	##ADDR##	condscop	0	#HEAD#	#TAIL#	32
	46	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	procdefn	0	#HEAD#	#TAIL#	156
	50	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	51	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	52	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	26
	53	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	54	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	55	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	56	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	57	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	60	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	61	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	62	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	63	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	64	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	65	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	66	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	28
	68	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	69	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	70	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	71	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	72	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	73	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	74	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	75	##ADDR##	footprnt	0	#HEAD#	#TAIL#	828
	76	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	78	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	79	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	80	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	81	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	82	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	40
	83	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	84	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	85	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	86	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	87	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	88	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	89	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	91	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1419
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	93	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	95	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	97	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	100	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	101	##ADDR##	procdefn	0	#HEAD#	#TAIL#	161
	102	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	103	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	104	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	105	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	106	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	107	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	108	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	109	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	110	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	111	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	112	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	113	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	114	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	115	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	116	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	117	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	118	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	119	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	40
	120	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	121	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	122	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	123	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	124	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	125	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	126	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	127	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1410
	128	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	129	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	130	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	131	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	132	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	133	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	134	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	135	##ADDR##	procdefn	0	#HEAD#	#TAIL#	166
	136	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	137	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	138	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	139	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	140	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	141	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	142	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	143	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	144	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	145	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	146	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	147	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	148	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	149	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	150	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	151	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	152	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	153	##ADDR##	proctpcp	0	#HEAD#	#TAIL#	16
	154	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	155	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	156	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	40
	157	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	158	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	159	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	160	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	161	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	162	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	163	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	164	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1410
	165	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	166	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	167	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	168	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	169	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	170	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	171	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	172	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	173	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	174	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	175	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	176	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	177	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1458
	178	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	179	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  6 definitions
  1 typedefs
  Definitions:
    doh = process-definition (defined) doh<>
<
      pbool<> Q
      >(
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "doh", we have: {
      Parameters:
        Q = pbool<> doh::Q
      Instances:
        co = e1of2<> doh::co
        fa0 = foo<> doh::fa0
        g = globals<> doh::g
        so = e1of2<> doh::so
        x = e1of2<> doh::x
        y = e1of2<> doh::y
        z = e1of2<> doh::z
      unroll sequence: 
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
        [ Q ->
          foo<> fa0
          fa0 (g, x, y, z, co, so);
        ]
      footprint collection: {
        <true> {
          Q = pbool^0 value: 1
          co = process e1of<2>^0 = doh::co (5) (
            d = bool^1
              {
                [0] = doh::co.d[0] (8) 
                [1] = doh::co.d[1] (9) 
              }
            e = bool^0 = doh::co.e (10) 
          )
          fa0 = process foo<>^0 = doh::fa0 (7) (
            g = process globals<>^0 = doh::g (1) 
            x = process e1of<2>^0 = doh::x (2) (
              d = bool^1
                {
                  [0] = doh::x.d[0] (1) 
                  [1] = doh::x.d[1] (2) 
                }
              e = bool^0 = doh::x.e (3) 
            )
            y = process e1of<2>^0 = doh::y (3) (
              d = bool^1
                {
                  [0] = doh::y.d[0] (4) 
                  [1] = doh::y.d[1] (5) 
                }
              e = bool^0 = doh::x.e (3) 
            )
            z = process e1of<2>^0 = doh::z (4) (
              d = bool^1
                {
                  [0] = doh::z.d[0] (6) 
                  [1] = doh::z.d[1] (7) 
                }
              e = bool^0 = doh::x.e (3) 
            )
            co = process e1of<2>^0 = doh::co (5) (
              d = bool^1
                {
                  [0] = doh::co.d[0] (8) 
                  [1] = doh::co.d[1] (9) 
                }
              e = bool^0 = doh::co.e (10) 
            )
            so = process e1of<2>^0 = doh::so (6) (
              d = bool^1
                {
                  [0] = doh::so.d[0] (11) 
                  [1] = doh::so.d[1] (12) 
                }
              e = bool^0 = doh::so.e (13) 
            )
          )
          g = process globals<>^0 = doh::g (1) 
          so = process e1of<2>^0 = doh::so (6) (
            d = bool^1
              {
                [0] = doh::so.d[0] (11) 
                [1] = doh::so.d[1] (12) 
              }
            e = bool^0 = doh::so.e (13) 
          )
          x = process e1of<2>^0 = doh::x (2) (
            d = bool^1
              {
                [0] = doh::x.d[0] (1) 
                [1] = doh::x.d[1] (2) 
              }
            e = bool^0 = doh::x.e (3) 
          )
          y = process e1of<2>^0 = doh::y (3) (
            d = bool^1
              {
                [0] = doh::y.d[0] (4) 
                [1] = doh::y.d[1] (5) 
              }
            e = bool^0 = doh::x.e (3) 
          )
          z = process e1of<2>^0 = doh::z (4) (
            d = bool^1
              {
                [0] = doh::z.d[0] (6) 
                [1] = doh::z.d[1] (7) 
              }
            e = bool^0 = doh::x.e (3) 
          )
          Created state:
          process instance pool:
          1	doh::g
          2	doh::x
          3	doh::y
          4	doh::z
          5	doh::co
          6	doh::so
          7	doh::fa0
          bool instance pool:
          1	doh::x.d[0]
          2	doh::x.d[1]
          3	doh::x.e
          4	doh::y.d[0]
          5	doh::y.d[1]
          6	doh::z.d[0]
          7	doh::z.d[1]
          8	doh::co.d[0]
          9	doh::co.d[1]
          10	doh::co.e
          11	doh::so.d[0]
          12	doh::so.d[1]
          13	doh::so.e
          bool port aliases:
          3: doh::x.e = doh::y.e = doh::z.e
        }
      }
      }

    e1of = process-definition (defined) e1of<
      pint<> N
      >(
        bool<> d[0..N-1]
        bool<> e
      )
      In definition "e1of", we have: {
      Parameters:
        N = pint<> e1of::N
      Instances:
        d = bool<> e1of::d^1
        e = bool<> e1of::e
      unroll sequence: 
        bool<> d[0..N-1]
        bool<> e
      spec:
        exclhi(d)
      footprint collection: {
        <2> {
          N = pint^0 value: 2
          d = bool^1
            {
              [0] = e1of::d[0] (2) 
              [1] = e1of::d[1] (3) 
            }
          e = bool^0 = e1of::e (1) 
          Created state:
          bool instance pool:
          1	e1of::e
          2	e1of::d[0]
          3	e1of::d[1]
          resolved specs:
          exclhi({d[0],d[1]})
        }
      }
      }

    foo = process-definition (defined) foo(
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "foo", we have: {
      Instances:
        co = e1of2<> foo::co
        g = globals<> foo::g
        ie = bool<> foo::ie
        so = e1of2<> foo::so
        x = e1of2<> foo::x
        y = e1of2<> foo::y
        z = e1of2<> foo::z
      unroll sequence: 
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
        bool<> ie
        x.e = y.e = z.e = ie;
      footprint: {
        co = process e1of<2>^0 = foo::co (5) (
          d = bool^1
            {
              [0] = foo::co.d[0] (8) 
              [1] = foo::co.d[1] (9) 
            }
          e = bool^0 = foo::co.e (10) 
        )
        g = process globals<>^0 = foo::g (1) 
        ie = bool^0 = foo::ie (3) 
        so = process e1of<2>^0 = foo::so (6) (
          d = bool^1
            {
              [0] = foo::so.d[0] (11) 
              [1] = foo::so.d[1] (12) 
            }
          e = bool^0 = foo::so.e (13) 
        )
        x = process e1of<2>^0 = foo::x (2) (
          d = bool^1
            {
              [0] = foo::x.d[0] (1) 
              [1] = foo::x.d[1] (2) 
            }
          e = bool^0 = foo::ie (3) 
        )
        y = process e1of<2>^0 = foo::y (3) (
          d = bool^1
            {
              [0] = foo::y.d[0] (4) 
              [1] = foo::y.d[1] (5) 
            }
          e = bool^0 = foo::ie (3) 
        )
        z = process e1of<2>^0 = foo::z (4) (
          d = bool^1
            {
              [0] = foo::z.d[0] (6) 
              [1] = foo::z.d[1] (7) 
            }
          e = bool^0 = foo::ie (3) 
        )
        Created state:
        process instance pool:
        1	foo::g
        2	foo::x
        3	foo::y
        4	foo::z
        5	foo::co
        6	foo::so
        bool instance pool:
        1	foo::x.d[0]
        2	foo::x.d[1]
        3	foo::ie
        4	foo::y.d[0]
        5	foo::y.d[1]
        6	foo::z.d[0]
        7	foo::z.d[1]
        8	foo::co.d[0]
        9	foo::co.d[1]
        10	foo::co.e
        11	foo::so.d[0]
        12	foo::so.d[1]
        13	foo::so.e
        bool port aliases:
        3: foo::x.e = foo::y.e = foo::z.e
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    top_type = process-definition (defined) top_type(
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "top_type", we have: {
      Instances:
        co = e1of2<> top_type::co
        g = globals<> top_type::g
        so = e1of2<> top_type::so
        top_fa = foo<> top_type::top_fa
        x = e1of2<> top_type::x
        y = e1of2<> top_type::y
        z = e1of2<> top_type::z
      unroll sequence: 
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
        foo<> top_fa
        top_fa (g, x, y, z, co, so);
      footprint: {
        co = process e1of<2>^0 = top_type::co (5) (
          d = bool^1
            {
              [0] = top_type::co.d[0] (8) 
              [1] = top_type::co.d[1] (9) 
            }
          e = bool^0 = top_type::co.e (10) 
        )
        g = process globals<>^0 = top_type::g (1) 
        so = process e1of<2>^0 = top_type::so (6) (
          d = bool^1
            {
              [0] = top_type::so.d[0] (11) 
              [1] = top_type::so.d[1] (12) 
            }
          e = bool^0 = top_type::so.e (13) 
        )
        top_fa = process foo<>^0 = top_type::top_fa (7) (
          g = process globals<>^0 = top_type::g (1) 
          x = process e1of<2>^0 = top_type::x (2) (
            d = bool^1
              {
                [0] = top_type::x.d[0] (1) 
                [1] = top_type::x.d[1] (2) 
              }
            e = bool^0 = top_type::x.e (3) 
          )
          y = process e1of<2>^0 = top_type::y (3) (
            d = bool^1
              {
                [0] = top_type::y.d[0] (4) 
                [1] = top_type::y.d[1] (5) 
              }
            e = bool^0 = top_type::x.e (3) 
          )
          z = process e1of<2>^0 = top_type::z (4) (
            d = bool^1
              {
                [0] = top_type::z.d[0] (6) 
                [1] = top_type::z.d[1] (7) 
              }
            e = bool^0 = top_type::x.e (3) 
          )
          co = process e1of<2>^0 = top_type::co (5) (
            d = bool^1
              {
                [0] = top_type::co.d[0] (8) 
                [1] = top_type::co.d[1] (9) 
              }
            e = bool^0 = top_type::co.e (10) 
          )
          so = process e1of<2>^0 = top_type::so (6) (
            d = bool^1
              {
                [0] = top_type::so.d[0] (11) 
                [1] = top_type::so.d[1] (12) 
              }
            e = bool^0 = top_type::so.e (13) 
          )
        )
        x = process e1of<2>^0 = top_type::x (2) (
          d = bool^1
            {
              [0] = top_type::x.d[0] (1) 
              [1] = top_type::x.d[1] (2) 
            }
          e = bool^0 = top_type::x.e (3) 
        )
        y = process e1of<2>^0 = top_type::y (3) (
          d = bool^1
            {
              [0] = top_type::y.d[0] (4) 
              [1] = top_type::y.d[1] (5) 
            }
          e = bool^0 = top_type::x.e (3) 
        )
        z = process e1of<2>^0 = top_type::z (4) (
          d = bool^1
            {
              [0] = top_type::z.d[0] (6) 
              [1] = top_type::z.d[1] (7) 
            }
          e = bool^0 = top_type::x.e (3) 
        )
        Created state:
        process instance pool:
        1	top_type::g
        2	top_type::x
        3	top_type::y
        4	top_type::z
        5	top_type::co
        6	top_type::so
        7	top_type::top_fa
        bool instance pool:
        1	top_type::x.d[0]
        2	top_type::x.d[1]
        3	top_type::x.e
        4	top_type::y.d[0]
        5	top_type::y.d[1]
        6	top_type::z.d[0]
        7	top_type::z.d[1]
        8	top_type::co.d[0]
        9	top_type::co.d[1]
        10	top_type::co.e
        11	top_type::so.d[0]
        12	top_type::so.d[1]
        13	top_type::so.e
        bool port aliases:
        3: top_type::x.e = top_type::y.e = top_type::z.e
      }
      }

    top_type2 = process-definition (defined) top_type2(
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
      )
      In definition "top_type2", we have: {
      Instances:
        co = e1of2<> top_type2::co
        g = globals<> top_type2::g
        so = e1of2<> top_type2::so
        top_cpa = doh<> top_type2::top_cpa
        x = e1of2<> top_type2::x
        y = e1of2<> top_type2::y
        z = e1of2<> top_type2::z
      unroll sequence: 
        globals<> g
        e1of2<> x
        e1of2<> y
        e1of2<> z
        e1of2<> co
        e1of2<> so
        doh<> top_cpa
        top_cpa<true>
        top_cpa (g, x, y, z, co, so);
      footprint: {
        co = process e1of<2>^0 = top_type2::co (5) (
          d = bool^1
            {
              [0] = top_type2::co.d[0] (8) 
              [1] = top_type2::co.d[1] (9) 
            }
          e = bool^0 = top_type2::co.e (10) 
        )
        g = process globals<>^0 = top_type2::g (1) 
        so = process e1of<2>^0 = top_type2::so (6) (
          d = bool^1
            {
              [0] = top_type2::so.d[0] (11) 
              [1] = top_type2::so.d[1] (12) 
            }
          e = bool^0 = top_type2::so.e (13) 
        )
        top_cpa = process doh<>^0<true> = top_type2::top_cpa (7) (
          g = process globals<>^0 = top_type2::g (1) 
          x = process e1of<2>^0 = top_type2::x (2) (
            d = bool^1
              {
                [0] = top_type2::x.d[0] (1) 
                [1] = top_type2::x.d[1] (2) 
              }
            e = bool^0 = top_type2::x.e (3) 
          )
          y = process e1of<2>^0 = top_type2::y (3) (
            d = bool^1
              {
                [0] = top_type2::y.d[0] (4) 
                [1] = top_type2::y.d[1] (5) 
              }
            e = bool^0 = top_type2::x.e (3) 
          )
          z = process e1of<2>^0 = top_type2::z (4) (
            d = bool^1
              {
                [0] = top_type2::z.d[0] (6) 
                [1] = top_type2::z.d[1] (7) 
              }
            e = bool^0 = top_type2::x.e (3) 
          )
          co = process e1of<2>^0 = top_type2::co (5) (
            d = bool^1
              {
                [0] = top_type2::co.d[0] (8) 
                [1] = top_type2::co.d[1] (9) 
              }
            e = bool^0 = top_type2::co.e (10) 
          )
          so = process e1of<2>^0 = top_type2::so (6) (
            d = bool^1
              {
                [0] = top_type2::so.d[0] (11) 
                [1] = top_type2::so.d[1] (12) 
              }
            e = bool^0 = top_type2::so.e (13) 
          )
        )
        x = process e1of<2>^0 = top_type2::x (2) (
          d = bool^1
            {
              [0] = top_type2::x.d[0] (1) 
              [1] = top_type2::x.d[1] (2) 
            }
          e = bool^0 = top_type2::x.e (3) 
        )
        y = process e1of<2>^0 = top_type2::y (3) (
          d = bool^1
            {
              [0] = top_type2::y.d[0] (4) 
              [1] = top_type2::y.d[1] (5) 
            }
          e = bool^0 = top_type2::x.e (3) 
        )
        z = process e1of<2>^0 = top_type2::z (4) (
          d = bool^1
            {
              [0] = top_type2::z.d[0] (6) 
              [1] = top_type2::z.d[1] (7) 
            }
          e = bool^0 = top_type2::x.e (3) 
        )
        Created state:
        process instance pool:
        1	top_type2::g
        2	top_type2::x
        3	top_type2::y
        4	top_type2::z
        5	top_type2::co
        6	top_type2::so
        7	top_type2::top_cpa<true>
        bool instance pool:
        1	top_type2::x.d[0]
        2	top_type2::x.d[1]
        3	top_type2::x.e
        4	top_type2::y.d[0]
        5	top_type2::y.d[1]
        6	top_type2::z.d[0]
        7	top_type2::z.d[1]
        8	top_type2::co.d[0]
        9	top_type2::co.d[1]
        10	top_type2::co.e
        11	top_type2::so.d[0]
        12	top_type2::so.d[1]
        13	top_type2::so.e
        bool port aliases:
        3: top_type2::x.e = top_type2::y.e = top_type2::z.e
      }
      }

  Typedefs:
    e1of2 = process-definition-alias: e1of2
      = e1of<2>
  Instances:
    top = top_type<> top
    top2 = top_type2<> top2
}

footprint: {
  top = process top_type<>^0 = top (1) (
    g = process globals<>^0 = top.g (2) 
    x = process e1of<2>^0 = top.x (3) (
      d = bool^1
        {
          [0] = top.x.d[0] (1) 
          [1] = top.x.d[1] (2) 
        }
      e = bool^0 = top.x.e (3) 
    )
    y = process e1of<2>^0 = top.y (4) (
      d = bool^1
        {
          [0] = top.y.d[0] (4) 
          [1] = top.y.d[1] (5) 
        }
      e = bool^0 = top.x.e (3) 
    )
    z = process e1of<2>^0 = top.z (5) (
      d = bool^1
        {
          [0] = top.z.d[0] (6) 
          [1] = top.z.d[1] (7) 
        }
      e = bool^0 = top.x.e (3) 
    )
    co = process e1of<2>^0 = top.co (6) (
      d = bool^1
        {
          [0] = top.co.d[0] (8) 
          [1] = top.co.d[1] (9) 
        }
      e = bool^0 = top.co.e (10) 
    )
    so = process e1of<2>^0 = top.so (7) (
      d = bool^1
        {
          [0] = top.so.d[0] (11) 
          [1] = top.so.d[1] (12) 
        }
      e = bool^0 = top.so.e (13) 
    )
  )
  top2 = process top_type2<>^0 = top2 (8) (
    g = process globals<>^0 = top2.g (9) 
    x = process e1of<2>^0 = top2.x (10) (
      d = bool^1
        {
          [0] = top2.x.d[0] (14) 
          [1] = top2.x.d[1] (15) 
        }
      e = bool^0 = top2.x.e (16) 
    )
    y = process e1of<2>^0 = top2.y (11) (
      d = bool^1
        {
          [0] = top2.y.d[0] (17) 
          [1] = top2.y.d[1] (18) 
        }
      e = bool^0 = top2.x.e (16) 
    )
    z = process e1of<2>^0 = top2.z (12) (
      d = bool^1
        {
          [0] = top2.z.d[0] (19) 
          [1] = top2.z.d[1] (20) 
        }
      e = bool^0 = top2.x.e (16) 
    )
    co = process e1of<2>^0 = top2.co (13) (
      d = bool^1
        {
          [0] = top2.co.d[0] (21) 
          [1] = top2.co.d[1] (22) 
        }
      e = bool^0 = top2.co.e (23) 
    )
    so = process e1of<2>^0 = top2.so (14) (
      d = bool^1
        {
          [0] = top2.so.d[0] (24) 
          [1] = top2.so.d[1] (25) 
        }
      e = bool^0 = top2.so.e (26) 
    )
  )
  Created state:
  process instance pool:
  1	top
  2	top.g
  3	top.x
  4	top.y
  5	top.z
  6	top.co
  7	top.so
  8	top2
  9	top2.g
  10	top2.x
  11	top2.y
  12	top2.z
  13	top2.co
  14	top2.so
  bool instance pool:
  1	top.x.d[0]
  2	top.x.d[1]
  3	top.x.e
  4	top.y.d[0]
  5	top.y.d[1]
  6	top.z.d[0]
  7	top.z.d[1]
  8	top.co.d[0]
  9	top.co.d[1]
  10	top.co.e
  11	top.so.d[0]
  12	top.so.d[1]
  13	top.so.e
  14	top2.x.d[0]
  15	top2.x.d[1]
  16	top2.x.e
  17	top2.y.d[0]
  18	top2.y.d[1]
  19	top2.z.d[0]
  20	top2.z.d[1]
  21	top2.co.d[0]
  22	top2.co.d[1]
  23	top2.co.e
  24	top2.so.d[0]
  25	top2.so.d[1]
  26	top2.so.e
}
