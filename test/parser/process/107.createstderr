
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	204
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	11	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	284
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	procdefn	0	#HEAD#	#TAIL#	264
	18	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	19	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	20	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	21	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	25	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	26	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	27	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	28	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	29	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	30	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	31	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	32	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	33	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	34	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	35	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	36	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	38	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	41	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	42	##ADDR##	procpacc	0	#HEAD#	#TAIL#	37
	43	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	44	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	45	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	46	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	47	##ADDR##	procpacc	0	#HEAD#	#TAIL#	37
	48	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	49	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25
	50	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	51	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	52	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	53	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	54	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    bar = process-definition (defined) bar(
        foo<> x
      )
      In definition "bar", we have: {
      Instances:
        x = foo<> bar::x
        y = foo<> bar::y
      unroll sequence: 
        foo<> x
        foo<> y
      footprint: {
        x = process foo<>^0 = bar::x (1) (
          a = bool^0 = bar::x.a (1) 
          b = bool^0 = bar::x.b (2) 
        )
        y = process foo<>^0 = bar::y (2) (
          a = bool^0 = bar::y.a (3) 
          b = bool^0 = bar::y.b (4) 
        )
        Created state:
        process instance pool:
        1	bar::x
        2	bar::y
        bool instance pool:
        1	bar::x.a
        2	bar::x.b
        3	bar::y.a
        4	bar::y.b
      }
      }

    foo = process-definition (defined) foo(
        bool<> a
        bool<> b
      )
      In definition "foo", we have: {
      Instances:
        a = bool<> foo::a
        b = bool<> foo::b
      unroll sequence: 
        bool<> a
        bool<> b
      footprint: {
        a = bool^0 = foo::a (1) 
        b = bool^0 = foo::b (2) 
        Created state:
        bool instance pool:
        1	foo::a
        2	foo::b
      }
      }

    ick = process-definition (defined) ick(
      )
      In definition "ick", we have: {
      Instances:
        p = bar<> ick::p
        q = bar<> ick::q
      unroll sequence: 
        bar<> p
        bar<> q
        p.x.a = q.x.b;
      footprint: {
        p = process bar<>^0 = ick::p (1) (
          x = process foo<>^0 = ick::p.x (2) (
            a = bool^0 = ick::p.x.a (1) 
            b = bool^0 = ick::p.x.b (2) 
          )
        )
        q = process bar<>^0 = ick::q (3) (
          x = process foo<>^0 = ick::q.x (4) (
            a = bool^0 = ick::q.x.a (3) 
            b = bool^0 = ick::p.x.a (1) 
          )
        )
        Created state:
        process instance pool:
        1	ick::p
        2	ick::p.x
        3	ick::q
        4	ick::q.x
        bool instance pool:
        1	ick::p.x.a
        2	ick::p.x.b
        3	ick::q.x.a
      }
      }

  Instances:
    poo = ick<> poo
}

footprint: {
  poo = process ick<>^0 = poo (1) 
  Created state:
  process instance pool:
  1	poo
}
