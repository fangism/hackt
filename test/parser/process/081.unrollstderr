
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	176
	4	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	25
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	9	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	10	##ADDR##	procdefn	0	#HEAD#	#TAIL#	180
	11	##ADDR##	proccoll	1	#HEAD#	#TAIL#	33
	12	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	15	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	28
	16	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	17	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	21	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	23	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	24	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	27	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	28	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	29	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	35	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	proccoll	1	#HEAD#	#TAIL#	108
	41	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	42	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	80
	43	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	44	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	72
	45	##ADDR##	proccoll	0	#HEAD#	#TAIL#	52
	46	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	proccoll	1	#HEAD#	#TAIL#	108
	50	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	51	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	52	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	53	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    bar = process-definition (defined) bar(
        foo<> x

      )
      In definition "bar", we have: {
      Instances:
        x = foo<> x

      unroll sequence: 
        foo<> x[0..2]
        x[0].a[0] = x[2].a[0] = x[0].a[2] = x[2].a[2];
      footprint: {
        process foo<>^1 x
          unrolled indices: {
            0 = ::bar::x[0] (
              bool^1 a
                unrolled indices: {
                  0 = ::bar::x[0].a[2] 
                  1 = ::bar::x[0].a[1] 
                  2 = ::bar::x[2].a[2] 
                }
            )
            1 = ::bar::x[1] (
              bool^1 a
                unrolled indices: {
                  0 = ::bar::x[1].a[0] 
                  1 = ::bar::x[1].a[1] 
                  2 = ::bar::x[1].a[2] 
                }
            )
            2 = ::bar::x[2] (
              bool^1 a
                unrolled indices: {
                  0 = ::bar::x[0].a[2] 
                  1 = ::bar::x[2].a[1] 
                  2 = ::bar::x[2].a[2] 
                }
            )
          }
      }
      }

    foo = process-definition (defined) foo(
        bool<> a

      )
      In definition "foo", we have: {
      Instances:
        a = bool<> a

      unroll sequence: 
        bool<> a[0..2]
      footprint: {
        bool^1 a
          unrolled indices: {
            0 = ::foo::a[0] 
            1 = ::foo::a[1] 
            2 = ::foo::a[2] 
          }
      }
      }

  Instances:
    poo = process bar<>^0 poo (instantiated) = ::poo (
      process foo<>^1 x
        unrolled indices: {
          0 = ::poo.x[0] (
            bool^1 a
              unrolled indices: {
                0 = ::poo.x[0].a[0] 
                1 = ::poo.x[0].a[1] 
                2 = ::poo.x[0].a[2] 
              }
          )
          1 = ::poo.x[1] (
            bool^1 a
              unrolled indices: {
                0 = ::poo.x[1].a[0] 
                1 = ::poo.x[1].a[1] 
                2 = ::poo.x[1].a[2] 
              }
          )
          2 = ::poo.x[2] (
            bool^1 a
              unrolled indices: {
                0 = ::poo.x[2].a[0] 
                1 = ::poo.x[2].a[1] 
                2 = ::poo.x[2].a[2] 
              }
          )
        }
    )
}

