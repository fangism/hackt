
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	92
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	7	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	8	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	92
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	footprnt	0	#HEAD#	#TAIL#	294
	19	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	footprnt	0	#HEAD#	#TAIL#	376
	22	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	23	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	92
	25	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	26	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	27	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	28	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	32	##ADDR##	footprnt	0	#HEAD#	#TAIL#	442
	33	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	34	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	35	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	footprnt	0	#HEAD#	#TAIL#	385
	39	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    bar = process-definition (defined) bar(
        foo<> x
      )
      In definition "bar", we have: {
      Instances:
        x = foo<> bar::x
        y = foo<> bar::y
      unroll sequence: 
        ports: (
          foo<> x
        )
        foo<> y
      footprint: {
        x = process foo<>^0 = bar<>::x (1) (
          a = bool^0 = bar<>::x.a (1) 
        )
        y = process foo<>^0 = bar<>::y (2) (
          a = bool^0 = bar<>::y.a (2) 
        )
        Created state:
        process instance pool:
        1	bar<>::x
        2	bar<>::y
        bool instance pool:
        1	bar<>::x.a
        2	bar<>::y.a
      }
      }

    foo = process-definition (defined) foo(
        bool<> a
      )
      In definition "foo", we have: {
      Instances:
        a = bool<> foo::a
        b = bool<> foo::b
      unroll sequence: 
        ports: (
          bool<> a
        )
        bool<> b
      footprint: {
        a = bool^0 = foo<>::a (1) 
        b = bool^0 = foo<>::b (2) 
        Created state:
        bool instance pool:
        1	foo<>::a
        2	foo<>::b
      }
      }

    ick = process-definition (defined) ick(
        bar<> p
      )
      In definition "ick", we have: {
      Instances:
        p = bar<> ick::p
        q = bar<> ick::q
      unroll sequence: 
        ports: (
          bar<> p
        )
        bar<> q
      footprint: {
        p = process bar<>^0 = ick<>::p (1) (
          x = process foo<>^0 = ick<>::p.x (2) (
            a = bool^0 = ick<>::p.x.a (1) 
          )
        )
        q = process bar<>^0 = ick<>::q (3) (
          x = process foo<>^0 = ick<>::q.x (4) (
            a = bool^0 = ick<>::q.x.a (2) 
          )
        )
        Created state:
        process instance pool:
        1	ick<>::p
        2	ick<>::p.x
        3	ick<>::q
        4	ick<>::q.x
        bool instance pool:
        1	ick<>::p.x.a
        2	ick<>::q.x.a
      }
      }

  Instances:
    poo = ick<> poo
}

footprint: {
  poo = process ick<>^0 = poo (1) (
    p = process bar<>^0 = poo.p (2) (
      x = process foo<>^0 = poo.p.x (3) (
        a = bool^0 = poo.p.x.a (1) 
      )
    )
  )
  Created state:
  process instance pool:
  1	poo
  2	poo.p
  3	poo.p.x
  bool instance pool:
  1	poo.p.x.a
}
