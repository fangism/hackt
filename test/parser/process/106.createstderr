
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	60
	4	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	5	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	828
	7	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	38
	8	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	9	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	30
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	13	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	14	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	17	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	30
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	24	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	26	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	27	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	30	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	24
	31	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	32	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	35	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	38	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	40	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	41	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	44	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	80
	45	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	46
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	48	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	93
	49	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	59
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	52	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	106
	53	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	59
	54	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	57	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	85
	58	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	59	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	60	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	61	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	111
	65	##ADDR##	proccoll	0	#HEAD#	#TAIL#	58
	66	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	67	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	68	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	69	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	70	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	98

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    foo = process-definition (defined) foo<
      pint<> N
      >(
        bool<> a with indices: {
          [0..::foo::N-1]
        }

      )
      In definition "foo", we have: {
      Parameters:
        N = pint<> N
      Instances:
        a = bool<> a with indices: {
          [0..::foo::N-1]
        }

        q = bool<> q with indices: {
          [0..::foo::N/2-1]
        }

      unroll sequence: 
        pint<> N
        bool<> a[0..N-1]
        bool<> q[0..N/2-1]
        q[0] = a[0] = a[N/2];
      footprint collection: {
        <3> {
          pint^0 N value: ?
          bool^1 a with indices: {
          }
            unrolled indices: {
              0 = ::foo::q[0] (1) 
              1 = ::foo::a[0] (1) 
              2 = ::foo::a[2] (2) 
            }
          bool^1 q with indices: {
          }
            unrolled indices: {
              0 = ::foo::a[1] (1) 
            }
          bool instance pool:
          1	::foo::a[0]
          2	::foo::a[2]
          bool port aliases:
          1: ::foo::a[0] = ::foo::a[1]
        }
        <4> {
          pint^0 N value: ?
          bool^1 a with indices: {
          }
            unrolled indices: {
              0 = ::foo::q[0] (1) 
              1 = ::foo::a[1] (2) 
              2 = ::foo::a[0] (1) 
              3 = ::foo::a[3] (3) 
            }
          bool^1 q with indices: {
          }
            unrolled indices: {
              0 = ::foo::a[2] (1) 
              1 = ::foo::q[1] (4) 
            }
          bool instance pool:
          1	::foo::a[0]
          2	::foo::a[1]
          3	::foo::a[3]
          4	::foo::q[1]
          bool port aliases:
          1: ::foo::a[0] = ::foo::a[2]
        }
        <5> {
          pint^0 N value: ?
          bool^1 a with indices: {
          }
            unrolled indices: {
              0 = ::foo::q[0] (1) 
              1 = ::foo::a[1] (2) 
              2 = ::foo::a[0] (1) 
              3 = ::foo::a[3] (3) 
              4 = ::foo::a[4] (4) 
            }
          bool^1 q with indices: {
          }
            unrolled indices: {
              0 = ::foo::a[2] (1) 
              1 = ::foo::q[1] (5) 
            }
          bool instance pool:
          1	::foo::a[0]
          2	::foo::a[1]
          3	::foo::a[3]
          4	::foo::a[4]
          5	::foo::q[1]
          bool port aliases:
          1: ::foo::a[0] = ::foo::a[2]
        }
      }
      }

  Instances:
    blinky = process foo<3>^0 blinky (instantiated) = ::blinky (1) (
      bool^1 a with indices: {
        [0..::foo::N-1]
      }
        unrolled indices: {
          0 = ::blinky.a[1] (1) 
          1 = ::blinky.a[0] (1) 
          2 = ::blinky.a[2] (2) 
        }
    )
    clyde = process foo<5>^0 clyde (instantiated) = ::clyde (3) (
      bool^1 a with indices: {
        [0..::foo::N-1]
      }
        unrolled indices: {
          0 = ::clyde.a[2] (6) 
          1 = ::clyde.a[1] (7) 
          2 = ::clyde.a[0] (6) 
          3 = ::clyde.a[3] (8) 
          4 = ::clyde.a[4] (9) 
        }
    )
    inky = process foo<4>^0 inky (instantiated) = ::inky (2) (
      bool^1 a with indices: {
        [0..::foo::N-1]
      }
        unrolled indices: {
          0 = ::inky.a[2] (3) 
          1 = ::inky.a[1] (4) 
          2 = ::inky.a[0] (3) 
          3 = ::inky.a[3] (5) 
        }
    )
}

Created state:
process instance pool:
1	::blinky
2	::inky
3	::clyde
bool instance pool:
1	::blinky.a[0]
2	::blinky.a[2]
3	::inky.a[0]
4	::inky.a[1]
5	::inky.a[3]
6	::clyde.a[0]
7	::clyde.a[1]
8	::clyde.a[3]
9	::clyde.a[4]

