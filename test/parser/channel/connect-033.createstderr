WARNING: channel lanes.B[0] lacks connection to a producer.
WARNING: channel lanes.B[1] lacks connection to a producer.
WARNING: channel lanes.S lacks connection to a producer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	114
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	13	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	14	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	16	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	18	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	27	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	28	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	29	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	32	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	37	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	42	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	footprnt	0	#HEAD#	#TAIL#	432
	47	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	49	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	50	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	footprnt	0	#HEAD#	#TAIL#	398
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    merge = process-definition (defined) merge(
        chan?(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "merge", we have: {
      Instances:
        B = chan?(bool<>) merge::B^1
        S = chan?(int<1>) merge::S
        b = bool<> merge::b
        s = int<1> merge::s
      unroll sequence: 
        chan?(bool<>) B[0..1]
        chan?(int<1>) S
        bool<> b
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]?(b)
              B[0]?(b)
              B[1]?(b)
            }
          ]
        }
      footprint: {
        B = channel chan?(bool<>)^1
          {
            [0] = merge::B[0] (2) 
            [1] = merge::B[1] (3) 
          }
        S = channel chan?(int<1>)^0 = merge::S (1) 
        b = bool^0 = merge::b (1) 
        s = int<1>^0 = merge::s (1) 
        Created state:
        channel instance pool:
        1	merge::S
        2	merge::B[0]
        3	merge::B[1]
        int instance pool:
        1	merge::s
        bool instance pool:
        1	merge::b
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]?(b)
              B[0]?(b)
              B[1]?(b)
            }
          ]
      }
      }

  Instances:
    lanes = merge<> lanes
}

footprint: {
  lanes = process merge<>^0 = lanes (1) (
    B = channel chan?(bool<>)^1
      {
        [0] = lanes.B[0] (1) 
        [1] = lanes.B[1] (2) 
      }
    S = channel chan?(int<1>)^0 = lanes.S (3) 
  )
  Created state:
  process instance pool:
  1	lanes
  channel instance pool:
  1	lanes.B[0]
  2	lanes.B[1]
  3	lanes.S
}
