
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	52
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	142
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	11	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	12	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	15	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	16	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	25	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	33	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	34	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	35	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	39	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	40	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	43	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	434
	48	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	53	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	54	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	56	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	57	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	58	##ADDR##	procdefn	0	#HEAD#	#TAIL#	134
	59	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	60	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	61	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	62	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	63	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	64	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	65	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	66	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	68	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	69	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	70	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	71	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	72	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	73	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	74	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	75	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	76	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	77	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	78	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	79	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	80	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	81	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	82	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	83	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	84	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	85	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	86	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	87	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	88	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	89	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	90	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	91	##ADDR##	footprnt	0	#HEAD#	#TAIL#	418
	92	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	93	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	95	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	96	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	97	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	98	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	99	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	100	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	101	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	102	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	103	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	104	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	105	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	106	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	107	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	108	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	109	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	110	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	111	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	112	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	113	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	114	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	115	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	116	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	117	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	118	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	119	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	120	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	121	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	122	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	123	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	124	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	125	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	126	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	127	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	128	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	129	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	130	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	131	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	132	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	133	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	134	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	135	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	136	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	137	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	138	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	139	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	140	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	141	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	142	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	143	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	144	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	145	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	146	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	147	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	148	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	149	##ADDR##	footprnt	0	#HEAD#	#TAIL#	864
	150	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	151	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	152	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	153	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	154	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	155	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	156	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	157	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	158	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	159	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	160	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  6 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    merge = process-definition (defined) merge(
        bool<> !GND
        bool<> !Vdd
        chan?(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "merge", we have: {
      Instances:
        !GND = bool<> merge::!GND
        !Vdd = bool<> merge::!Vdd
        B = chan?(bool<>) merge::B^1
        S = chan?(int<1>) merge::S
        b = bool<> merge::b
        s = int<1> merge::s
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(bool<>) B[0..1]
          chan?(int<1>) S
        )
        bool<> b
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]?(b)
            }
          ]
        }
      footprint: {
        !GND = bool^0 = merge<>::!GND (1) 
        !Vdd = bool^0 = merge<>::!Vdd (2) 
        B = channel chan?(bool<>)^1
          {
            [0] = merge<>::B[0] (2) 
            [1] = merge<>::B[1] (3) 
          }
        S = channel chan?(int<1>)^0 = merge<>::S (1) 
        b = bool^0 = merge<>::b (3) 
        s = int<1>^0 = merge<>::s (1) 
        Created state:
        channel instance pool:
        1	merge<>::S
        2	merge<>::B[0]
        3	merge<>::B[1]
        int instance pool:
        1	merge<>::s
        bool instance pool:
        1	merge<>::!GND
        2	merge<>::!Vdd
        3	merge<>::b
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]?(b)
            }
          ]
        chp events: {
          event[0]: receive: S?(s), #pred: 1, succ: 1 
          event[1]: receive: B[s]?(b), #pred: 1, succ: 0 
        }
      }
      }

    split = process-definition (defined) split(
        bool<> !GND
        bool<> !Vdd
        chan!(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "split", we have: {
      Instances:
        !GND = bool<> split::!GND
        !Vdd = bool<> split::!Vdd
        B = chan!(bool<>) split::B^1
        S = chan?(int<1>) split::S
        s = int<1> split::s
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan!(bool<>) B[0..1]
          chan?(int<1>) S
        )
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        }
      footprint: {
        !GND = bool^0 = split<>::!GND (1) 
        !Vdd = bool^0 = split<>::!Vdd (2) 
        B = channel chan!(bool<>)^1
          {
            [0] = split<>::B[0] (2) 
            [1] = split<>::B[1] (3) 
          }
        S = channel chan?(int<1>)^0 = split<>::S (1) 
        s = int<1>^0 = split<>::s (1) 
        Created state:
        channel instance pool:
        1	split<>::S
        2	split<>::B[0]
        3	split<>::B[1]
        int instance pool:
        1	split<>::s
        bool instance pool:
        1	split<>::!GND
        2	split<>::!Vdd
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        chp events: {
          event[0]: receive: S?(s), #pred: 1, succ: 1 
          event[1]: send: B[s]!(true), #pred: 1, succ: 0 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    b = chan(bool<>) b^1
    c = chan(int<1>) c^1
    hairs = split<> hairs
    lanes = merge<> lanes
}

top-level chp:
  concurrent: {
    *[
      sequential: {
        concurrent: {
          c[0]!(1)
          c[1]!(1)
        }
        concurrent: {
          c[0]!(0)
          c[1]!(0)
        }
      }
    ]
  }
footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  b = channel chan(bool<>)^1
    {
      [0] = b[0] (1) 
      [1] = b[1] (2) 
    }
  c = channel chan(int<1>)^1
    {
      [0] = c[0] (3) 
      [1] = c[1] (4) 
    }
  hairs = process split<>^0 = hairs (2) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    B = channel chan!(bool<>)^1
      {
        [0] = b[0] (1) 
        [1] = b[1] (2) 
      }
    S = channel chan?(int<1>)^0 = c[1] (4) 
  )
  lanes = process merge<>^0 = lanes (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    B = channel chan?(bool<>)^1
      {
        [0] = b[0] (1) 
        [1] = b[1] (2) 
      }
    S = channel chan?(int<1>)^0 = c[0] (3) 
  )
  Created state:
  process instance pool:
  1	lanes
  2	hairs
  channel instance pool:
  1	b[0]
  2	b[1]
  3	c[0]
  4	c[1]
  bool instance pool:
  1	!GND
  2	!Vdd
  resolved concurrent actions:
    *[
      sequential: {
        concurrent: {
          c[0]!(1)
          c[1]!(1)
        }
        concurrent: {
          c[0]!(0)
          c[1]!(0)
        }
      }
    ]
  chp events: {
    event[0]: fork: , #pred: 1, succ: 6 7 
    event[1]: join: , #pred: 2, succ: 0 
    event[2]: send: c[0]!(0), #pred: 1, succ: 1 
    event[3]: send: c[1]!(0), #pred: 1, succ: 1 
    event[4]: fork: , #pred: 1, succ: 2 3 
    event[5]: join: , #pred: 2, succ: 4 
    event[6]: send: c[0]!(1), #pred: 1, succ: 5 
    event[7]: send: c[1]!(1), #pred: 1, succ: 5 
  }
}
