
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	7	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	8	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	13	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	17	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	18	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	20	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	22	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	29	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	30	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	32	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	33	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	35	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	36	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	38	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	footprnt	0	#HEAD#	#TAIL#	402
	41	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	42	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	45	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	46	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	47	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	49	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	50	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	51	##ADDR##	procdefn	0	#HEAD#	#TAIL#	110
	52	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	53	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	54	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	55	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	56	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	58	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	60	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	62	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	63	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	66	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	70	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	71	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	72	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	73	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	74	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	75	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	76	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	77	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	78	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	79	##ADDR##	footprnt	0	#HEAD#	#TAIL#	386
	80	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	81	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	82	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	83	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	84	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	85	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	86	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	87	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	88	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	89	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	90	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	91	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	92	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	93	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	94	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	95	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	96	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	97	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	98	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	99	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	100	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	101	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	104	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	105	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	107	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	108	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	109	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	110	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	111	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	112	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	113	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	114	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	115	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	116	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	117	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	118	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	119	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	120	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	121	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	122	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	123	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	124	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	125	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	126	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	127	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	128	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	129	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	130	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	131	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	132	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	133	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	134	##ADDR##	footprnt	0	#HEAD#	#TAIL#	724
	135	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	136	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	137	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	138	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	139	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	140	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	141	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	142	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	143	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	144	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	145	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    merge = process-definition (defined) merge(
        chan?(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "merge", we have: {
      Instances:
        B = chan?(bool<>) merge::B^1
        S = chan?(int<1>) merge::S
        b = bool<> merge::b
        s = int<1> merge::s
      unroll sequence: 
        ports: (
          chan?(bool<>) B[0..1]
          chan?(int<1>) S
        )
        bool<> b
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]?(b)
            }
          ]
        }
      footprint: {
        B = channel chan?(bool<>)^1
          {
            [0] = merge<>::B[0] (2) 
            [1] = merge<>::B[1] (3) 
          }
        S = channel chan?(int<1>)^0 = merge<>::S (1) 
        b = bool^0 = merge<>::b (1) 
        s = int<1>^0 = merge<>::s (1) 
        Created state:
        channel instance pool:
        1	merge<>::S
        2	merge<>::B[0]
        3	merge<>::B[1]
        int instance pool:
        1	merge<>::s
        bool instance pool:
        1	merge<>::b
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]?(b)
            }
          ]
        chp events: {
          event[0]: receive: S?(s), #pred: 1, succ: 1 
          event[1]: receive: B[s]?(b), #pred: 1, succ: 0 
        }
      }
      }

    split = process-definition (defined) split(
        chan!(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "split", we have: {
      Instances:
        B = chan!(bool<>) split::B^1
        S = chan?(int<1>) split::S
        s = int<1> split::s
      unroll sequence: 
        ports: (
          chan!(bool<>) B[0..1]
          chan?(int<1>) S
        )
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        }
      footprint: {
        B = channel chan!(bool<>)^1
          {
            [0] = split<>::B[0] (2) 
            [1] = split<>::B[1] (3) 
          }
        S = channel chan?(int<1>)^0 = split<>::S (1) 
        s = int<1>^0 = split<>::s (1) 
        Created state:
        channel instance pool:
        1	split<>::S
        2	split<>::B[0]
        3	split<>::B[1]
        int instance pool:
        1	split<>::s
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        chp events: {
          event[0]: receive: S?(s), #pred: 1, succ: 1 
          event[1]: send: B[s]!(true), #pred: 1, succ: 0 
        }
      }
      }

  Instances:
    b = chan(bool<>) b^1
    c = chan(int<1>) c^1
    hairs = split<> hairs
    lanes = merge<> lanes
}

top-level chp:
  concurrent: {
    *[
      sequential: {
        concurrent: {
          c[0]!(1)
          c[1]!(1)
        }
        concurrent: {
          c[0]!(0)
          c[1]!(0)
        }
      }
    ]
  }
footprint: {
  b = channel chan(bool<>)^1
    {
      [0] = b[0] (1) 
      [1] = b[1] (2) 
    }
  c = channel chan(int<1>)^1
    {
      [0] = c[0] (3) 
      [1] = c[1] (4) 
    }
  hairs = process split<>^0 = hairs (2) (
    B = channel chan!(bool<>)^1
      {
        [0] = b[0] (1) 
        [1] = b[1] (2) 
      }
    S = channel chan?(int<1>)^0 = c[1] (4) 
  )
  lanes = process merge<>^0 = lanes (1) (
    B = channel chan?(bool<>)^1
      {
        [0] = b[0] (1) 
        [1] = b[1] (2) 
      }
    S = channel chan?(int<1>)^0 = c[0] (3) 
  )
  Created state:
  process instance pool:
  1	lanes
  2	hairs
  channel instance pool:
  1	b[0]
  2	b[1]
  3	c[0]
  4	c[1]
  resolved concurrent actions:
    *[
      sequential: {
        concurrent: {
          c[0]!(1)
          c[1]!(1)
        }
        concurrent: {
          c[0]!(0)
          c[1]!(0)
        }
      }
    ]
  chp events: {
    event[0]: fork: , #pred: 1, succ: 6 7 
    event[1]: join: , #pred: 2, succ: 0 
    event[2]: send: c[0]!(0), #pred: 1, succ: 1 
    event[3]: send: c[1]!(0), #pred: 1, succ: 1 
    event[4]: fork: , #pred: 1, succ: 2 3 
    event[5]: join: , #pred: 2, succ: 4 
    event[6]: send: c[0]!(1), #pred: 1, succ: 5 
    event[7]: send: c[1]!(1), #pred: 1, succ: 5 
  }
}
