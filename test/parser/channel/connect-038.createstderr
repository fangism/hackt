
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	135
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	10	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	13	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	18	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	19	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	21	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	23	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	28	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	29	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	30	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	34	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	36	##ADDR##	footprnt	0	#HEAD#	#TAIL#	391
	37	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	21
	38	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	39	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	40	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	42	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	44	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	45	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	46	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	47	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	49	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	53	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	58	##ADDR##	footprnt	0	#HEAD#	#TAIL#	420
	59	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    boring = process-definition (defined) boring(
        bool<> !GND
        bool<> !Vdd
        chan(bool<>) B
      )
      In definition "boring", we have: {
      Instances:
        !GND = bool<> boring::!GND
        !Vdd = bool<> boring::!Vdd
        B = chan(bool<>) boring::B
        x = bool<> boring::x
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan(bool<>) B
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        bool<> x
      chp:
        concurrent: {
          *[
            B?(x)
          ]
          *[
            B!(false)
          ]
        }
      footprint: {
        !GND = bool^0 = boring<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = boring<>::!Vdd (2) @[ supply_high port-alias ] 
        B = channel chan(bool<>)^0 = boring<>::B (1) @[ chp! meta! chp? meta? ] 
        x = bool^0 = boring<>::x (3) 
        Created state:
        channel instance pool: (1 ports, 0 local, 0 mapped)
        1	boring<>::B @[ chp! meta! chp? meta? ]	
        bool instance pool: (2 ports, 1 local, 0 mapped)
        1	boring<>::!GND @[ supply_low port-alias ]	
        2	boring<>::!Vdd @[ supply_high port-alias ]	
        3	boring<>::x	
        resolved concurrent actions:
          *[
            B?(x)
          ]
          *[
            B!(false)
          ]
        chp events: {
          event[0]: fork: , #pred: 1, succ: 2 1 
          event[1]: send: B!(false), #pred: 1, succ: 1 
          event[2]: receive: B?(x), #pred: 1, succ: 2 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    lecture = boring<> lecture
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  lecture = process boring<>^0 = lecture (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    B = channel chan(bool<>)^0 = lecture.B (1) @[ sub! chp! meta! sub? chp? meta? ] 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 0 mapped)
  1	lecture	boring<>
    channel: 1
    bool: 1,2
  channel instance pool: (0 ports, 1 local, 0 mapped)
  1	lecture.B @[ sub! chp! meta! sub? chp? meta? ]	
  bool instance pool: (0 ports, 2 local, 1 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
  private sub-bool index map:
    (1 -> 0)
    (2 -> 1)
}
