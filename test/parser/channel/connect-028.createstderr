
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	8	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	9	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	15	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	16	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	18	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	19	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	21	##ADDR##	footprnt	0	#HEAD#	#TAIL#	331
	22	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	23	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	24	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	25	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	26	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	27	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	28	##ADDR##	procdefn	0	#HEAD#	#TAIL#	101
	29	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	30	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	31	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	32	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	33	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	34	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	35	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	37	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	38	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	footprnt	0	#HEAD#	#TAIL#	344
	41	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	42	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	43	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	44	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	45	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	46	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	47	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	48	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	49	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	52	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	53	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	55	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	56	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	58	##ADDR##	footprnt	0	#HEAD#	#TAIL#	372
	59	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	60	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	61	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	62	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	63	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    inner = process-definition (defined) inner(
        chan?(bool<>) a
      )
      In definition "inner", we have: {
      Instances:
        a = chan?(bool<>) inner::a
        z = bool<> inner::z
      unroll sequence: 
        ports: (
          chan?(bool<>) a
        )
        bool<> z
      chp:
        concurrent: {
          sequential: {
            a?(z)
            a?(z)
          }
        }
      footprint: {
        a = channel chan?(bool<>)^0 = inner<>::a (1) 
        z = bool^0 = inner<>::z (1) 
        Created state:
        channel instance pool:
        1	inner<>::a
        bool instance pool:
        1	inner<>::z
        resolved concurrent actions:
          sequential: {
            a?(z)
            a?(z)
          }
        chp events: {
          event[0]: receive: a?(z), #pred: 1, succ: 1 
          event[1]: receive: a?(z), #pred: 1, succ: 
        }
      }
      }

    one_shot = process-definition (defined) one_shot(
        chan?(bool<>) b
      )
      In definition "one_shot", we have: {
      Instances:
        b = chan?(bool<>) one_shot::b
        y = inner<> one_shot::y
      unroll sequence: 
        ports: (
          chan?(bool<>) b
        )
        inner<> y
        y (b);
      footprint: {
        b = channel chan?(bool<>)^0 = one_shot<>::b (1) 
        y = process inner<>^0 = one_shot<>::y (1) (
          a = channel chan?(bool<>)^0 = one_shot<>::b (1) 
        )
        Created state:
        process instance pool:
        1	one_shot<>::y
        channel instance pool:
        1	one_shot<>::b
      }
      }

  Instances:
    a = one_shot<> a
    x = chan(bool<>) x
}

top-level chp:
  concurrent: {
    sequential: {
      x!(true)
      x!(false)
    }
  }
footprint: {
  a = process one_shot<>^0 = a (1) (
    b = channel chan?(bool<>)^0 = x (1) 
  )
  x = channel chan(bool<>)^0 = x (1) 
  Created state:
  process instance pool:
  1	a
  channel instance pool:
  1	x
  resolved concurrent actions:
    sequential: {
      x!(true)
      x!(false)
    }
  chp events: {
    event[0]: send: x!(true), #pred: 1, succ: 1 
    event[1]: send: x!(false), #pred: 1, succ: 
  }
}
