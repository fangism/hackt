WARNING: channel pea_soup.B[0] lacks connection to a consumer.
WARNING: channel pea_soup.B[1] lacks connection to a consumer.
WARNING: channel pea_soup.S lacks connection to a producer.
Warnings found (3) while creating complete type <top-level>.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	32
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	138
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	20	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	24	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	32	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	36	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	37	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	41	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	42	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	45	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	49	##ADDR##	footprnt	0	#HEAD#	#TAIL#	424
	50	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	21
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	21
	53	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	54	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	55	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	56	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	57	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	58	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	59	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	60	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	61	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	62	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	63	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	66	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	67	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	69	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	70	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	71	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	72	##ADDR##	footprnt	0	#HEAD#	#TAIL#	471
	73	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split = process-definition (defined) split(
        bool<> !GND
        bool<> !Vdd
        chan!(bool<>) B[0..1]
        chan?(int<1>) S
      )
      In definition "split", we have: {
      Instances:
        !GND = bool<> split::!GND
        !Vdd = bool<> split::!Vdd
        B = chan!(bool<>) split::B^1
        S = chan?(int<1>) split::S
        s = int<1> split::s
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan!(bool<>) B[0..1]
          chan?(int<1>) S
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        int<1> s
      chp:
        concurrent: {
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        }
      footprint: {
        !GND = bool^0 = split<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = split<>::!Vdd (2) @[ supply_high port-alias ] 
        B = channel chan!(bool<>)^1
          {
            [0] = split<>::B[0] (2) @[ chp! ~meta! port? ] 
            [1] = split<>::B[1] (3) @[ chp! ~meta! port? ] 
          }
        S = channel chan?(int<1>)^0 = split<>::S (1) @[ port! chp? meta? ] 
        s = int<1>^0 = split<>::s (1) 
        Created state:
        channel instance pool: (3 ports, 0 local, 0 mapped)
        1	split<>::S @[ port! chp? meta? ]	
        2	split<>::B[0] @[ chp! ~meta! port? ]	
        3	split<>::B[1] @[ chp! ~meta! port? ]	
        int instance pool: (0 ports, 1 local, 0 mapped)
        1	split<>::s	
        bool instance pool: (2 ports, 0 local, 0 mapped)
        1	split<>::!GND @[ supply_low port-alias ]	
        2	split<>::!Vdd @[ supply_high port-alias ]	
        resolved concurrent actions:
          *[
            sequential: {
              S?(s)
              B[s]!(true)
            }
          ]
        chp events: {
          event[0]: receive: S?(s), #pred: 1, succ: 1 
          event[1]: send: B[s]!(true), #pred: 1, succ: 0 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    pea_soup = split<> pea_soup
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  pea_soup = process split<>^0 = pea_soup (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    B = channel chan!(bool<>)^1
      {
        [0] = pea_soup.B[0] (1) @[ sub! chp! ~meta! ] 
        [1] = pea_soup.B[1] (2) @[ sub! chp! ~meta! ] 
      }
    S = channel chan?(int<1>)^0 = pea_soup.S (3) @[ sub? chp? meta? ] 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 0 mapped)
  1	pea_soup	split<>
    channel: 3,1,2
    bool: 1,2
  channel instance pool: (0 ports, 3 local, 0 mapped)
  1	pea_soup.B[0] @[ sub! chp! ~meta! ]	
  2	pea_soup.B[1] @[ sub! chp! ~meta! ]	
  3	pea_soup.S @[ sub? chp? meta? ]	
  private sub-int index map:
    (1 -> 0)
    (2 -> 1)
  bool instance pool: (0 ports, 2 local, 0 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
}
