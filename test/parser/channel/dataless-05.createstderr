
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	64
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	199
	4	##ADDR##	chanplch	0	#HEAD#	#TAIL#	50
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	51
	6	##ADDR##	chaninst	0	#HEAD#	#TAIL#	40
	7	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	41
	8	##ADDR##	chaninst	0	#HEAD#	#TAIL#	40
	9	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	41
	10	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	48
	11	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	32
	12	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	41
	13	##ADDR##	schnnref	0	#HEAD#	#TAIL#	32
	14	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	32
	15	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	40
	16	##ADDR##	schnnref	0	#HEAD#	#TAIL#	32
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	580
	18	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	24
	19	##ADDR##	procplch	0	#HEAD#	#TAIL#	52
	20	##ADDR##	procplch	0	#HEAD#	#TAIL#	52
	21	##ADDR##	procinst	0	#HEAD#	#TAIL#	48
	22	##ADDR##	proctprf	0	#HEAD#	#TAIL#	40
	23	##ADDR##	procinst	0	#HEAD#	#TAIL#	48
	24	##ADDR##	chnalias	0	#HEAD#	#TAIL#	40
	25	##ADDR##	mchanref	0	#HEAD#	#TAIL#	40
	26	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	32
	27	##ADDR##	mchanref	0	#HEAD#	#TAIL#	40
	28	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	32
	29	##ADDR##	chnalias	0	#HEAD#	#TAIL#	40
	30	##ADDR##	mchanref	0	#HEAD#	#TAIL#	40
	31	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	32
	32	##ADDR##	mchanref	0	#HEAD#	#TAIL#	40
	33	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	32
	34	##ADDR##	footprnt	0	#HEAD#	#TAIL#	754
	35	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	36	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    boring = process-definition (defined) boring(
        chan?() in
        chan!() out
      )
      In definition "boring", we have: {
      Instances:
        in = chan?() boring::in
        out = chan!() boring::out
      unroll sequence: 
        chan?() in
        chan!() out
      chp:
        concurrent: {
          concurrent: {
            *[
              in?
            ]
            *[
              out!
            ]
          }
        }
      footprint: {
        in = channel chan?()^0 = boring::in (1) 
        out = channel chan!()^0 = boring::out (2) 
        Created state:
        channel instance pool:
        1	boring::in
        2	boring::out
        resolved concurrent actions:
          concurrent: {
            *[
              in?
            ]
            *[
              out!
            ]
          }
      }
      }

  Instances:
    play = boring<> play
    work = boring<> work
}

footprint: {
  play = process boring<>^0 = play (2) (
    in = channel chan?()^0 = work.out (2) 
    out = channel chan!()^0 = work.in (1) 
  )
  work = process boring<>^0 = work (1) (
    in = channel chan?()^0 = work.in (1) 
    out = channel chan!()^0 = work.out (2) 
  )
  Created state:
  process instance pool:
  1	work
  2	play
  channel instance pool:
  1	work.in
  2	work.out
}
