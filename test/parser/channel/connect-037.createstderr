WARNING: channel boring<>::B lacks connection to a producer.
WARNING: channel boring<>::B lacks connection to a consumer.
WARNING: channel boring<>::I lacks connection to a producer.
WARNING: channel boring<>::I lacks connection to a consumer.
WARNING: channel lecture.B lacks connection to a producer.
WARNING: channel lecture.B lacks connection to a consumer.
WARNING: channel lecture.I lacks connection to a producer.
WARNING: channel lecture.I lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	95
	4	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	7	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	8	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	11	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	13	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	15	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	304
	18	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	19	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	20	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	21	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	22	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	23	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	footprnt	0	#HEAD#	#TAIL#	346
	26	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    boring = process-definition (defined) boring(
        chan(bool<>) B
        chan(int<32>) I
      )
      In definition "boring", we have: {
      Instances:
        B = chan(bool<>) boring::B
        I = chan(int<32>) boring::I
      unroll sequence: 
        ports: (
          chan(bool<>) B
          chan(int<32>) I
        )
      footprint: {
        B = channel chan(bool<>)^0 = boring<>::B (1) 
        I = channel chan(int<32>)^0 = boring<>::I (2) 
        Created state:
        channel instance pool:
        1	boring<>::B
        2	boring<>::I
      }
      }

  Instances:
    lecture = boring<> lecture
}

footprint: {
  lecture = process boring<>^0 = lecture (1) (
    B = channel chan(bool<>)^0 = lecture.B (1) 
    I = channel chan(int<32>)^0 = lecture.I (2) 
  )
  Created state:
  process instance pool:
  1	lecture
  channel instance pool:
  1	lecture.B
  2	lecture.I
}
