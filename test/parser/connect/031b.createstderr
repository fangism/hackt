
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	87
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	33
	5	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	6	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	7	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	procdefn	0	#HEAD#	#TAIL#	84
	9	##ADDR##	dintplch	0	#HEAD#	#TAIL#	28
	10	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	14	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	footprnt	0	#HEAD#	#TAIL#	280
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	317
	18	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	19	##ADDR##	procdefn	0	#HEAD#	#TAIL#	87
	20	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	21	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	footprnt	0	#HEAD#	#TAIL#	350
	25	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	26	##ADDR##	dintplch	0	#HEAD#	#TAIL#	29
	27	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	28	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	29	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	31	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	33	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	34	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	35	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	36	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	39	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	40	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	dialias_	0	#HEAD#	#TAIL#	20
	42	##ADDR##	sdimiref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	mdintref	0	#HEAD#	#TAIL#	20
	44	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	footprnt	0	#HEAD#	#TAIL#	456
	46	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	47	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    basket = process-definition (defined) basket(
        egg<> egg_array
      )
      In definition "basket", we have: {
      Instances:
        egg_array = egg<> basket::egg_array
      unroll sequence: 
        ports: (
          egg<> egg_array
        )
      footprint: {
        egg_array = process egg<>^0 = basket<>::egg_array (1) (
          yolk = int<32>^0 = basket<>::egg_array.yolk (1) 
        )
        Created state:
        process instance pool:
        1	basket<>::egg_array
        int instance pool:
        1	basket<>::egg_array.yolk
      }
      }

    bundle = process-definition (defined) bundle(
        basket<> c
      )
      In definition "bundle", we have: {
      Instances:
        c = basket<> bundle::c
      unroll sequence: 
        ports: (
          basket<> c
        )
      footprint: {
        c = process basket<>^0 = bundle<>::c (1) (
          egg_array = process egg<>^0 = bundle<>::c.egg_array (2) (
            yolk = int<32>^0 = bundle<>::c.egg_array.yolk (1) 
          )
        )
        Created state:
        process instance pool:
        1	bundle<>::c
        2	bundle<>::c.egg_array
        int instance pool:
        1	bundle<>::c.egg_array.yolk
      }
      }

    egg = process-definition (defined) egg(
        int<32> yolk
      )
      In definition "egg", we have: {
      Instances:
        yolk = int<32> egg::yolk
      unroll sequence: 
        ports: (
          int<32> yolk
        )
      footprint: {
        yolk = int<32>^0 = egg<>::yolk (1) 
        Created state:
        int instance pool:
        1	egg<>::yolk
      }
      }

  Instances:
    count = int<32> count
    golden = egg<> golden
    load = bundle<> load
}

footprint: {
  count = int<32>^0 = count (1) 
  golden = process egg<>^0 = golden (3) (
    yolk = int<32>^0 = count (1) 
  )
  load = process bundle<>^0 = load (1) (
    c = process basket<>^0 = load.c (2) (
      egg_array = process egg<>^0 = golden (3) (
        yolk = int<32>^0 = count (1) 
      )
    )
  )
  Created state:
  process instance pool:
  1	load
  2	load.c
  3	golden
  int instance pool:
  1	count
}
