
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	4	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	5	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	169
	7	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	30
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	11	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	12	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	51
	13	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	14	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	15	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	16	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	18	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	64
	19	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	20	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	21	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	22	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	23	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	24	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	27	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	28	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	29	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	30	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    wrap = process-definition (defined) wrap(
        bool<> a with indices: {
          [0..1]
        }

      )
      In definition "wrap", we have: {
      Instances:
        a = bool<> a with indices: {
          [0..1]
        }

      unroll sequence: 
        bool<> a[0..1]
      footprint: {
        bool^1 a with indices: {
        }
          unrolled indices: {
            0 = ::wrap::a[0] 
            1 = ::wrap::a[1] 
          }
      }
      }

  Instances:
    j = process wrap<>^0 j (instantiated) = ::k (
      bool^1 a with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::k.a[1] 
          1 = ::j.a[1] 
        }
    )
    k = process wrap<>^0 k (instantiated) = ::j (
      bool^1 a with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::k.a[0] 
          1 = ::j.a[0] 
        }
    )
}

