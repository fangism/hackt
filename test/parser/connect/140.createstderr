
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	86
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	9	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	10	##ADDR##	footprnt	0	#HEAD#	#TAIL#	286
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	89
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	14	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	36
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	1399
	18	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	19	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	21	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	36
	24	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	25	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	27	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	2797
	29	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	30	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    e1of1 = process-definition (defined) e1of1(
        bool<> d[0..0]
      )
      In definition "e1of1", we have: {
      Instances:
        d = bool<> e1of1::d^1
      unroll sequence: 
        bool<> d[0..0]
      footprint: {
        d = bool^1
          {
            [0] = e1of1::d[0] (1) 
          }
        Created state:
        bool instance pool:
        1	e1of1::d[0]
      }
      }

    top_type = process-definition (defined) top_type(
        e1of1<> co[0..0][0..6][0..2]
      )
      In definition "top_type", we have: {
      Instances:
        co = e1of1<> top_type::co^3
      unroll sequence: 
        e1of1<> co[0..0][0..6][0..2]
      footprint: {
        co = process e1of1<>^3
          {
            [0][0][0] = top_type::co[0][0][0] (1) (
              d = bool^1
                {
                  [0] = top_type::co[0][0][0].d[0] (1) 
                }
            )
            [0][0][1] = top_type::co[0][0][1] (2) (
              d = bool^1
                {
                  [0] = top_type::co[0][0][1].d[0] (2) 
                }
            )
            [0][0][2] = top_type::co[0][0][2] (3) (
              d = bool^1
                {
                  [0] = top_type::co[0][0][2].d[0] (3) 
                }
            )
            [0][1][0] = top_type::co[0][1][0] (4) (
              d = bool^1
                {
                  [0] = top_type::co[0][1][0].d[0] (4) 
                }
            )
            [0][1][1] = top_type::co[0][1][1] (5) (
              d = bool^1
                {
                  [0] = top_type::co[0][1][1].d[0] (5) 
                }
            )
            [0][1][2] = top_type::co[0][1][2] (6) (
              d = bool^1
                {
                  [0] = top_type::co[0][1][2].d[0] (6) 
                }
            )
            [0][2][0] = top_type::co[0][2][0] (7) (
              d = bool^1
                {
                  [0] = top_type::co[0][2][0].d[0] (7) 
                }
            )
            [0][2][1] = top_type::co[0][2][1] (8) (
              d = bool^1
                {
                  [0] = top_type::co[0][2][1].d[0] (8) 
                }
            )
            [0][2][2] = top_type::co[0][2][2] (9) (
              d = bool^1
                {
                  [0] = top_type::co[0][2][2].d[0] (9) 
                }
            )
            [0][3][0] = top_type::co[0][3][0] (10) (
              d = bool^1
                {
                  [0] = top_type::co[0][3][0].d[0] (10) 
                }
            )
            [0][3][1] = top_type::co[0][3][1] (11) (
              d = bool^1
                {
                  [0] = top_type::co[0][3][1].d[0] (11) 
                }
            )
            [0][3][2] = top_type::co[0][3][2] (12) (
              d = bool^1
                {
                  [0] = top_type::co[0][3][2].d[0] (12) 
                }
            )
            [0][4][0] = top_type::co[0][4][0] (13) (
              d = bool^1
                {
                  [0] = top_type::co[0][4][0].d[0] (13) 
                }
            )
            [0][4][1] = top_type::co[0][4][1] (14) (
              d = bool^1
                {
                  [0] = top_type::co[0][4][1].d[0] (14) 
                }
            )
            [0][4][2] = top_type::co[0][4][2] (15) (
              d = bool^1
                {
                  [0] = top_type::co[0][4][2].d[0] (15) 
                }
            )
            [0][5][0] = top_type::co[0][5][0] (16) (
              d = bool^1
                {
                  [0] = top_type::co[0][5][0].d[0] (16) 
                }
            )
            [0][5][1] = top_type::co[0][5][1] (17) (
              d = bool^1
                {
                  [0] = top_type::co[0][5][1].d[0] (17) 
                }
            )
            [0][5][2] = top_type::co[0][5][2] (18) (
              d = bool^1
                {
                  [0] = top_type::co[0][5][2].d[0] (18) 
                }
            )
            [0][6][0] = top_type::co[0][6][0] (19) (
              d = bool^1
                {
                  [0] = top_type::co[0][6][0].d[0] (19) 
                }
            )
            [0][6][1] = top_type::co[0][6][1] (20) (
              d = bool^1
                {
                  [0] = top_type::co[0][6][1].d[0] (20) 
                }
            )
            [0][6][2] = top_type::co[0][6][2] (21) (
              d = bool^1
                {
                  [0] = top_type::co[0][6][2].d[0] (21) 
                }
            )
          }
        Created state:
        process instance pool:
        1	top_type::co[0][0][0]
        2	top_type::co[0][0][1]
        3	top_type::co[0][0][2]
        4	top_type::co[0][1][0]
        5	top_type::co[0][1][1]
        6	top_type::co[0][1][2]
        7	top_type::co[0][2][0]
        8	top_type::co[0][2][1]
        9	top_type::co[0][2][2]
        10	top_type::co[0][3][0]
        11	top_type::co[0][3][1]
        12	top_type::co[0][3][2]
        13	top_type::co[0][4][0]
        14	top_type::co[0][4][1]
        15	top_type::co[0][4][2]
        16	top_type::co[0][5][0]
        17	top_type::co[0][5][1]
        18	top_type::co[0][5][2]
        19	top_type::co[0][6][0]
        20	top_type::co[0][6][1]
        21	top_type::co[0][6][2]
        bool instance pool:
        1	top_type::co[0][0][0].d[0]
        2	top_type::co[0][0][1].d[0]
        3	top_type::co[0][0][2].d[0]
        4	top_type::co[0][1][0].d[0]
        5	top_type::co[0][1][1].d[0]
        6	top_type::co[0][1][2].d[0]
        7	top_type::co[0][2][0].d[0]
        8	top_type::co[0][2][1].d[0]
        9	top_type::co[0][2][2].d[0]
        10	top_type::co[0][3][0].d[0]
        11	top_type::co[0][3][1].d[0]
        12	top_type::co[0][3][2].d[0]
        13	top_type::co[0][4][0].d[0]
        14	top_type::co[0][4][1].d[0]
        15	top_type::co[0][4][2].d[0]
        16	top_type::co[0][5][0].d[0]
        17	top_type::co[0][5][1].d[0]
        18	top_type::co[0][5][2].d[0]
        19	top_type::co[0][6][0].d[0]
        20	top_type::co[0][6][1].d[0]
        21	top_type::co[0][6][2].d[0]
      }
      }

  Instances:
    co = e1of1<> co^3
    top = top_type<> top
}

footprint: {
  co = process e1of1<>^3
    {
      [0][0][0] = co[0][0][0] (2) (
        d = bool^1
          {
            [0] = co[0][0][0].d[0] (1) 
          }
      )
      [0][0][1] = co[0][0][1] (3) (
        d = bool^1
          {
            [0] = co[0][0][1].d[0] (2) 
          }
      )
      [0][0][2] = co[0][0][2] (4) (
        d = bool^1
          {
            [0] = co[0][0][2].d[0] (3) 
          }
      )
      [0][1][0] = co[0][1][0] (5) (
        d = bool^1
          {
            [0] = co[0][1][0].d[0] (4) 
          }
      )
      [0][1][1] = co[0][1][1] (6) (
        d = bool^1
          {
            [0] = co[0][1][1].d[0] (5) 
          }
      )
      [0][1][2] = co[0][1][2] (7) (
        d = bool^1
          {
            [0] = co[0][1][2].d[0] (6) 
          }
      )
      [0][2][0] = co[0][2][0] (8) (
        d = bool^1
          {
            [0] = co[0][2][0].d[0] (7) 
          }
      )
      [0][2][1] = co[0][2][1] (9) (
        d = bool^1
          {
            [0] = co[0][2][1].d[0] (8) 
          }
      )
      [0][2][2] = co[0][2][2] (10) (
        d = bool^1
          {
            [0] = co[0][2][2].d[0] (9) 
          }
      )
      [0][3][0] = co[0][3][0] (11) (
        d = bool^1
          {
            [0] = co[0][3][0].d[0] (10) 
          }
      )
      [0][3][1] = co[0][3][1] (12) (
        d = bool^1
          {
            [0] = co[0][3][1].d[0] (11) 
          }
      )
      [0][3][2] = co[0][3][2] (13) (
        d = bool^1
          {
            [0] = co[0][3][2].d[0] (12) 
          }
      )
      [0][4][0] = co[0][4][0] (14) (
        d = bool^1
          {
            [0] = co[0][4][0].d[0] (13) 
          }
      )
      [0][4][1] = co[0][4][1] (15) (
        d = bool^1
          {
            [0] = co[0][4][1].d[0] (14) 
          }
      )
      [0][4][2] = co[0][4][2] (16) (
        d = bool^1
          {
            [0] = co[0][4][2].d[0] (15) 
          }
      )
      [0][5][0] = co[0][5][0] (17) (
        d = bool^1
          {
            [0] = co[0][5][0].d[0] (16) 
          }
      )
      [0][5][1] = co[0][5][1] (18) (
        d = bool^1
          {
            [0] = co[0][5][1].d[0] (17) 
          }
      )
      [0][5][2] = co[0][5][2] (19) (
        d = bool^1
          {
            [0] = co[0][5][2].d[0] (18) 
          }
      )
      [0][6][0] = co[0][6][0] (20) (
        d = bool^1
          {
            [0] = co[0][6][0].d[0] (19) 
          }
      )
      [0][6][1] = co[0][6][1] (21) (
        d = bool^1
          {
            [0] = co[0][6][1].d[0] (20) 
          }
      )
      [0][6][2] = co[0][6][2] (22) (
        d = bool^1
          {
            [0] = co[0][6][2].d[0] (21) 
          }
      )
    }
  top = process top_type<>^0 = top (1) (
    co = process e1of1<>^3
      {
        [0][0][0] = co[0][0][0] (2) (
          d = bool^1
            {
              [0] = co[0][0][0].d[0] (1) 
            }
        )
        [0][0][1] = co[0][0][1] (3) (
          d = bool^1
            {
              [0] = co[0][0][1].d[0] (2) 
            }
        )
        [0][0][2] = co[0][0][2] (4) (
          d = bool^1
            {
              [0] = co[0][0][2].d[0] (3) 
            }
        )
        [0][1][0] = co[0][1][0] (5) (
          d = bool^1
            {
              [0] = co[0][1][0].d[0] (4) 
            }
        )
        [0][1][1] = co[0][1][1] (6) (
          d = bool^1
            {
              [0] = co[0][1][1].d[0] (5) 
            }
        )
        [0][1][2] = co[0][1][2] (7) (
          d = bool^1
            {
              [0] = co[0][1][2].d[0] (6) 
            }
        )
        [0][2][0] = co[0][2][0] (8) (
          d = bool^1
            {
              [0] = co[0][2][0].d[0] (7) 
            }
        )
        [0][2][1] = co[0][2][1] (9) (
          d = bool^1
            {
              [0] = co[0][2][1].d[0] (8) 
            }
        )
        [0][2][2] = co[0][2][2] (10) (
          d = bool^1
            {
              [0] = co[0][2][2].d[0] (9) 
            }
        )
        [0][3][0] = co[0][3][0] (11) (
          d = bool^1
            {
              [0] = co[0][3][0].d[0] (10) 
            }
        )
        [0][3][1] = co[0][3][1] (12) (
          d = bool^1
            {
              [0] = co[0][3][1].d[0] (11) 
            }
        )
        [0][3][2] = co[0][3][2] (13) (
          d = bool^1
            {
              [0] = co[0][3][2].d[0] (12) 
            }
        )
        [0][4][0] = co[0][4][0] (14) (
          d = bool^1
            {
              [0] = co[0][4][0].d[0] (13) 
            }
        )
        [0][4][1] = co[0][4][1] (15) (
          d = bool^1
            {
              [0] = co[0][4][1].d[0] (14) 
            }
        )
        [0][4][2] = co[0][4][2] (16) (
          d = bool^1
            {
              [0] = co[0][4][2].d[0] (15) 
            }
        )
        [0][5][0] = co[0][5][0] (17) (
          d = bool^1
            {
              [0] = co[0][5][0].d[0] (16) 
            }
        )
        [0][5][1] = co[0][5][1] (18) (
          d = bool^1
            {
              [0] = co[0][5][1].d[0] (17) 
            }
        )
        [0][5][2] = co[0][5][2] (19) (
          d = bool^1
            {
              [0] = co[0][5][2].d[0] (18) 
            }
        )
        [0][6][0] = co[0][6][0] (20) (
          d = bool^1
            {
              [0] = co[0][6][0].d[0] (19) 
            }
        )
        [0][6][1] = co[0][6][1] (21) (
          d = bool^1
            {
              [0] = co[0][6][1].d[0] (20) 
            }
        )
        [0][6][2] = co[0][6][2] (22) (
          d = bool^1
            {
              [0] = co[0][6][2].d[0] (21) 
            }
        )
      }
  )
  Created state:
  process instance pool:
  1	top
  2	co[0][0][0]
  3	co[0][0][1]
  4	co[0][0][2]
  5	co[0][1][0]
  6	co[0][1][1]
  7	co[0][1][2]
  8	co[0][2][0]
  9	co[0][2][1]
  10	co[0][2][2]
  11	co[0][3][0]
  12	co[0][3][1]
  13	co[0][3][2]
  14	co[0][4][0]
  15	co[0][4][1]
  16	co[0][4][2]
  17	co[0][5][0]
  18	co[0][5][1]
  19	co[0][5][2]
  20	co[0][6][0]
  21	co[0][6][1]
  22	co[0][6][2]
  bool instance pool:
  1	co[0][0][0].d[0]
  2	co[0][0][1].d[0]
  3	co[0][0][2].d[0]
  4	co[0][1][0].d[0]
  5	co[0][1][1].d[0]
  6	co[0][1][2].d[0]
  7	co[0][2][0].d[0]
  8	co[0][2][1].d[0]
  9	co[0][2][2].d[0]
  10	co[0][3][0].d[0]
  11	co[0][3][1].d[0]
  12	co[0][3][2].d[0]
  13	co[0][4][0].d[0]
  14	co[0][4][1].d[0]
  15	co[0][4][2].d[0]
  16	co[0][5][0].d[0]
  17	co[0][5][1].d[0]
  18	co[0][5][2].d[0]
  19	co[0][6][0].d[0]
  20	co[0][6][1].d[0]
  21	co[0][6][2].d[0]
}
