
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	dintplch	0	#HEAD#	#TAIL#	29
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	183
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	procdefn	0	#HEAD#	#TAIL#	183
	9	##ADDR##	procplch	0	#HEAD#	#TAIL#	33
	10	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	180
	13	##ADDR##	dintplch	0	#HEAD#	#TAIL#	28
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	17	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	21
	20	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	procpfar	0	#HEAD#	#TAIL#	62
	22	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	23	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	24	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	25	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	26	##ADDR##	procpfar	0	#HEAD#	#TAIL#	62
	27	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	28	##ADDR##	procpacc	0	#HEAD#	#TAIL#	46
	29	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	30	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	31	##ADDR##	procpacc	0	#HEAD#	#TAIL#	46
	32	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	33	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	34	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	35	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	37	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	39	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	40	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	41	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	42	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	45	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	50	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	dialias_	0	#HEAD#	#TAIL#	20
	53	##ADDR##	sdimiref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	mdintref	0	#HEAD#	#TAIL#	20
	55	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	56	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	25
	57	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	58	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	59	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	21
	60	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	61	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	62	##ADDR##	procpacc	0	#HEAD#	#TAIL#	46
	63	##ADDR##	procpacc	0	#HEAD#	#TAIL#	50
	64	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	65	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	66	##ADDR##	procpacc	0	#HEAD#	#TAIL#	46
	67	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17
	68	##ADDR##	dintpacc	0	#HEAD#	#TAIL#	17

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    basket = process-definition (defined) basket(
        egg<> egg_array[0..1]
      )
      In definition "basket", we have: {
      Instances:
        egg_array = egg<> basket::egg_array^1
      unroll sequence: 
        egg<> egg_array[0..1]
      footprint: {
        egg_array = process egg<>^1
          {
            [0] = basket::egg_array[0] (
              yolk = int<32>^0 = basket::egg_array[0].yolk 
            )
            [1] = basket::egg_array[1] (
              yolk = int<32>^0 = basket::egg_array[1].yolk 
            )
          }
      }
      }

    bundle = process-definition (defined) bundle(
        basket<> c[0..1]
      )
      In definition "bundle", we have: {
      Instances:
        c = basket<> bundle::c^1
      unroll sequence: 
        basket<> c[0..1]
      footprint: {
        c = process basket<>^1
          {
            [0] = bundle::c[0] (
              egg_array = process egg<>^1
                {
                  [0] = bundle::c[0].egg_array[0] (
                    yolk = int<32>^0 = bundle::c[0].egg_array[0].yolk 
                  )
                  [1] = bundle::c[0].egg_array[1] (
                    yolk = int<32>^0 = bundle::c[0].egg_array[1].yolk 
                  )
                }
            )
            [1] = bundle::c[1] (
              egg_array = process egg<>^1
                {
                  [0] = bundle::c[1].egg_array[0] (
                    yolk = int<32>^0 = bundle::c[1].egg_array[0].yolk 
                  )
                  [1] = bundle::c[1].egg_array[1] (
                    yolk = int<32>^0 = bundle::c[1].egg_array[1].yolk 
                  )
                }
            )
          }
      }
      }

    egg = process-definition (defined) egg(
        int<32> yolk
      )
      In definition "egg", we have: {
      Instances:
        yolk = int<32> egg::yolk
      unroll sequence: 
        int<32> yolk
      footprint: {
        yolk = int<32>^0 = egg::yolk 
      }
      }

  Instances:
    count = int<32> count
    golden = egg<> golden
    load = bundle<> load
}

footprint: {
  count = int<32>^0 = load.c[0].egg_array[1].yolk 
  golden = process egg<>^0 = golden (
    yolk = int<32>^0 = load.c[0].egg_array[1].yolk 
  )
  load = process bundle<>^0 = load (
    c = process basket<>^1
      {
        [0] = load.c[0] (
          egg_array = process egg<>^1
            {
              [0] = load.c[0].egg_array[0] (
                yolk = int<32>^0 = load.c[0].egg_array[0].yolk 
              )
              [1] = golden (
                yolk = int<32>^0 = load.c[0].egg_array[1].yolk 
              )
            }
        )
        [1] = load.c[1] (
          egg_array = process egg<>^1
            {
              [0] = load.c[1].egg_array[0] (
                yolk = int<32>^0 = load.c[1].egg_array[0].yolk 
              )
              [1] = load.c[1].egg_array[1] (
                yolk = int<32>^0 = load.c[1].egg_array[1].yolk 
              )
            }
        )
      }
  )
}
