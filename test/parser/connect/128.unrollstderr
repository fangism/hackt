
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	182
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	17
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	168
	10	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	procdefn	0	#HEAD#	#TAIL#	197
	12	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	19	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	20	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	17
	21	##ADDR##	proccoll	0	#HEAD#	#TAIL#	33
	22	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	23	##ADDR##	procdefn	0	#HEAD#	#TAIL#	204
	24	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	25	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	26	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	27	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	30	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	31	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	33	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	35	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	36	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	17
	37	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	38	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	39	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	40	##ADDR##	procdefn	0	#HEAD#	#TAIL#	250
	41	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	42	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	43	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	44	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	45	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	46	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	50	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	52	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	54	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	55	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	56	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	60	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	61	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	62	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	65	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	66	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	68	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	69	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	71	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	72	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	73	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	17
	74	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	75	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	76	##ADDR##	procpacc	0	#HEAD#	#TAIL#	33
	77	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	78	##ADDR##	procpacc	0	#HEAD#	#TAIL#	33
	79	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	80	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	81	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	82	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	17
	83	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	84	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	85	##ADDR##	procpacc	0	#HEAD#	#TAIL#	29
	86	##ADDR##	procpacc	0	#HEAD#	#TAIL#	29
	87	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	88	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	89	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	90	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	91	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	92	##ADDR##	procpacc	0	#HEAD#	#TAIL#	25
	93	##ADDR##	procpacc	0	#HEAD#	#TAIL#	29
	94	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	95	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	96	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	33
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  5 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> e1of2::d
      unroll sequence: 
        bool<> d
      footprint: {
        d = bool^0 = e1of2::d 
      }
      }

    funit = process-definition (defined) funit(
      )
      In definition "funit", we have: {
      Instances:
        a0copy = pupcopy<> funit::a0copy
        aa = e1of2<> funit::aa
        g = globals<> funit::g
        lt = pand<> funit::lt
        pa0 = e1of2<> funit::pa0
        pnd = pand<> funit::pnd
      unroll sequence: 
        globals<> g
        e1of2<> aa
        e1of2<> pa0
        pupcopy<> a0copy
        a0copy (aa, pa0);
        pand<> lt
        lt (g, aa);
        pand<> pnd
        pnd (g, pa0);
      footprint: {
        a0copy = process pupcopy<>^0 = funit::a0copy (
          r = process e1of2<>^0 = funit::lt.a (
            d = bool^0 = funit::aa.d 
          )
          rp = process e1of2<>^0 = funit::pnd.a (
            d = bool^0 = funit::pa0.d 
          )
        )
        aa = process e1of2<>^0 = funit::a0copy.r (
          d = bool^0 = funit::aa.d 
        )
        g = process globals<>^0 = funit::lt.g 
        lt = process pand<>^0 = funit::lt (
          g = process globals<>^0 = funit::pnd.g 
          a = process e1of2<>^0 = funit::lt.a (
            d = bool^0 = funit::aa.d 
          )
        )
        pa0 = process e1of2<>^0 = funit::a0copy.rp (
          d = bool^0 = funit::pa0.d 
        )
        pnd = process pand<>^0 = funit::pnd (
          g = process globals<>^0 = funit::pnd.g 
          a = process e1of2<>^0 = funit::pnd.a (
            d = bool^0 = funit::pa0.d 
          )
        )
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    pand = process-definition (defined) pand(
        globals<> g
        e1of2<> a
      )
      In definition "pand", we have: {
      Instances:
        a = e1of2<> pand::a
        g = globals<> pand::g
      unroll sequence: 
        globals<> g
        e1of2<> a
      footprint: {
        a = process e1of2<>^0 = pand::a (
          d = bool^0 = pand::a.d 
        )
        g = process globals<>^0 = pand::g 
      }
      }

    pupcopy = process-definition (defined) pupcopy(
        e1of2<> r
        e1of2<> rp
      )
      In definition "pupcopy", we have: {
      Instances:
        r = e1of2<> pupcopy::r
        rp = e1of2<> pupcopy::rp
      unroll sequence: 
        e1of2<> r
        e1of2<> rp
        r.d = rp.d;
      footprint: {
        r = process e1of2<>^0 = pupcopy::r (
          d = bool^0 = pupcopy::rp.d 
        )
        rp = process e1of2<>^0 = pupcopy::rp (
          d = bool^0 = pupcopy::rp.d 
        )
      }
      }

  Instances:
    X = funit<> X
}

footprint: {
  X = process funit<>^0 = X 
}
