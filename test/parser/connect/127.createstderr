
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	99
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	15	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	16	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	298
	18	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	19	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	33
	20	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	21	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	27	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	footprnt	0	#HEAD#	#TAIL#	298
	30	##ADDR##	procdefn	0	#HEAD#	#TAIL#	100
	31	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	32	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	33	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	34	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	35	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	37	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	41	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	footprnt	0	#HEAD#	#TAIL#	380
	43	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	44	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	45	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	46	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	50	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	footprnt	0	#HEAD#	#TAIL#	413
	53	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	54	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    ar = process-definition (defined) ar(
        bool<> y
      )
      In definition "ar", we have: {
      Instances:
        y = bool<> ar::y
        z = bool<> ar::z
      unroll sequence: 
        ports: (
          bool<> y
        )
        bool<> z
        y = z;
      footprint: {
        y = bool^0 = ar<>::y (1) 
        z = bool^0 = ar<>::y (1) 
        Created state:
        bool instance pool:
        1	ar<>::y
      }
      }

    array = process-definition (defined) array(
        bool<> x
      )
      In definition "array", we have: {
      Instances:
        composite = bool<> array::composite
        x = bool<> array::x
      unroll sequence: 
        ports: (
          bool<> x
        )
        bool<> composite
        x = composite;
      footprint: {
        composite = bool^0 = array<>::x (1) 
        x = bool^0 = array<>::x (1) 
        Created state:
        bool instance pool:
        1	array<>::x
      }
      }

    foo = process-definition (defined) foo(
        ar<> r
      )
      In definition "foo", we have: {
      Instances:
        k = array<> foo::k
        r = ar<> foo::r
      unroll sequence: 
        ports: (
          ar<> r
        )
        array<> k
        k (r.y);
      footprint: {
        k = process array<>^0 = foo<>::k (2) (
          x = bool^0 = foo<>::r.y (1) 
        )
        r = process ar<>^0 = foo<>::r (1) (
          y = bool^0 = foo<>::r.y (1) 
        )
        Created state:
        process instance pool:
        1	foo<>::r
        2	foo<>::k
        bool instance pool:
        1	foo<>::r.y
      }
      }

  Instances:
    B = ar<> B
    C = foo<> C
}

footprint: {
  B = process ar<>^0 = B (1) (
    y = bool^0 = B.y (1) 
  )
  C = process foo<>^0 = C (2) (
    r = process ar<>^0 = B (1) (
      y = bool^0 = B.y (1) 
    )
  )
  Created state:
  process instance pool:
  1	B
  2	C
  bool instance pool:
  1	B.y
}
