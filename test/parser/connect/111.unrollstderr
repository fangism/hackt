
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	197
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	11	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	12	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	13	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	14	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	18	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	22	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	24	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	proccoll	0	#HEAD#	#TAIL#	49
	26	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	27	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25
	28	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	29	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	30	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	31	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25
	32	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    wrap = process-definition (defined) wrap(
        bool<> a
        bool<> b
      )
      In definition "wrap", we have: {
      Instances:
        a = bool<> wrap::a
        b = bool<> wrap::b
      unroll sequence: 
        bool<> a
        bool<> b
      footprint: {
        a = bool^0 = wrap::a 
        b = bool^0 = wrap::b 
      }
      }

  Instances:
    j = wrap<> j
    k = wrap<> k
}

footprint: {
  j = process wrap<>^0 = k (
    a = bool^0 = j.b 
    b = bool^0 = j.b 
  )
  k = process wrap<>^0 = k (
    a = bool^0 = j.a 
    b = bool^0 = j.b 
  )
}
