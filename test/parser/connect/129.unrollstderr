
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	100
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	65
	4	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	5	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	203
	7	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	8	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	9	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	procdefn	0	#HEAD#	#TAIL#	164
	11	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	12	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	procdefn	0	#HEAD#	#TAIL#	234
	15	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	30
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	19	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	20	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	21	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	25	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	27	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	28	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	20
	29	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	20
	32	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	20
	34	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	20
	37	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	59
	38	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	39	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	38
	40	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	38
	41	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	42	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	43	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	44	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	45	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	46	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	47	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	48	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	50	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	52	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	53	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	54	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	55	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	56	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	57	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	58	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	59	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	60	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	61	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	62	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	63	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	64	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	66	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	68	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	69	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	70	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	71	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	72	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	73	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	74	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	77	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	78	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	79	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	80	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	81	##ADDR##	proccoll	0	#HEAD#	#TAIL#	74
	82	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	83	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	84	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	85	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	86	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	87	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	88	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	89	##ADDR##	procdefn	0	#HEAD#	#TAIL#	199
	90	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	91	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	92	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	93	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	94	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	95	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	96	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	72
	100	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	101	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	102	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	103	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	104	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	105	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	72
	106	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	107	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	108	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	109	##ADDR##	proccoll	0	#HEAD#	#TAIL#	72
	110	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	111	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	112	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	113	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	114	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	115	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	116	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	117	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	118	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	119	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	120	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	121	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	122	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	123	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	124	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	125	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	126	##ADDR##	proccoll	0	#HEAD#	#TAIL#	72
	127	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	128	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	129	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	130	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	131	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	132	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	133	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	134	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	135	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	136	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	137	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	138	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	139	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	140	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	141	##ADDR##	proccoll	0	#HEAD#	#TAIL#	75
	142	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	143	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	144	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	145	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	146	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	147	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	148	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	149	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	150	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	151	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	152	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	153	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	154	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	155	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	156	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	157	##ADDR##	proccoll	0	#HEAD#	#TAIL#	75
	158	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	159	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	160	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	161	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	162	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	163	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	164	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	165	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	166	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	167	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	168	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	169	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	170	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	171	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	172	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	173	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	174	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	175	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	176	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	177	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	178	##ADDR##	procdefn	0	#HEAD#	#TAIL#	242
	179	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	180	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	181	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	182	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	183	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	184	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	185	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	186	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	187	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	188	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	189	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	190	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	191	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	192	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	193	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	194	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	195	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	196	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	197	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	198	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	199	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	200	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	201	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	202	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	203	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	204	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	205	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	206	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	207	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	208	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	209	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	210	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	211	##ADDR##	proccoll	0	#HEAD#	#TAIL#	74
	212	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	213	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	214	##ADDR##	procdefn	0	#HEAD#	#TAIL#	243
	215	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	216	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	217	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	218	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	219	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	220	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	221	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	222	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	223	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	224	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	225	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	226	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	227	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	228	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	229	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	230	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	231	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	232	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	233	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	234	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	235	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	236	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	237	##ADDR##	proccoll	0	#HEAD#	#TAIL#	62
	238	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	239	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	240	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	241	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	242	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	243	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	244	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	245	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	246	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	247	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	248	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	249	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	250	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	251	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	252	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	253	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	254	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	255	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	256	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	257	##ADDR##	proccoll	0	#HEAD#	#TAIL#	65
	258	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	259	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	260	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	261	##ADDR##	proccoll	0	#HEAD#	#TAIL#	73
	262	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	263	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	264	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	265	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	266	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	267	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	268	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	269	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	270	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	271	##ADDR##	proccoll	0	#HEAD#	#TAIL#	72
	272	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	273	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	274	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	275	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	276	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	277	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	278	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	279	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	280	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	281	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	282	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	283	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	284	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	285	##ADDR##	proccoll	0	#HEAD#	#TAIL#	72
	286	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	287	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	288	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	289	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	290	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	291	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	292	##ADDR##	proccoll	0	#HEAD#	#TAIL#	71
	293	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	294	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	295	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	296	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	297	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	298	##ADDR##	proccoll	0	#HEAD#	#TAIL#	72
	299	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	300	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	301	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	56
	302	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	303	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	304	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	305	##ADDR##	portconn	0	#HEAD#	#TAIL#	36
	306	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	307	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	308	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	309	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	310	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	311	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	312	##ADDR##	portconn	0	#HEAD#	#TAIL#	36
	313	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	314	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	315	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	316	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	317	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	318	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	319	##ADDR##	portconn	0	#HEAD#	#TAIL#	24
	320	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	321	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	322	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	323	##ADDR##	portconn	0	#HEAD#	#TAIL#	24
	324	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	325	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	326	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  14 instantiation-collections
  0 sub-namespaces
  6 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d with indices: {
          [0..1]
        }

        bool<> t
        bool<> f
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> d with indices: {
          [0..1]
        }

        e = bool<> e
        f = bool<> f
        t = bool<> t
      unroll sequence: 
        bool<> d[0..1]
        bool<> t
        bool<> f
        bool<> e
        d[0] = f;
        d[1] = t;
      footprint: {
        bool^1 d with indices: {
        }
          unrolled indices: {
            0 = ::e1of2::f 
            1 = ::e1of2::t 
          }
        bool^0 e (instantiated) = ::e1of2::e 
        bool^0 f (instantiated) = ::e1of2::d[0] 
        bool^0 t (instantiated) = ::e1of2::d[1] 
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    merge = process-definition (defined) merge(
        globals<> g
        e1of2<> a
        e1of2<> b
        e1of2<> c
        e1of2<> x
      )
      In definition "merge", we have: {
      Instances:
        a = e1of2<> a
        b = e1of2<> b
        c = e1of2<> c
        g = globals<> g
        x = e1of2<> x
      unroll sequence: 
        globals<> g
        e1of2<> a
        e1of2<> b
        e1of2<> c
        e1of2<> x
      footprint: {
        process e1of2<>^0 a (instantiated) = ::merge::a (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::merge::a.d[0] 
              1 = ::merge::a.d[1] 
            }
          bool^0 t (instantiated) = ::merge::a.t 
          bool^0 f (instantiated) = ::merge::a.f 
          bool^0 e (instantiated) = ::merge::a.e 
        )
        process e1of2<>^0 b (instantiated) = ::merge::b (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::merge::b.d[0] 
              1 = ::merge::b.d[1] 
            }
          bool^0 t (instantiated) = ::merge::b.t 
          bool^0 f (instantiated) = ::merge::b.f 
          bool^0 e (instantiated) = ::merge::b.e 
        )
        process e1of2<>^0 c (instantiated) = ::merge::c (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::merge::c.d[0] 
              1 = ::merge::c.d[1] 
            }
          bool^0 t (instantiated) = ::merge::c.t 
          bool^0 f (instantiated) = ::merge::c.f 
          bool^0 e (instantiated) = ::merge::c.e 
        )
        process globals<>^0 g (instantiated) = ::merge::g 
        process e1of2<>^0 x (instantiated) = ::merge::x (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::merge::x.d[0] 
              1 = ::merge::x.d[1] 
            }
          bool^0 t (instantiated) = ::merge::x.t 
          bool^0 f (instantiated) = ::merge::x.f 
          bool^0 e (instantiated) = ::merge::x.e 
        )
      }
      }

    source_e1of2_1 = process-definition (defined) source_e1of2_1(
        globals<> g
        e1of2<> r
      )
      In definition "source_e1of2_1", we have: {
      Instances:
        g = globals<> g
        r = e1of2<> r
      unroll sequence: 
        globals<> g
        e1of2<> r
      footprint: {
        process globals<>^0 g (instantiated) = ::source_e1of2_1::g 
        process e1of2<>^0 r (instantiated) = ::source_e1of2_1::r (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::source_e1of2_1::r.d[0] 
              1 = ::source_e1of2_1::r.d[1] 
            }
          bool^0 t (instantiated) = ::source_e1of2_1::r.t 
          bool^0 f (instantiated) = ::source_e1of2_1::r.f 
          bool^0 e (instantiated) = ::source_e1of2_1::r.e 
        )
      }
      }

    split4 = process-definition (defined) split4(
        globals<> g
        e1of2<> l
        e1of2<> c
        e1of2<> a
        e1of2<> b
      )
      In definition "split4", we have: {
      Instances:
        a = e1of2<> a
        b = e1of2<> b
        c = e1of2<> c
        g = globals<> g
        l = e1of2<> l
      unroll sequence: 
        globals<> g
        e1of2<> l
        e1of2<> c
        e1of2<> a
        e1of2<> b
      footprint: {
        process e1of2<>^0 a (instantiated) = ::split4::a (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::split4::a.d[0] 
              1 = ::split4::a.d[1] 
            }
          bool^0 t (instantiated) = ::split4::a.t 
          bool^0 f (instantiated) = ::split4::a.f 
          bool^0 e (instantiated) = ::split4::a.e 
        )
        process e1of2<>^0 b (instantiated) = ::split4::b (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::split4::b.d[0] 
              1 = ::split4::b.d[1] 
            }
          bool^0 t (instantiated) = ::split4::b.t 
          bool^0 f (instantiated) = ::split4::b.f 
          bool^0 e (instantiated) = ::split4::b.e 
        )
        process e1of2<>^0 c (instantiated) = ::split4::c (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::split4::c.d[0] 
              1 = ::split4::c.d[1] 
            }
          bool^0 t (instantiated) = ::split4::c.t 
          bool^0 f (instantiated) = ::split4::c.f 
          bool^0 e (instantiated) = ::split4::c.e 
        )
        process globals<>^0 g (instantiated) = ::split4::g 
        process e1of2<>^0 l (instantiated) = ::split4::l (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::split4::l.d[0] 
              1 = ::split4::l.d[1] 
            }
          bool^0 t (instantiated) = ::split4::l.t 
          bool^0 f (instantiated) = ::split4::l.f 
          bool^0 e (instantiated) = ::split4::l.e 
        )
      }
      }

    upcopy = process-definition (defined) upcopy(
        e1of2<> l
        e1of2<> r
      )
      In definition "upcopy", we have: {
      Instances:
        l = e1of2<> l
        r = e1of2<> r
      unroll sequence: 
        e1of2<> l
        e1of2<> r
        l.d = r.d;
      footprint: {
        process e1of2<>^0 l (instantiated) = ::upcopy::l (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::upcopy::r.d[0] 
              1 = ::upcopy::r.d[1] 
            }
          bool^0 t (instantiated) = ::upcopy::l.t 
          bool^0 f (instantiated) = ::upcopy::l.f 
          bool^0 e (instantiated) = ::upcopy::l.e 
        )
        process e1of2<>^0 r (instantiated) = ::upcopy::r (
          bool^1 d with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::upcopy::l.d[0] 
              1 = ::upcopy::l.d[1] 
            }
          bool^0 t (instantiated) = ::upcopy::r.t 
          bool^0 f (instantiated) = ::upcopy::r.f 
          bool^0 e (instantiated) = ::upcopy::r.e 
        )
      }
      }

  Instances:
    cpywcon = process upcopy<>^0 cpywcon (instantiated) = ::cpywcon (
      process e1of2<>^0 l (instantiated) = ::srcwcon.r (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::cpywcon.l.d[0] 
            1 = ::cpywcon.l.d[1] 
          }
        bool^0 t (instantiated) = ::cpywcon.l.t 
        bool^0 f (instantiated) = ::cpywcon.l.f 
        bool^0 e (instantiated) = ::cpywcon.l.e 
      )
      process e1of2<>^0 r (instantiated) = ::wcons (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::cpywcon.r.d[0] 
            1 = ::cpywcon.r.d[1] 
          }
        bool^0 t (instantiated) = ::cpywcon.r.t 
        bool^0 f (instantiated) = ::cpywcon.r.f 
        bool^0 e (instantiated) = ::cpywcon.r.e 
      )
    )
    g = process globals<>^0 g (instantiated) = ::splt.g 
    ja = process e1of2<>^0 ja (instantiated) = ::splt.a (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::ja.d[0] 
          1 = ::ja.d[1] 
        }
      bool^0 t (instantiated) = ::ja.t 
      bool^0 f (instantiated) = ::ja.f 
      bool^0 e (instantiated) = ::ja.e 
    )
    jb = process e1of2<>^0 jb (instantiated) = ::splt.b (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::jb.d[0] 
          1 = ::jb.d[1] 
        }
      bool^0 t (instantiated) = ::jb.t 
      bool^0 f (instantiated) = ::jb.f 
      bool^0 e (instantiated) = ::jb.e 
    )
    l = process e1of2<>^0 l (instantiated) = ::splt.l (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::l.d[0] 
          1 = ::l.d[1] 
        }
      bool^0 t (instantiated) = ::l.t 
      bool^0 f (instantiated) = ::l.f 
      bool^0 e (instantiated) = ::l.e 
    )
    mrg = process merge<>^0 mrg (instantiated) = ::mrg (
      process globals<>^0 g (instantiated) = ::srcwcon.g 
      process e1of2<>^0 a (instantiated) = ::xa (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::mrg.a.d[0] 
            1 = ::mrg.a.d[1] 
          }
        bool^0 t (instantiated) = ::mrg.a.t 
        bool^0 f (instantiated) = ::mrg.a.f 
        bool^0 e (instantiated) = ::mrg.a.e 
      )
      process e1of2<>^0 b (instantiated) = ::xb (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::mrg.b.d[0] 
            1 = ::mrg.b.d[1] 
          }
        bool^0 t (instantiated) = ::mrg.b.t 
        bool^0 f (instantiated) = ::mrg.b.f 
        bool^0 e (instantiated) = ::mrg.b.e 
      )
      process e1of2<>^0 c (instantiated) = ::wconm (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::mrg.c.d[0] 
            1 = ::mrg.c.d[1] 
          }
        bool^0 t (instantiated) = ::mrg.c.t 
        bool^0 f (instantiated) = ::mrg.c.f 
        bool^0 e (instantiated) = ::mrg.c.e 
      )
      process e1of2<>^0 x (instantiated) = ::xw (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::mrg.x.d[0] 
            1 = ::mrg.x.d[1] 
          }
        bool^0 t (instantiated) = ::mrg.x.t 
        bool^0 f (instantiated) = ::mrg.x.f 
        bool^0 e (instantiated) = ::mrg.x.e 
      )
    )
    splt = process split4<>^0 splt (instantiated) = ::splt (
      process globals<>^0 g (instantiated) = ::mrg.g 
      process e1of2<>^0 l (instantiated) = ::l (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::splt.l.d[0] 
            1 = ::splt.l.d[1] 
          }
        bool^0 t (instantiated) = ::splt.l.t 
        bool^0 f (instantiated) = ::splt.l.f 
        bool^0 e (instantiated) = ::splt.l.e 
      )
      process e1of2<>^0 c (instantiated) = ::cpywcon.r (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::splt.c.d[0] 
            1 = ::splt.c.d[1] 
          }
        bool^0 t (instantiated) = ::splt.c.t 
        bool^0 f (instantiated) = ::splt.c.f 
        bool^0 e (instantiated) = ::splt.c.e 
      )
      process e1of2<>^0 a (instantiated) = ::ja (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::splt.a.d[0] 
            1 = ::splt.a.d[1] 
          }
        bool^0 t (instantiated) = ::splt.a.t 
        bool^0 f (instantiated) = ::splt.a.f 
        bool^0 e (instantiated) = ::splt.a.e 
      )
      process e1of2<>^0 b (instantiated) = ::jb (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::splt.b.d[0] 
            1 = ::splt.b.d[1] 
          }
        bool^0 t (instantiated) = ::splt.b.t 
        bool^0 f (instantiated) = ::splt.b.f 
        bool^0 e (instantiated) = ::splt.b.e 
      )
    )
    srcwcon = process source_e1of2_1<>^0 srcwcon (instantiated) = ::srcwcon (
      process globals<>^0 g (instantiated) = ::g 
      process e1of2<>^0 r (instantiated) = ::wcon (
        bool^1 d with indices: {
          [0..1]
        }
          unrolled indices: {
            0 = ::srcwcon.r.d[0] 
            1 = ::srcwcon.r.d[1] 
          }
        bool^0 t (instantiated) = ::srcwcon.r.t 
        bool^0 f (instantiated) = ::srcwcon.r.f 
        bool^0 e (instantiated) = ::srcwcon.r.e 
      )
    )
    wcon = process e1of2<>^0 wcon (instantiated) = ::cpywcon.l (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::wcon.d[0] 
          1 = ::wcon.d[1] 
        }
      bool^0 t (instantiated) = ::wcon.t 
      bool^0 f (instantiated) = ::wcon.f 
      bool^0 e (instantiated) = ::wcon.e 
    )
    wconm = process e1of2<>^0 wconm (instantiated) = ::mrg.c (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::wconm.d[0] 
          1 = ::wconm.d[1] 
        }
      bool^0 t (instantiated) = ::wconm.t 
      bool^0 f (instantiated) = ::wconm.f 
      bool^0 e (instantiated) = ::wconm.e 
    )
    wcons = process e1of2<>^0 wcons (instantiated) = ::splt.c (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::wcons.d[0] 
          1 = ::wcons.d[1] 
        }
      bool^0 t (instantiated) = ::wcons.t 
      bool^0 f (instantiated) = ::wcons.f 
      bool^0 e (instantiated) = ::wcons.e 
    )
    xa = process e1of2<>^0 xa (instantiated) = ::mrg.a (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::xa.d[0] 
          1 = ::xa.d[1] 
        }
      bool^0 t (instantiated) = ::xa.t 
      bool^0 f (instantiated) = ::xa.f 
      bool^0 e (instantiated) = ::xa.e 
    )
    xb = process e1of2<>^0 xb (instantiated) = ::mrg.b (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::xb.d[0] 
          1 = ::xb.d[1] 
        }
      bool^0 t (instantiated) = ::xb.t 
      bool^0 f (instantiated) = ::xb.f 
      bool^0 e (instantiated) = ::xb.e 
    )
    xw = process e1of2<>^0 xw (instantiated) = ::mrg.x (
      bool^1 d with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::xw.d[0] 
          1 = ::xw.d[1] 
        }
      bool^0 t (instantiated) = ::xw.t 
      bool^0 f (instantiated) = ::xw.f 
      bool^0 e (instantiated) = ::xw.e 
    )
}

