
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	100
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	238
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	12	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	18	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	20	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	21	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	23	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	50
	28	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	29	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	30	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	31	##ADDR##	procdefn	0	#HEAD#	#TAIL#	203
	32	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	33	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	34	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	35	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	37	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	38	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	41	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	43	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	44	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	45	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	46	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	47	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	48	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	50	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	51	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	52	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	53	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	54	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	55	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	56	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	57	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	58	##ADDR##	procdefn	0	#HEAD#	#TAIL#	168
	59	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	60	##ADDR##	procdefn	0	#HEAD#	#TAIL#	246
	61	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	62	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	63	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	64	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	65	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	66	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	67	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	68	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	69	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	70	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	71	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	72	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	73	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	74	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	75	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	76	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	77	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	78	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	79	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	80	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	81	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	82	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	83	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	84	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	85	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	88	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	89	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	90	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	91	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	93	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	95	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	96	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	97	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	98	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	99	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	100	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	101	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	102	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	103	##ADDR##	procdefn	0	#HEAD#	#TAIL#	247
	104	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	105	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	106	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	107	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	108	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	109	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	110	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	111	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	112	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	113	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	114	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	115	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	116	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	117	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	118	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	119	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	120	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	121	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	122	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	123	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	124	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	125	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	126	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	127	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	128	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	129	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	130	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	131	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	132	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	133	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	134	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	135	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	136	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	137	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	138	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	139	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	140	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	141	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	142	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	143	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	144	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	145	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	146	##ADDR##	procdefn	0	#HEAD#	#TAIL#	207
	147	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	148	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	149	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	150	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	151	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	152	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	153	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	154	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	155	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	156	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	157	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	158	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	159	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	160	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	161	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	162	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	163	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	164	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	165	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	166	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	167	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	168	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	169	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	170	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	171	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	172	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	173	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	174	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	175	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	176	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	177	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	178	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	179	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	180	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	181	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	182	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	183	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	184	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	185	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	186	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	187	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	188	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	189	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	190	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	191	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	192	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	193	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	194	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	195	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	196	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	197	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	198	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	199	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	200	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	201	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	202	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	203	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	204	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	205	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	206	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	207	##ADDR##	proccoll	0	#HEAD#	#TAIL#	37
	208	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	209	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	210	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	211	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	212	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	213	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	214	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	215	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	216	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	217	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	218	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	219	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	220	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	221	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	222	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	223	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	224	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	225	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	226	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	227	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	228	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	229	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	230	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	231	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	232	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	233	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	234	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	235	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	236	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	237	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	238	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	239	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	240	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	241	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	242	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	243	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	244	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	245	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	246	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	247	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	248	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	249	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	250	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	251	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	252	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	253	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	254	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	255	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	256	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	257	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	258	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	259	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	260	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	261	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	262	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	263	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	264	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	265	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	266	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	267	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	268	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	269	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	270	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	271	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	272	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	273	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	274	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	275	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	276	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	277	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	278	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	279	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	280	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	281	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	282	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	283	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	284	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	285	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	286	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	287	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	288	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	289	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	290	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	291	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	292	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	293	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	294	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	295	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	296	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	297	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	298	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	299	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	300	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	301	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	302	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	303	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	304	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	305	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	306	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	307	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	308	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	309	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	310	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	311	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	312	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	313	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	314	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	315	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	316	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	317	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	318	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	319	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	320	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	321	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	322	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	323	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	324	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	325	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	58
	326	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	327	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	328	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	329	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	330	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	331	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	332	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	333	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	334	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	335	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	336	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	337	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42
	338	##ADDR##	proccoll	0	#HEAD#	#TAIL#	57
	339	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	340	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	42

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  14 instantiation-collections
  0 sub-namespaces
  6 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d[0..1]
        bool<> t
        bool<> f
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> e1of2::d^1
        e = bool<> e1of2::e
        f = bool<> e1of2::f
        t = bool<> e1of2::t
      unroll sequence: 
        bool<> d[0..1]
        bool<> t
        bool<> f
        bool<> e
        d[0] = f;
        d[1] = t;
      footprint: {
        d = bool^1
          {
            0 = ::e1of2::f 
            1 = ::e1of2::t 
          }
        e = bool^0 = ::e1of2::e 
        f = bool^0 = ::e1of2::f 
        t = bool^0 = ::e1of2::t 
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    merge = process-definition (defined) merge(
        globals<> g
        e1of2<> a
        e1of2<> b
        e1of2<> c
        e1of2<> x
      )
      In definition "merge", we have: {
      Instances:
        a = e1of2<> merge::a
        b = e1of2<> merge::b
        c = e1of2<> merge::c
        g = globals<> merge::g
        x = e1of2<> merge::x
      unroll sequence: 
        globals<> g
        e1of2<> a
        e1of2<> b
        e1of2<> c
        e1of2<> x
      footprint: {
        a = process e1of2<>^0 = ::merge::a (
          d = bool^1
            {
              0 = ::merge::a.d[0] 
              1 = ::merge::a.d[1] 
            }
          t = bool^0 = ::merge::a.t 
          f = bool^0 = ::merge::a.f 
          e = bool^0 = ::merge::a.e 
        )
        b = process e1of2<>^0 = ::merge::b (
          d = bool^1
            {
              0 = ::merge::b.d[0] 
              1 = ::merge::b.d[1] 
            }
          t = bool^0 = ::merge::b.t 
          f = bool^0 = ::merge::b.f 
          e = bool^0 = ::merge::b.e 
        )
        c = process e1of2<>^0 = ::merge::c (
          d = bool^1
            {
              0 = ::merge::c.d[0] 
              1 = ::merge::c.d[1] 
            }
          t = bool^0 = ::merge::c.t 
          f = bool^0 = ::merge::c.f 
          e = bool^0 = ::merge::c.e 
        )
        g = process globals<>^0 = ::merge::g 
        x = process e1of2<>^0 = ::merge::x (
          d = bool^1
            {
              0 = ::merge::x.d[0] 
              1 = ::merge::x.d[1] 
            }
          t = bool^0 = ::merge::x.t 
          f = bool^0 = ::merge::x.f 
          e = bool^0 = ::merge::x.e 
        )
      }
      }

    source_e1of2_1 = process-definition (defined) source_e1of2_1(
        globals<> g
        e1of2<> r
      )
      In definition "source_e1of2_1", we have: {
      Instances:
        g = globals<> source_e1of2_1::g
        r = e1of2<> source_e1of2_1::r
      unroll sequence: 
        globals<> g
        e1of2<> r
      footprint: {
        g = process globals<>^0 = ::source_e1of2_1::g 
        r = process e1of2<>^0 = ::source_e1of2_1::r (
          d = bool^1
            {
              0 = ::source_e1of2_1::r.d[0] 
              1 = ::source_e1of2_1::r.d[1] 
            }
          t = bool^0 = ::source_e1of2_1::r.t 
          f = bool^0 = ::source_e1of2_1::r.f 
          e = bool^0 = ::source_e1of2_1::r.e 
        )
      }
      }

    split4 = process-definition (defined) split4(
        globals<> g
        e1of2<> l
        e1of2<> c
        e1of2<> a
        e1of2<> b
      )
      In definition "split4", we have: {
      Instances:
        a = e1of2<> split4::a
        b = e1of2<> split4::b
        c = e1of2<> split4::c
        g = globals<> split4::g
        l = e1of2<> split4::l
      unroll sequence: 
        globals<> g
        e1of2<> l
        e1of2<> c
        e1of2<> a
        e1of2<> b
      footprint: {
        a = process e1of2<>^0 = ::split4::a (
          d = bool^1
            {
              0 = ::split4::a.d[0] 
              1 = ::split4::a.d[1] 
            }
          t = bool^0 = ::split4::a.t 
          f = bool^0 = ::split4::a.f 
          e = bool^0 = ::split4::a.e 
        )
        b = process e1of2<>^0 = ::split4::b (
          d = bool^1
            {
              0 = ::split4::b.d[0] 
              1 = ::split4::b.d[1] 
            }
          t = bool^0 = ::split4::b.t 
          f = bool^0 = ::split4::b.f 
          e = bool^0 = ::split4::b.e 
        )
        c = process e1of2<>^0 = ::split4::c (
          d = bool^1
            {
              0 = ::split4::c.d[0] 
              1 = ::split4::c.d[1] 
            }
          t = bool^0 = ::split4::c.t 
          f = bool^0 = ::split4::c.f 
          e = bool^0 = ::split4::c.e 
        )
        g = process globals<>^0 = ::split4::g 
        l = process e1of2<>^0 = ::split4::l (
          d = bool^1
            {
              0 = ::split4::l.d[0] 
              1 = ::split4::l.d[1] 
            }
          t = bool^0 = ::split4::l.t 
          f = bool^0 = ::split4::l.f 
          e = bool^0 = ::split4::l.e 
        )
      }
      }

    upcopy = process-definition (defined) upcopy(
        e1of2<> l
        e1of2<> r
      )
      In definition "upcopy", we have: {
      Instances:
        l = e1of2<> upcopy::l
        r = e1of2<> upcopy::r
      unroll sequence: 
        e1of2<> l
        e1of2<> r
        l.d = r.d;
      footprint: {
        l = process e1of2<>^0 = ::upcopy::l (
          d = bool^1
            {
              0 = ::upcopy::r.d[0] 
              1 = ::upcopy::r.d[1] 
            }
          t = bool^0 = ::upcopy::l.t 
          f = bool^0 = ::upcopy::l.f 
          e = bool^0 = ::upcopy::l.e 
        )
        r = process e1of2<>^0 = ::upcopy::r (
          d = bool^1
            {
              0 = ::upcopy::r.d[0] 
              1 = ::upcopy::r.d[1] 
            }
          t = bool^0 = ::upcopy::r.t 
          f = bool^0 = ::upcopy::r.f 
          e = bool^0 = ::upcopy::r.e 
        )
      }
      }

  Instances:
    cpywcon = upcopy<> cpywcon
    g = globals<> g
    ja = e1of2<> ja
    jb = e1of2<> jb
    l = e1of2<> l
    mrg = merge<> mrg
    splt = split4<> splt
    srcwcon = source_e1of2_1<> srcwcon
    wcon = e1of2<> wcon
    wconm = e1of2<> wconm
    wcons = e1of2<> wcons
    xa = e1of2<> xa
    xb = e1of2<> xb
    xw = e1of2<> xw
}

footprint: {
  cpywcon = process upcopy<>^0 = ::cpywcon (
    l = process e1of2<>^0 = ::srcwcon.r (
      d = bool^1
        {
          0 = ::wcon.d[0] 
          1 = ::wcon.d[1] 
        }
      t = bool^0 = ::wcon.t 
      f = bool^0 = ::wcon.f 
      e = bool^0 = ::wcon.e 
    )
    r = process e1of2<>^0 = ::cpywcon.r (
      d = bool^1
        {
          0 = ::wcons.d[0] 
          1 = ::wcons.d[1] 
        }
      t = bool^0 = ::wcons.t 
      f = bool^0 = ::wcons.f 
      e = bool^0 = ::wcons.e 
    )
  )
  g = process globals<>^0 = ::mrg.g 
  ja = process e1of2<>^0 = ::splt.a (
    d = bool^1
      {
        0 = ::ja.d[0] 
        1 = ::ja.d[1] 
      }
    t = bool^0 = ::ja.t 
    f = bool^0 = ::ja.f 
    e = bool^0 = ::ja.e 
  )
  jb = process e1of2<>^0 = ::splt.b (
    d = bool^1
      {
        0 = ::jb.d[0] 
        1 = ::jb.d[1] 
      }
    t = bool^0 = ::jb.t 
    f = bool^0 = ::jb.f 
    e = bool^0 = ::jb.e 
  )
  l = process e1of2<>^0 = ::splt.l (
    d = bool^1
      {
        0 = ::l.d[0] 
        1 = ::l.d[1] 
      }
    t = bool^0 = ::l.t 
    f = bool^0 = ::l.f 
    e = bool^0 = ::l.e 
  )
  mrg = process merge<>^0 = ::mrg (
    g = process globals<>^0 = ::srcwcon.g 
    a = process e1of2<>^0 = ::mrg.a (
      d = bool^1
        {
          0 = ::xa.d[0] 
          1 = ::xa.d[1] 
        }
      t = bool^0 = ::xa.t 
      f = bool^0 = ::xa.f 
      e = bool^0 = ::xa.e 
    )
    b = process e1of2<>^0 = ::mrg.b (
      d = bool^1
        {
          0 = ::xb.d[0] 
          1 = ::xb.d[1] 
        }
      t = bool^0 = ::xb.t 
      f = bool^0 = ::xb.f 
      e = bool^0 = ::xb.e 
    )
    c = process e1of2<>^0 = ::mrg.c (
      d = bool^1
        {
          0 = ::wconm.d[0] 
          1 = ::wconm.d[1] 
        }
      t = bool^0 = ::wconm.t 
      f = bool^0 = ::wconm.f 
      e = bool^0 = ::wconm.e 
    )
    x = process e1of2<>^0 = ::mrg.x (
      d = bool^1
        {
          0 = ::xw.d[0] 
          1 = ::xw.d[1] 
        }
      t = bool^0 = ::xw.t 
      f = bool^0 = ::xw.f 
      e = bool^0 = ::xw.e 
    )
  )
  splt = process split4<>^0 = ::splt (
    g = process globals<>^0 = ::mrg.g 
    l = process e1of2<>^0 = ::splt.l (
      d = bool^1
        {
          0 = ::l.d[0] 
          1 = ::l.d[1] 
        }
      t = bool^0 = ::l.t 
      f = bool^0 = ::l.f 
      e = bool^0 = ::l.e 
    )
    c = process e1of2<>^0 = ::cpywcon.r (
      d = bool^1
        {
          0 = ::wcons.d[0] 
          1 = ::wcons.d[1] 
        }
      t = bool^0 = ::wcons.t 
      f = bool^0 = ::wcons.f 
      e = bool^0 = ::wcons.e 
    )
    a = process e1of2<>^0 = ::splt.a (
      d = bool^1
        {
          0 = ::ja.d[0] 
          1 = ::ja.d[1] 
        }
      t = bool^0 = ::ja.t 
      f = bool^0 = ::ja.f 
      e = bool^0 = ::ja.e 
    )
    b = process e1of2<>^0 = ::splt.b (
      d = bool^1
        {
          0 = ::jb.d[0] 
          1 = ::jb.d[1] 
        }
      t = bool^0 = ::jb.t 
      f = bool^0 = ::jb.f 
      e = bool^0 = ::jb.e 
    )
  )
  srcwcon = process source_e1of2_1<>^0 = ::srcwcon (
    g = process globals<>^0 = ::srcwcon.g 
    r = process e1of2<>^0 = ::srcwcon.r (
      d = bool^1
        {
          0 = ::wcon.d[0] 
          1 = ::wcon.d[1] 
        }
      t = bool^0 = ::wcon.t 
      f = bool^0 = ::wcon.f 
      e = bool^0 = ::wcon.e 
    )
  )
  wcon = process e1of2<>^0 = ::cpywcon.l (
    d = bool^1
      {
        0 = ::wcon.d[0] 
        1 = ::wcon.d[1] 
      }
    t = bool^0 = ::wcon.t 
    f = bool^0 = ::wcon.f 
    e = bool^0 = ::wcon.e 
  )
  wconm = process e1of2<>^0 = ::mrg.c (
    d = bool^1
      {
        0 = ::wconm.d[0] 
        1 = ::wconm.d[1] 
      }
    t = bool^0 = ::wconm.t 
    f = bool^0 = ::wconm.f 
    e = bool^0 = ::wconm.e 
  )
  wcons = process e1of2<>^0 = ::splt.c (
    d = bool^1
      {
        0 = ::wcons.d[0] 
        1 = ::wcons.d[1] 
      }
    t = bool^0 = ::wcons.t 
    f = bool^0 = ::wcons.f 
    e = bool^0 = ::wcons.e 
  )
  xa = process e1of2<>^0 = ::mrg.a (
    d = bool^1
      {
        0 = ::xa.d[0] 
        1 = ::xa.d[1] 
      }
    t = bool^0 = ::xa.t 
    f = bool^0 = ::xa.f 
    e = bool^0 = ::xa.e 
  )
  xb = process e1of2<>^0 = ::mrg.b (
    d = bool^1
      {
        0 = ::xb.d[0] 
        1 = ::xb.d[1] 
      }
    t = bool^0 = ::xb.t 
    f = bool^0 = ::xb.f 
    e = bool^0 = ::xb.e 
  )
  xw = process e1of2<>^0 = ::mrg.x (
    d = bool^1
      {
        0 = ::xw.d[0] 
        1 = ::xw.d[1] 
      }
    t = bool^0 = ::xw.t 
    f = bool^0 = ::xw.f 
    e = bool^0 = ::xw.e 
  )
}
