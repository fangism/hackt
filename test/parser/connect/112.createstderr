
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	56
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	58
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	201
	5	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	9	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	12	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	13	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	14	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	17	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	18	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	19	##ADDR##	proccoll	0	#HEAD#	#TAIL#	58
	20	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	21	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	22	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	23	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	27	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	30	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	31	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	32	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	33	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	34	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	36	##ADDR##	proccoll	0	#HEAD#	#TAIL#	54
	37	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	38	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	39	##ADDR##	proccoll	0	#HEAD#	#TAIL#	54
	40	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	41	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	42	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	43	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	46	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	50	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	54	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	55	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	56	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	57	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	59	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	60	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	63	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	65	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	69	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  8 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    wrap = process-definition (defined) wrap(
        bool<> a
        bool<> b
      )
      In definition "wrap", we have: {
      Instances:
        a = bool<> a
        b = bool<> b
      unroll sequence: 
        bool<> a
        bool<> b
      footprint: {
        bool^0 a (instantiated) = ::wrap::a (1) 
        bool^0 b (instantiated) = ::wrap::b (2) 
        bool instance pool:
        1	::wrap::a
        2	::wrap::b
      }
      }

  Instances:
    j = process wrap<>^0 j (instantiated) = ::k (3) (
      bool^0 a (instantiated) = ::k.b (1) 
      bool^0 b (instantiated) = ::j.b (1) 
    )
    k = process wrap<>^0 k (instantiated) = ::j (3) (
      bool^0 a (instantiated) = ::z (1) 
      bool^0 b (instantiated) = ::j.a (1) 
    )
    l = process wrap<>^0 l (instantiated) = ::l (1) (
      bool^0 a (instantiated) = ::x (1) 
      bool^0 b (instantiated) = ::l.a (1) 
    )
    m = process wrap<>^0 m (instantiated) = ::m (2) (
      bool^0 a (instantiated) = ::w (1) 
      bool^0 b (instantiated) = ::l.b (1) 
    )
    w = bool^0 w (instantiated) = ::k.a (1) 
    x = bool^0 x (instantiated) = ::m.a (1) 
    y = bool^0 y (instantiated) = ::m.b (1) 
    z = bool^0 z (instantiated) = ::y (1) 
}

Created state:
process instance pool:
1	::l
2	::m
3	::j
bool instance pool:
1	::w

