
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	85
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	11	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	12	##ADDR##	footprnt	0	#HEAD#	#TAIL#	310
	13	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	17	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	18	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	20	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	21	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	25	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	420
	29	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	30	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    wrap = process-definition (defined) wrap(
        bool<> a[0..1]
      )
      In definition "wrap", we have: {
      Instances:
        a = bool<> wrap::a^1
      unroll sequence: 
        ports: (
          bool<> a[0..1]
        )
      footprint: {
        a = bool^1
          {
            [0] = wrap<>::a[0] (1) 
            [1] = wrap<>::a[1] (2) 
          }
        Created state:
        bool instance pool:
        1	wrap<>::a[0]
        2	wrap<>::a[1]
      }
      }

  Instances:
    j = wrap<> j
    k = wrap<> k
}

footprint: {
  j = process wrap<>^0 = j (1) (
    a = bool^1
      {
        [0] = j.a[0] (1) 
        [1] = j.a[0] (1) 
      }
  )
  k = process wrap<>^0 = j (1) (
    a = bool^1
      {
        [0] = j.a[0] (1) 
        [1] = j.a[0] (1) 
      }
  )
  Created state:
  process instance pool:
  1	j
  bool instance pool:
  1	j.a[0]
}
