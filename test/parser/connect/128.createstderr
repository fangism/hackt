
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	170
	4	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	140
	10	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	11	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	12	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	13	##ADDR##	procdefn	0	#HEAD#	#TAIL#	378
	14	##ADDR##	proccoll	0	#HEAD#	#TAIL#	52
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	18	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	19	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	procdefn	0	#HEAD#	#TAIL#	268
	21	##ADDR##	proccoll	0	#HEAD#	#TAIL#	52
	22	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	23	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	25	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	26	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	27	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	28	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	29	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	24
	30	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	31	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	32	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	33	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	34	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	35	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	36	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	37	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	38	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	39	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	40	##ADDR##	proccoll	0	#HEAD#	#TAIL#	52
	41	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	42	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	43	##ADDR##	procdefn	0	#HEAD#	#TAIL#	217
	44	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	45	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	46	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	47	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	48	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	49	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	50	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	52	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	53	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	54	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	55	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	56	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	57	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	58	##ADDR##	proccoll	0	#HEAD#	#TAIL#	53
	59	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	60	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	61	##ADDR##	portconn	0	#HEAD#	#TAIL#	24
	62	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	63	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	64	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	65	##ADDR##	portconn	0	#HEAD#	#TAIL#	24
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	67	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	68	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	69	##ADDR##	portconn	0	#HEAD#	#TAIL#	24
	70	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	71	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	72	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	73	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	74	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	75	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	76	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	78	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	79	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	80	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	81	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	82	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	83	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	84	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	85	##ADDR##	proccoll	0	#HEAD#	#TAIL#	60
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	88	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	89	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	90	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	91	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	92	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	93	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	95	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	99	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	100	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	101	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	102	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	103	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  5 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> d
      unroll sequence: 
        bool<> d
      footprint: {
        bool^0 d (instantiated) = ::e1of2::d (1) 
        bool instance pool:
        1	::e1of2::d
      }
      }

    funit = process-definition (defined) funit(
      )
      In definition "funit", we have: {
      Instances:
        a0copy = pupcopy<> a0copy
        aa = e1of2<> aa
        g = globals<> g
        lt = pand<> lt
        pa0 = e1of2<> pa0
        pnd = pand<> pnd
      unroll sequence: 
        globals<> g
        e1of2<> aa
        e1of2<> pa0
        pupcopy<> a0copy
        a0copy (aa, pa0);
        pand<> lt
        lt (g, aa);
        pand<> pnd
        pnd (g, pa0);
      footprint: {
        process e1of2<>^0 aa (instantiated) = ::funit::lt.a (3) (
          bool^0 d (instantiated) = ::funit::aa.d (1) 
        )
        process pupcopy<>^0 a0copy (instantiated) = ::funit::a0copy (6) (
          process e1of2<>^0 r (instantiated) = ::funit::aa (3) (
            bool^0 d (instantiated) = ::funit::a0copy.rp.d (1) 
          )
          process e1of2<>^0 rp (instantiated) = ::funit::pa0 (5) (
            bool^0 d (instantiated) = ::funit::a0copy.r.d (1) 
          )
        )
        process e1of2<>^0 pa0 (instantiated) = ::funit::pnd.a (5) (
          bool^0 d (instantiated) = ::funit::pa0.d (1) 
        )
        process pand<>^0 lt (instantiated) = ::funit::lt (1) (
          process globals<>^0 g (instantiated) = ::funit::g (2) 
          process e1of2<>^0 a (instantiated) = ::funit::a0copy.r (3) (
            bool^0 d (instantiated) = ::funit::lt.a.d (1) 
          )
        )
        process globals<>^0 g (instantiated) = ::funit::pnd.g (2) 
        process pand<>^0 pnd (instantiated) = ::funit::pnd (4) (
          process globals<>^0 g (instantiated) = ::funit::lt.g (2) 
          process e1of2<>^0 a (instantiated) = ::funit::a0copy.rp (5) (
            bool^0 d (instantiated) = ::funit::pnd.a.d (1) 
          )
        )
        process instance pool:
        1	::funit::lt
        2	::funit::g
        3	::funit::aa
        4	::funit::pnd
        5	::funit::pa0
        6	::funit::a0copy
        bool instance pool:
        1	::funit::aa.d
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    pand = process-definition (defined) pand(
        globals<> g
        e1of2<> a
      )
      In definition "pand", we have: {
      Instances:
        a = e1of2<> a
        g = globals<> g
      unroll sequence: 
        globals<> g
        e1of2<> a
      footprint: {
        process e1of2<>^0 a (instantiated) = ::pand::a (2) (
          bool^0 d (instantiated) = ::pand::a.d (1) 
        )
        process globals<>^0 g (instantiated) = ::pand::g (1) 
        process instance pool:
        1	::pand::g
        2	::pand::a
        bool instance pool:
        1	::pand::a.d
      }
      }

    pupcopy = process-definition (defined) pupcopy(
        e1of2<> r
        e1of2<> rp
      )
      In definition "pupcopy", we have: {
      Instances:
        r = e1of2<> r
        rp = e1of2<> rp
      unroll sequence: 
        e1of2<> r
        e1of2<> rp
        r.d = rp.d;
      footprint: {
        process e1of2<>^0 rp (instantiated) = ::pupcopy::rp (2) (
          bool^0 d (instantiated) = ::pupcopy::r.d (1) 
        )
        process e1of2<>^0 r (instantiated) = ::pupcopy::r (1) (
          bool^0 d (instantiated) = ::pupcopy::rp.d (1) 
        )
        process instance pool:
        1	::pupcopy::r
        2	::pupcopy::rp
        bool instance pool:
        1	::pupcopy::rp.d
        bool port aliases:
        1: ::pupcopy::rp.d = ::pupcopy::r.d
      }
      }

  Instances:
    X = process funit<>^0 X (instantiated) = ::X (1) 
}

Created state:
process instance pool:
1	::X

