
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	82
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	footprnt	0	#HEAD#	#TAIL#	335
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	72
	10	##ADDR##	footprnt	0	#HEAD#	#TAIL#	308
	11	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	93
	13	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	15	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	18	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	footprnt	0	#HEAD#	#TAIL#	432
	20	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	21	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	22	##ADDR##	procdefn	0	#HEAD#	#TAIL#	100
	23	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	24	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	25	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	26	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	28	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	29	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	30	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	32	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	footprnt	0	#HEAD#	#TAIL#	504
	34	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	35	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	36	##ADDR##	procdefn	0	#HEAD#	#TAIL#	130
	37	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	38	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	39	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	40	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	41	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	42	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	43	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	44	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	45	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	46	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	50	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	52	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	55	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	56	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	57	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	58	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	60	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	62	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	63	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	64	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	65	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	footprnt	0	#HEAD#	#TAIL#	982
	68	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	69	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	70	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	71	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	72	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	73	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	74	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	footprnt	0	#HEAD#	#TAIL#	351
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  5 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> e1of2::d
      unroll sequence: 
        bool<> d
      footprint: {
        d = bool^0 = e1of2::d (1) 
        Created state:
        bool instance pool:
        1	e1of2::d
      }
      }

    funit = process-definition (defined) funit(
      )
      In definition "funit", we have: {
      Instances:
        a0copy = pupcopy<> funit::a0copy
        aa = e1of2<> funit::aa
        g = globals<> funit::g
        lt = pand<> funit::lt
        pa0 = e1of2<> funit::pa0
        pnd = pand<> funit::pnd
      unroll sequence: 
        globals<> g
        e1of2<> aa
        e1of2<> pa0
        pupcopy<> a0copy
        a0copy (aa, pa0);
        pand<> lt
        lt (g, aa);
        pand<> pnd
        pnd (g, pa0);
      footprint: {
        a0copy = process pupcopy<>^0 = funit::a0copy (4) (
          r = process e1of2<>^0 = funit::aa (2) (
            d = bool^0 = funit::aa.d (1) 
          )
          rp = process e1of2<>^0 = funit::pa0 (3) (
            d = bool^0 = funit::aa.d (1) 
          )
        )
        aa = process e1of2<>^0 = funit::aa (2) (
          d = bool^0 = funit::aa.d (1) 
        )
        g = process globals<>^0 = funit::g (1) 
        lt = process pand<>^0 = funit::lt (5) (
          g = process globals<>^0 = funit::g (1) 
          a = process e1of2<>^0 = funit::aa (2) (
            d = bool^0 = funit::aa.d (1) 
          )
        )
        pa0 = process e1of2<>^0 = funit::pa0 (3) (
          d = bool^0 = funit::aa.d (1) 
        )
        pnd = process pand<>^0 = funit::pnd (6) (
          g = process globals<>^0 = funit::g (1) 
          a = process e1of2<>^0 = funit::pa0 (3) (
            d = bool^0 = funit::aa.d (1) 
          )
        )
        Created state:
        process instance pool:
        1	funit::g
        2	funit::aa
        3	funit::pa0
        4	funit::a0copy
        5	funit::lt
        6	funit::pnd
        bool instance pool:
        1	funit::aa.d
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    pand = process-definition (defined) pand(
        globals<> g
        e1of2<> a
      )
      In definition "pand", we have: {
      Instances:
        a = e1of2<> pand::a
        g = globals<> pand::g
      unroll sequence: 
        globals<> g
        e1of2<> a
      footprint: {
        a = process e1of2<>^0 = pand::a (2) (
          d = bool^0 = pand::a.d (1) 
        )
        g = process globals<>^0 = pand::g (1) 
        Created state:
        process instance pool:
        1	pand::g
        2	pand::a
        bool instance pool:
        1	pand::a.d
      }
      }

    pupcopy = process-definition (defined) pupcopy(
        e1of2<> r
        e1of2<> rp
      )
      In definition "pupcopy", we have: {
      Instances:
        r = e1of2<> pupcopy::r
        rp = e1of2<> pupcopy::rp
      unroll sequence: 
        e1of2<> r
        e1of2<> rp
        r.d = rp.d;
      footprint: {
        r = process e1of2<>^0 = pupcopy::r (1) (
          d = bool^0 = pupcopy::r.d (1) 
        )
        rp = process e1of2<>^0 = pupcopy::rp (2) (
          d = bool^0 = pupcopy::r.d (1) 
        )
        Created state:
        process instance pool:
        1	pupcopy::r
        2	pupcopy::rp
        bool instance pool:
        1	pupcopy::r.d
        bool port aliases:
        1: pupcopy::r.d = pupcopy::rp.d
      }
      }

  Instances:
    X = funit<> X
}

footprint: {
  X = process funit<>^0 = X (1) 
  Created state:
  process instance pool:
  1	X
}
