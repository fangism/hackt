
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	170
	4	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	140
	10	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	11	##ADDR##	procdefn	0	#HEAD#	#TAIL#	378
	12	##ADDR##	proccoll	0	#HEAD#	#TAIL#	47
	13	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	14	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	16	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	17	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	procdefn	0	#HEAD#	#TAIL#	268
	19	##ADDR##	proccoll	0	#HEAD#	#TAIL#	47
	20	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	21	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	23	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	24	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	25	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	26	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	28	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	30	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	31	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	32	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	33	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	34	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	35	##ADDR##	proccoll	0	#HEAD#	#TAIL#	48
	36	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	37	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	38	##ADDR##	proccoll	0	#HEAD#	#TAIL#	47
	39	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	40	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	41	##ADDR##	procdefn	0	#HEAD#	#TAIL#	217
	42	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	43	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	44	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	45	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	46	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	47	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	48	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	50	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	51	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	53	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	54	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	55	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	56	##ADDR##	proccoll	0	#HEAD#	#TAIL#	48
	57	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	58	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	60	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	64	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	65	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	66	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	68	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	69	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	70	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	71	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	72	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	73	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	74	##ADDR##	proccoll	0	#HEAD#	#TAIL#	59
	75	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	76	##ADDR##	proccoll	0	#HEAD#	#TAIL#	54
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	78	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	79	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	80	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	81	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	82	##ADDR##	proccoll	0	#HEAD#	#TAIL#	52
	83	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	84	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	85	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	88	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	89	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	90	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	91	##ADDR##	proccoll	0	#HEAD#	#TAIL#	54
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	93	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	94	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	95	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	96	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	97	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	98	##ADDR##	proccoll	0	#HEAD#	#TAIL#	54
	99	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	100	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	101	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  5 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> d
      unroll sequence: 
        bool<> d
      footprint: {
        bool^0 d (instantiated) = ::e1of2::d (1) 
        bool instance pool:
        1	::e1of2::d
      }
      }

    funit = process-definition (defined) funit(
      )
      In definition "funit", we have: {
      Instances:
        a0copy = pupcopy<> a0copy
        aa = e1of2<> aa
        g = globals<> g
        lt = pand<> lt
        pa0 = e1of2<> pa0
        pnd = pand<> pnd
      unroll sequence: 
        globals<> g
        e1of2<> aa
        e1of2<> pa0
        pupcopy<> a0copy
        a0copy (aa, pa0);
        pand<> lt
        lt (g, aa);
        pand<> pnd
        pnd (g, pa0);
      footprint: {
        process e1of2<>^0 aa (instantiated) = ::funit::aa (1) (
          bool^0 d (instantiated) = ::funit::aa.d (1) 
        )
        process pupcopy<>^0 a0copy (instantiated) = ::funit::a0copy (2) (
          process e1of2<>^0 r (instantiated) = ::funit::aa (1) (
            bool^0 d (instantiated) = ::funit::aa.d (1) 
          )
          process e1of2<>^0 rp (instantiated) = ::funit::pa0 (3) (
            bool^0 d (instantiated) = ::funit::aa.d (1) 
          )
        )
        process e1of2<>^0 pa0 (instantiated) = ::funit::pa0 (3) (
          bool^0 d (instantiated) = ::funit::aa.d (1) 
        )
        process pand<>^0 lt (instantiated) = ::funit::lt (4) (
          process globals<>^0 g (instantiated) = ::funit::g (5) 
          process e1of2<>^0 a (instantiated) = ::funit::aa (1) (
            bool^0 d (instantiated) = ::funit::aa.d (1) 
          )
        )
        process globals<>^0 g (instantiated) = ::funit::g (5) 
        process pand<>^0 pnd (instantiated) = ::funit::pnd (6) (
          process globals<>^0 g (instantiated) = ::funit::g (5) 
          process e1of2<>^0 a (instantiated) = ::funit::pa0 (3) (
            bool^0 d (instantiated) = ::funit::aa.d (1) 
          )
        )
        process instance pool:
        1	::funit::aa
        2	::funit::a0copy
        3	::funit::pa0
        4	::funit::lt
        5	::funit::g
        6	::funit::pnd
        bool instance pool:
        1	::funit::aa.d
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    pand = process-definition (defined) pand(
        globals<> g
        e1of2<> a
      )
      In definition "pand", we have: {
      Instances:
        a = e1of2<> a
        g = globals<> g
      unroll sequence: 
        globals<> g
        e1of2<> a
      footprint: {
        process e1of2<>^0 a (instantiated) = ::pand::a (1) (
          bool^0 d (instantiated) = ::pand::a.d (1) 
        )
        process globals<>^0 g (instantiated) = ::pand::g (2) 
        process instance pool:
        1	::pand::a
        2	::pand::g
        bool instance pool:
        1	::pand::a.d
      }
      }

    pupcopy = process-definition (defined) pupcopy(
        e1of2<> r
        e1of2<> rp
      )
      In definition "pupcopy", we have: {
      Instances:
        r = e1of2<> r
        rp = e1of2<> rp
      unroll sequence: 
        e1of2<> r
        e1of2<> rp
        r.d = rp.d;
      footprint: {
        process e1of2<>^0 rp (instantiated) = ::pupcopy::rp (1) (
          bool^0 d (instantiated) = ::pupcopy::rp.d (1) 
        )
        process e1of2<>^0 r (instantiated) = ::pupcopy::r (2) (
          bool^0 d (instantiated) = ::pupcopy::rp.d (1) 
        )
        process instance pool:
        1	::pupcopy::rp
        2	::pupcopy::r
        bool instance pool:
        1	::pupcopy::rp.d
        bool port aliases:
        1: ::pupcopy::rp.d = ::pupcopy::r.d
      }
      }

  Instances:
    X = process funit<>^0 X (instantiated) = ::X (1) 
}

Created state:
process instance pool:
1	::X

