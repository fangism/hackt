
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	100
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	10	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	13	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	19	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	20	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	21	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	22	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	346
	29	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	30	##ADDR##	procdefn	0	#HEAD#	#TAIL#	76
	31	##ADDR##	footprnt	0	#HEAD#	#TAIL#	262
	32	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	33	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	34	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	35	##ADDR##	procdefn	0	#HEAD#	#TAIL#	118
	36	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	37	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	38	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	39	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	40	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	41	##ADDR##	portscop	0	#HEAD#	#TAIL#	32
	42	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	43	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	44	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	45	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	46	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	48	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	49	##ADDR##	footprnt	0	#HEAD#	#TAIL#	956
	50	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	53	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	54	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	55	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	56	##ADDR##	procdefn	0	#HEAD#	#TAIL#	103
	57	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	58	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	59	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	60	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	62	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	63	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	64	##ADDR##	footprnt	0	#HEAD#	#TAIL#	458
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	66	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	67	##ADDR##	procdefn	0	#HEAD#	#TAIL#	119
	68	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	69	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	70	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	71	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	72	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	73	##ADDR##	portscop	0	#HEAD#	#TAIL#	32
	74	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	77	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	78	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	79	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	80	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	81	##ADDR##	footprnt	0	#HEAD#	#TAIL#	956
	82	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	83	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	84	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	85	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	88	##ADDR##	procplch	0	#HEAD#	#TAIL#	31
	89	##ADDR##	procdefn	0	#HEAD#	#TAIL#	99
	90	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	91	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	92	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	93	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	94	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	95	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	96	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	97	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	98	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	99	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	100	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	101	##ADDR##	footprnt	0	#HEAD#	#TAIL#	594
	102	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	103	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	104	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	105	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	106	##ADDR##	procplch	0	#HEAD#	#TAIL#	29
	107	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	108	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	109	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	110	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	111	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	112	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	113	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	114	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	115	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	116	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	117	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	118	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	119	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	120	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	121	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	122	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	123	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	124	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	125	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	126	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	127	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	128	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	129	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	130	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	131	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	132	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	133	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	134	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	135	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	36
	136	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	137	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	138	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	139	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	140	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	141	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	142	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	143	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	144	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	145	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	146	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	147	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	148	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	149	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	150	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	151	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	152	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	153	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	154	##ADDR##	footprnt	0	#HEAD#	#TAIL#	3864
	155	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	156	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	157	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	158	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	159	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	160	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	161	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	162	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	163	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	164	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	165	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	166	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	167	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	168	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  14 instantiation-collections
  0 sub-namespaces
  6 definitions
  0 typedefs
  Definitions:
    e1of2 = process-definition (defined) e1of2(
        bool<> d[0..1]
        bool<> t
        bool<> f
        bool<> e
      )
      In definition "e1of2", we have: {
      Instances:
        d = bool<> e1of2::d^1
        e = bool<> e1of2::e
        f = bool<> e1of2::f
        t = bool<> e1of2::t
      unroll sequence: 
        ports: (
          bool<> d[0..1]
          bool<> t
          bool<> f
          bool<> e
        )
        d[0] = f;
        d[1] = t;
      footprint: {
        d = bool^1
          {
            [0] = e1of2<>::f (2) 
            [1] = e1of2<>::t (1) 
          }
        e = bool^0 = e1of2<>::e (3) 
        f = bool^0 = e1of2<>::f (2) 
        t = bool^0 = e1of2<>::t (1) 
        Created state:
        bool instance pool:
        1	e1of2<>::t
        2	e1of2<>::f
        3	e1of2<>::e
        bool port aliases:
        1: e1of2<>::t = e1of2<>::d[1]
        2: e1of2<>::f = e1of2<>::d[0]
      }
      }

    globals = process-definition (defined) globals(
      )
      In definition "globals", we have: {
      unroll sequence: 
      footprint: {
      }
      }

    merge = process-definition (defined) merge(
        globals<> g
        e1of2<> a
        e1of2<> b
        e1of2<> c
        e1of2<> x
      )
      In definition "merge", we have: {
      Instances:
        a = e1of2<> merge::a
        b = e1of2<> merge::b
        c = e1of2<> merge::c
        g = globals<> merge::g
        x = e1of2<> merge::x
      unroll sequence: 
        ports: (
          globals<> g
          e1of2<> a
          e1of2<> b
          e1of2<> c
          e1of2<> x
        )
      footprint: {
        a = process e1of2<>^0 = merge<>::a (2) (
          d = bool^1
            {
              [0] = merge<>::a.d[0] (1) 
              [1] = merge<>::a.d[1] (2) 
            }
          t = bool^0 = merge<>::a.d[1] (2) 
          f = bool^0 = merge<>::a.d[0] (1) 
          e = bool^0 = merge<>::a.e (3) 
        )
        b = process e1of2<>^0 = merge<>::b (3) (
          d = bool^1
            {
              [0] = merge<>::b.d[0] (4) 
              [1] = merge<>::b.d[1] (5) 
            }
          t = bool^0 = merge<>::b.d[1] (5) 
          f = bool^0 = merge<>::b.d[0] (4) 
          e = bool^0 = merge<>::b.e (6) 
        )
        c = process e1of2<>^0 = merge<>::c (4) (
          d = bool^1
            {
              [0] = merge<>::c.d[0] (7) 
              [1] = merge<>::c.d[1] (8) 
            }
          t = bool^0 = merge<>::c.d[1] (8) 
          f = bool^0 = merge<>::c.d[0] (7) 
          e = bool^0 = merge<>::c.e (9) 
        )
        g = process globals<>^0 = merge<>::g (1) 
        x = process e1of2<>^0 = merge<>::x (5) (
          d = bool^1
            {
              [0] = merge<>::x.d[0] (10) 
              [1] = merge<>::x.d[1] (11) 
            }
          t = bool^0 = merge<>::x.d[1] (11) 
          f = bool^0 = merge<>::x.d[0] (10) 
          e = bool^0 = merge<>::x.e (12) 
        )
        Created state:
        process instance pool:
        1	merge<>::g
        2	merge<>::a
        3	merge<>::b
        4	merge<>::c
        5	merge<>::x
        bool instance pool:
        1	merge<>::a.d[0]
        2	merge<>::a.d[1]
        3	merge<>::a.e
        4	merge<>::b.d[0]
        5	merge<>::b.d[1]
        6	merge<>::b.e
        7	merge<>::c.d[0]
        8	merge<>::c.d[1]
        9	merge<>::c.e
        10	merge<>::x.d[0]
        11	merge<>::x.d[1]
        12	merge<>::x.e
        bool port aliases:
        1: merge<>::a.d[0] = merge<>::a.f
        2: merge<>::a.d[1] = merge<>::a.t
        4: merge<>::b.d[0] = merge<>::b.f
        5: merge<>::b.d[1] = merge<>::b.t
        7: merge<>::c.d[0] = merge<>::c.f
        8: merge<>::c.d[1] = merge<>::c.t
        10: merge<>::x.d[0] = merge<>::x.f
        11: merge<>::x.d[1] = merge<>::x.t
      }
      }

    source_e1of2_1 = process-definition (defined) source_e1of2_1(
        globals<> g
        e1of2<> r
      )
      In definition "source_e1of2_1", we have: {
      Instances:
        g = globals<> source_e1of2_1::g
        r = e1of2<> source_e1of2_1::r
      unroll sequence: 
        ports: (
          globals<> g
          e1of2<> r
        )
      footprint: {
        g = process globals<>^0 = source_e1of2_1<>::g (1) 
        r = process e1of2<>^0 = source_e1of2_1<>::r (2) (
          d = bool^1
            {
              [0] = source_e1of2_1<>::r.d[0] (1) 
              [1] = source_e1of2_1<>::r.d[1] (2) 
            }
          t = bool^0 = source_e1of2_1<>::r.d[1] (2) 
          f = bool^0 = source_e1of2_1<>::r.d[0] (1) 
          e = bool^0 = source_e1of2_1<>::r.e (3) 
        )
        Created state:
        process instance pool:
        1	source_e1of2_1<>::g
        2	source_e1of2_1<>::r
        bool instance pool:
        1	source_e1of2_1<>::r.d[0]
        2	source_e1of2_1<>::r.d[1]
        3	source_e1of2_1<>::r.e
        bool port aliases:
        1: source_e1of2_1<>::r.d[0] = source_e1of2_1<>::r.f
        2: source_e1of2_1<>::r.d[1] = source_e1of2_1<>::r.t
      }
      }

    split4 = process-definition (defined) split4(
        globals<> g
        e1of2<> l
        e1of2<> c
        e1of2<> a
        e1of2<> b
      )
      In definition "split4", we have: {
      Instances:
        a = e1of2<> split4::a
        b = e1of2<> split4::b
        c = e1of2<> split4::c
        g = globals<> split4::g
        l = e1of2<> split4::l
      unroll sequence: 
        ports: (
          globals<> g
          e1of2<> l
          e1of2<> c
          e1of2<> a
          e1of2<> b
        )
      footprint: {
        a = process e1of2<>^0 = split4<>::a (4) (
          d = bool^1
            {
              [0] = split4<>::a.d[0] (7) 
              [1] = split4<>::a.d[1] (8) 
            }
          t = bool^0 = split4<>::a.d[1] (8) 
          f = bool^0 = split4<>::a.d[0] (7) 
          e = bool^0 = split4<>::a.e (9) 
        )
        b = process e1of2<>^0 = split4<>::b (5) (
          d = bool^1
            {
              [0] = split4<>::b.d[0] (10) 
              [1] = split4<>::b.d[1] (11) 
            }
          t = bool^0 = split4<>::b.d[1] (11) 
          f = bool^0 = split4<>::b.d[0] (10) 
          e = bool^0 = split4<>::b.e (12) 
        )
        c = process e1of2<>^0 = split4<>::c (3) (
          d = bool^1
            {
              [0] = split4<>::c.d[0] (4) 
              [1] = split4<>::c.d[1] (5) 
            }
          t = bool^0 = split4<>::c.d[1] (5) 
          f = bool^0 = split4<>::c.d[0] (4) 
          e = bool^0 = split4<>::c.e (6) 
        )
        g = process globals<>^0 = split4<>::g (1) 
        l = process e1of2<>^0 = split4<>::l (2) (
          d = bool^1
            {
              [0] = split4<>::l.d[0] (1) 
              [1] = split4<>::l.d[1] (2) 
            }
          t = bool^0 = split4<>::l.d[1] (2) 
          f = bool^0 = split4<>::l.d[0] (1) 
          e = bool^0 = split4<>::l.e (3) 
        )
        Created state:
        process instance pool:
        1	split4<>::g
        2	split4<>::l
        3	split4<>::c
        4	split4<>::a
        5	split4<>::b
        bool instance pool:
        1	split4<>::l.d[0]
        2	split4<>::l.d[1]
        3	split4<>::l.e
        4	split4<>::c.d[0]
        5	split4<>::c.d[1]
        6	split4<>::c.e
        7	split4<>::a.d[0]
        8	split4<>::a.d[1]
        9	split4<>::a.e
        10	split4<>::b.d[0]
        11	split4<>::b.d[1]
        12	split4<>::b.e
        bool port aliases:
        1: split4<>::l.d[0] = split4<>::l.f
        2: split4<>::l.d[1] = split4<>::l.t
        4: split4<>::c.d[0] = split4<>::c.f
        5: split4<>::c.d[1] = split4<>::c.t
        7: split4<>::a.d[0] = split4<>::a.f
        8: split4<>::a.d[1] = split4<>::a.t
        10: split4<>::b.d[0] = split4<>::b.f
        11: split4<>::b.d[1] = split4<>::b.t
      }
      }

    upcopy = process-definition (defined) upcopy(
        e1of2<> l
        e1of2<> r
      )
      In definition "upcopy", we have: {
      Instances:
        l = e1of2<> upcopy::l
        r = e1of2<> upcopy::r
      unroll sequence: 
        ports: (
          e1of2<> l
          e1of2<> r
        )
        l.d = r.d;
      footprint: {
        l = process e1of2<>^0 = upcopy<>::l (1) (
          d = bool^1
            {
              [0] = upcopy<>::l.d[0] (1) 
              [1] = upcopy<>::l.d[1] (2) 
            }
          t = bool^0 = upcopy<>::l.d[1] (2) 
          f = bool^0 = upcopy<>::l.d[0] (1) 
          e = bool^0 = upcopy<>::l.e (3) 
        )
        r = process e1of2<>^0 = upcopy<>::r (2) (
          d = bool^1
            {
              [0] = upcopy<>::l.d[0] (1) 
              [1] = upcopy<>::l.d[1] (2) 
            }
          t = bool^0 = upcopy<>::l.d[1] (2) 
          f = bool^0 = upcopy<>::l.d[0] (1) 
          e = bool^0 = upcopy<>::r.e (4) 
        )
        Created state:
        process instance pool:
        1	upcopy<>::l
        2	upcopy<>::r
        bool instance pool:
        1	upcopy<>::l.d[0]
        2	upcopy<>::l.d[1]
        3	upcopy<>::l.e
        4	upcopy<>::r.e
        bool port aliases:
        1: upcopy<>::l.d[0] = upcopy<>::l.f = upcopy<>::r.d[0] = upcopy<>::r.f
        2: upcopy<>::l.d[1] = upcopy<>::l.t = upcopy<>::r.d[1] = upcopy<>::r.t
      }
      }

  Instances:
    cpywcon = upcopy<> cpywcon
    g = globals<> g
    ja = e1of2<> ja
    jb = e1of2<> jb
    l = e1of2<> l
    mrg = merge<> mrg
    splt = split4<> splt
    srcwcon = source_e1of2_1<> srcwcon
    wcon = e1of2<> wcon
    wconm = e1of2<> wconm
    wcons = e1of2<> wcons
    xa = e1of2<> xa
    xb = e1of2<> xb
    xw = e1of2<> xw
}

footprint: {
  cpywcon = process upcopy<>^0 = cpywcon (13) (
    l = process e1of2<>^0 = wcon (5) (
      d = bool^1
        {
          [0] = wcon.d[0] (10) 
          [1] = wcon.d[1] (11) 
        }
      t = bool^0 = wcon.d[1] (11) 
      f = bool^0 = wcon.d[0] (10) 
      e = bool^0 = wcon.e (12) 
    )
    r = process e1of2<>^0 = wcons (6) (
      d = bool^1
        {
          [0] = wcon.d[0] (10) 
          [1] = wcon.d[1] (11) 
        }
      t = bool^0 = wcon.d[1] (11) 
      f = bool^0 = wcon.d[0] (10) 
      e = bool^0 = wcons.e (13) 
    )
  )
  g = process globals<>^0 = g (1) 
  ja = process e1of2<>^0 = ja (3) (
    d = bool^1
      {
        [0] = ja.d[0] (4) 
        [1] = ja.d[1] (5) 
      }
    t = bool^0 = ja.d[1] (5) 
    f = bool^0 = ja.d[0] (4) 
    e = bool^0 = ja.e (6) 
  )
  jb = process e1of2<>^0 = jb (4) (
    d = bool^1
      {
        [0] = jb.d[0] (7) 
        [1] = jb.d[1] (8) 
      }
    t = bool^0 = jb.d[1] (8) 
    f = bool^0 = jb.d[0] (7) 
    e = bool^0 = jb.e (9) 
  )
  l = process e1of2<>^0 = l (2) (
    d = bool^1
      {
        [0] = l.d[0] (1) 
        [1] = l.d[1] (2) 
      }
    t = bool^0 = l.d[1] (2) 
    f = bool^0 = l.d[0] (1) 
    e = bool^0 = l.e (3) 
  )
  mrg = process merge<>^0 = mrg (12) (
    g = process globals<>^0 = g (1) 
    a = process e1of2<>^0 = xa (8) (
      d = bool^1
        {
          [0] = xa.d[0] (17) 
          [1] = xa.d[1] (18) 
        }
      t = bool^0 = xa.d[1] (18) 
      f = bool^0 = xa.d[0] (17) 
      e = bool^0 = xa.e (19) 
    )
    b = process e1of2<>^0 = xb (9) (
      d = bool^1
        {
          [0] = xb.d[0] (20) 
          [1] = xb.d[1] (21) 
        }
      t = bool^0 = xb.d[1] (21) 
      f = bool^0 = xb.d[0] (20) 
      e = bool^0 = xb.e (22) 
    )
    c = process e1of2<>^0 = wconm (7) (
      d = bool^1
        {
          [0] = wconm.d[0] (14) 
          [1] = wconm.d[1] (15) 
        }
      t = bool^0 = wconm.d[1] (15) 
      f = bool^0 = wconm.d[0] (14) 
      e = bool^0 = wconm.e (16) 
    )
    x = process e1of2<>^0 = xw (10) (
      d = bool^1
        {
          [0] = xw.d[0] (23) 
          [1] = xw.d[1] (24) 
        }
      t = bool^0 = xw.d[1] (24) 
      f = bool^0 = xw.d[0] (23) 
      e = bool^0 = xw.e (25) 
    )
  )
  splt = process split4<>^0 = splt (11) (
    g = process globals<>^0 = g (1) 
    l = process e1of2<>^0 = l (2) (
      d = bool^1
        {
          [0] = l.d[0] (1) 
          [1] = l.d[1] (2) 
        }
      t = bool^0 = l.d[1] (2) 
      f = bool^0 = l.d[0] (1) 
      e = bool^0 = l.e (3) 
    )
    c = process e1of2<>^0 = wcons (6) (
      d = bool^1
        {
          [0] = wcon.d[0] (10) 
          [1] = wcon.d[1] (11) 
        }
      t = bool^0 = wcon.d[1] (11) 
      f = bool^0 = wcon.d[0] (10) 
      e = bool^0 = wcons.e (13) 
    )
    a = process e1of2<>^0 = ja (3) (
      d = bool^1
        {
          [0] = ja.d[0] (4) 
          [1] = ja.d[1] (5) 
        }
      t = bool^0 = ja.d[1] (5) 
      f = bool^0 = ja.d[0] (4) 
      e = bool^0 = ja.e (6) 
    )
    b = process e1of2<>^0 = jb (4) (
      d = bool^1
        {
          [0] = jb.d[0] (7) 
          [1] = jb.d[1] (8) 
        }
      t = bool^0 = jb.d[1] (8) 
      f = bool^0 = jb.d[0] (7) 
      e = bool^0 = jb.e (9) 
    )
  )
  srcwcon = process source_e1of2_1<>^0 = srcwcon (14) (
    g = process globals<>^0 = g (1) 
    r = process e1of2<>^0 = wcon (5) (
      d = bool^1
        {
          [0] = wcon.d[0] (10) 
          [1] = wcon.d[1] (11) 
        }
      t = bool^0 = wcon.d[1] (11) 
      f = bool^0 = wcon.d[0] (10) 
      e = bool^0 = wcon.e (12) 
    )
  )
  wcon = process e1of2<>^0 = wcon (5) (
    d = bool^1
      {
        [0] = wcon.d[0] (10) 
        [1] = wcon.d[1] (11) 
      }
    t = bool^0 = wcon.d[1] (11) 
    f = bool^0 = wcon.d[0] (10) 
    e = bool^0 = wcon.e (12) 
  )
  wconm = process e1of2<>^0 = wconm (7) (
    d = bool^1
      {
        [0] = wconm.d[0] (14) 
        [1] = wconm.d[1] (15) 
      }
    t = bool^0 = wconm.d[1] (15) 
    f = bool^0 = wconm.d[0] (14) 
    e = bool^0 = wconm.e (16) 
  )
  wcons = process e1of2<>^0 = wcons (6) (
    d = bool^1
      {
        [0] = wcon.d[0] (10) 
        [1] = wcon.d[1] (11) 
      }
    t = bool^0 = wcon.d[1] (11) 
    f = bool^0 = wcon.d[0] (10) 
    e = bool^0 = wcons.e (13) 
  )
  xa = process e1of2<>^0 = xa (8) (
    d = bool^1
      {
        [0] = xa.d[0] (17) 
        [1] = xa.d[1] (18) 
      }
    t = bool^0 = xa.d[1] (18) 
    f = bool^0 = xa.d[0] (17) 
    e = bool^0 = xa.e (19) 
  )
  xb = process e1of2<>^0 = xb (9) (
    d = bool^1
      {
        [0] = xb.d[0] (20) 
        [1] = xb.d[1] (21) 
      }
    t = bool^0 = xb.d[1] (21) 
    f = bool^0 = xb.d[0] (20) 
    e = bool^0 = xb.e (22) 
  )
  xw = process e1of2<>^0 = xw (10) (
    d = bool^1
      {
        [0] = xw.d[0] (23) 
        [1] = xw.d[1] (24) 
      }
    t = bool^0 = xw.d[1] (24) 
    f = bool^0 = xw.d[0] (23) 
    e = bool^0 = xw.e (25) 
  )
  Created state:
  process instance pool:
  1	g
  2	l
  3	ja
  4	jb
  5	wcon
  6	wcons
  7	wconm
  8	xa
  9	xb
  10	xw
  11	splt
  12	mrg
  13	cpywcon
  14	srcwcon
  bool instance pool:
  1	l.d[0]
  2	l.d[1]
  3	l.e
  4	ja.d[0]
  5	ja.d[1]
  6	ja.e
  7	jb.d[0]
  8	jb.d[1]
  9	jb.e
  10	wcon.d[0]
  11	wcon.d[1]
  12	wcon.e
  13	wcons.e
  14	wconm.d[0]
  15	wconm.d[1]
  16	wconm.e
  17	xa.d[0]
  18	xa.d[1]
  19	xa.e
  20	xb.d[0]
  21	xb.d[1]
  22	xb.e
  23	xw.d[0]
  24	xw.d[1]
  25	xw.e
}
