
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	44
	3	##ADDR##	dintplch	0	#HEAD#	#TAIL#	29
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	83
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	procdefn	0	#HEAD#	#TAIL#	83
	9	##ADDR##	procplch	0	#HEAD#	#TAIL#	33
	10	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	11	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	12	##ADDR##	procdefn	0	#HEAD#	#TAIL#	80
	13	##ADDR##	dintplch	0	#HEAD#	#TAIL#	28
	14	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	17	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	footprnt	0	#HEAD#	#TAIL#	268
	20	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	footprnt	0	#HEAD#	#TAIL#	364
	22	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	23	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	24	##ADDR##	footprnt	0	#HEAD#	#TAIL#	532
	25	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	26	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	27	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	28	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	31	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	32	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	33	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	34	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	mprocref	0	#HEAD#	#TAIL#	20
	37	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	42	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	43	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	dialias_	0	#HEAD#	#TAIL#	20
	45	##ADDR##	sdimiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	mdintref	0	#HEAD#	#TAIL#	20
	47	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	footprnt	0	#HEAD#	#TAIL#	626
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	50	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    basket = process-definition (defined) basket(
        egg<> egg_array[0..1]
      )
      In definition "basket", we have: {
      Instances:
        egg_array = egg<> basket::egg_array^1
      unroll sequence: 
        egg<> egg_array[0..1]
      footprint: {
        egg_array = process egg<>^1
          {
            [0] = basket::egg_array[0] (1) (
              yolk = int<32>^0 = basket::egg_array[0].yolk (1) 
            )
            [1] = basket::egg_array[1] (2) (
              yolk = int<32>^0 = basket::egg_array[1].yolk (2) 
            )
          }
        Created state:
        process instance pool:
        1	basket::egg_array[0]
        2	basket::egg_array[1]
        int instance pool:
        1	basket::egg_array[0].yolk
        2	basket::egg_array[1].yolk
      }
      }

    bundle = process-definition (defined) bundle(
        basket<> c[0..1]
      )
      In definition "bundle", we have: {
      Instances:
        c = basket<> bundle::c^1
      unroll sequence: 
        basket<> c[0..1]
      footprint: {
        c = process basket<>^1
          {
            [0] = bundle::c[0] (1) (
              egg_array = process egg<>^1
                {
                  [0] = bundle::c[0].egg_array[0] (2) (
                    yolk = int<32>^0 = bundle::c[0].egg_array[0].yolk (1) 
                  )
                  [1] = bundle::c[0].egg_array[1] (3) (
                    yolk = int<32>^0 = bundle::c[0].egg_array[1].yolk (2) 
                  )
                }
            )
            [1] = bundle::c[1] (4) (
              egg_array = process egg<>^1
                {
                  [0] = bundle::c[1].egg_array[0] (5) (
                    yolk = int<32>^0 = bundle::c[1].egg_array[0].yolk (3) 
                  )
                  [1] = bundle::c[1].egg_array[1] (6) (
                    yolk = int<32>^0 = bundle::c[1].egg_array[1].yolk (4) 
                  )
                }
            )
          }
        Created state:
        process instance pool:
        1	bundle::c[0]
        2	bundle::c[0].egg_array[0]
        3	bundle::c[0].egg_array[1]
        4	bundle::c[1]
        5	bundle::c[1].egg_array[0]
        6	bundle::c[1].egg_array[1]
        int instance pool:
        1	bundle::c[0].egg_array[0].yolk
        2	bundle::c[0].egg_array[1].yolk
        3	bundle::c[1].egg_array[0].yolk
        4	bundle::c[1].egg_array[1].yolk
      }
      }

    egg = process-definition (defined) egg(
        int<32> yolk
      )
      In definition "egg", we have: {
      Instances:
        yolk = int<32> egg::yolk
      unroll sequence: 
        int<32> yolk
      footprint: {
        yolk = int<32>^0 = egg::yolk (1) 
        Created state:
        int instance pool:
        1	egg::yolk
      }
      }

  Instances:
    count = int<32> count
    golden = egg<> golden
    load = bundle<> load
}

footprint: {
  count = int<32>^0 = count (2) 
  golden = process egg<>^0 = golden (4) (
    yolk = int<32>^0 = count (2) 
  )
  load = process bundle<>^0 = load (1) (
    c = process basket<>^1
      {
        [0] = load.c[0] (2) (
          egg_array = process egg<>^1
            {
              [0] = load.c[0].egg_array[0] (3) (
                yolk = int<32>^0 = load.c[0].egg_array[0].yolk (1) 
              )
              [1] = golden (4) (
                yolk = int<32>^0 = count (2) 
              )
            }
        )
        [1] = load.c[1] (5) (
          egg_array = process egg<>^1
            {
              [0] = load.c[1].egg_array[0] (6) (
                yolk = int<32>^0 = load.c[1].egg_array[0].yolk (3) 
              )
              [1] = load.c[1].egg_array[1] (7) (
                yolk = int<32>^0 = load.c[1].egg_array[1].yolk (4) 
              )
            }
        )
      }
  )
  Created state:
  process instance pool:
  1	load
  2	load.c[0]
  3	load.c[0].egg_array[0]
  4	golden
  5	load.c[1]
  6	load.c[1].egg_array[0]
  7	load.c[1].egg_array[1]
  int instance pool:
  1	load.c[0].egg_array[0].yolk
  2	count
  3	load.c[1].egg_array[0].yolk
  4	load.c[1].egg_array[1].yolk
}
