
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	52
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	218
	4	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	53
	8	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	30
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	11	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	12	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datadefn	0	#HEAD#	#TAIL#	52
	15	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	34
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	19	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	20	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	21	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	22	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	23	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	55
	24	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	25	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	26	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	39
	28	##ADDR##	proccoll	0	#HEAD#	#TAIL#	67
	29	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	30	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	31	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	32	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	114
	33	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	43
	34	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	43
	35	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	36	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	37	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	76
	39	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	76
	40	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	41	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	42	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	44	##ADDR##	proccoll	2	#HEAD#	#TAIL#	411
	45	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	46	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	47	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	48	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	49	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	50	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	51	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	52	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	53	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	54	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	55	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	56	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	57	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	58	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	59	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	60	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	61	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	62	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	63	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	64	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	65	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	66	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	67	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	68	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	69	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	70	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	71	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	72	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	73	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	74	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	75	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	76	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	77	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	78	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	79	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	80	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	81	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	82	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	83	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	84	##ADDR##	proccoll	0	#HEAD#	#TAIL#	79
	85	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	87	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	35
	88	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	82
	89	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	39
	90	##ADDR##	dintcoll	1	#HEAD#	#TAIL#	60
	91	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	114
	92	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	93	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	94	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	95	##ADDR##	portconn	0	#HEAD#	#TAIL#	32
	96	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	97	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	98	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	99	##ADDR##	sdimref_	0	#HEAD#	#TAIL#	20
	100	##ADDR##	sdimref_	0	#HEAD#	#TAIL#	20
	101	##ADDR##	portconn	0	#HEAD#	#TAIL#	32
	102	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	103	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	104	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	105	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	106	##ADDR##	prcalias	0	#HEAD#	#TAIL#	20
	107	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	108	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	20
	109	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	110	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	111	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  7 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    portaproc = process-definition (defined) portaproc(
        bool<> b
        bool<> c with indices: {
          [0..3]
        }

        int<32> i
        int<32> j with indices: {
          [0..1]
        }

      )
      In definition "portaproc", we have: {
      Instances:
        b = bool<> b
        c = bool<> c with indices: {
          [0..3]
        }

        i = int<32> i
        j = int<32> j with indices: {
          [0..1]
        }

      footprint: {
        bool^0 b (instantiated) = ::portaproc::b 
        bool^1 c with indices: {
        }
          unrolled indices: {
            0 = ::portaproc::c[0] 
            1 = ::portaproc::c[1] 
            2 = ::portaproc::c[2] 
            3 = ::portaproc::c[3] 
          }
        int<32>^0 i (instantiated) = ::portaproc::i 
        int<32>^1 j with indices: {
        }
          unrolled indices: {
            0 = ::portaproc::j[0] 
            1 = ::portaproc::j[1] 
          }
      }
      }

  Instances:
    a = bool^0 a (instantiated) = ::p.b 
    p = process portaproc<>^0 p (instantiated) = ::p (
      bool^0 b (instantiated) = ::a 
      bool^1 c with indices: {
        [0..3]
      }
        unrolled indices: {
          0 = ::x[0] 
          1 = ::x[1] 
          2 = ::x[2] 
          3 = ::x[3] 
        }
      int<32>^0 i (instantiated) = ::q 
      int<32>^1 j with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::r[0] 
          1 = ::r[1] 
        }
    )
    q = int<32>^0 q (instantiated) = ::p.i 
    r = int<32>^1 r with indices: {
      [0..1]
    }
      unrolled indices: {
        0 = ::p.j[0] 
        1 = ::p.j[1] 
      }
    s = process portaproc<>^2 s with indices: {
      [0..2][0..2]
    }
      unrolled indices: {
        [0][0] = ::s[0][0] (
          bool^0 b (instantiated) = ::s[0][0].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[0][0].c[0] 
              1 = ::s[0][0].c[1] 
              2 = ::s[0][0].c[2] 
              3 = ::s[0][0].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[0][0].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[0][0].j[0] 
              1 = ::s[0][0].j[1] 
            }
        )
        [0][1] = ::s[0][1] (
          bool^0 b (instantiated) = ::s[0][1].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[0][1].c[0] 
              1 = ::s[0][1].c[1] 
              2 = ::s[0][1].c[2] 
              3 = ::s[0][1].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[0][1].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[0][1].j[0] 
              1 = ::s[0][1].j[1] 
            }
        )
        [0][2] = ::s[0][2] (
          bool^0 b (instantiated) = ::s[0][2].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[0][2].c[0] 
              1 = ::s[0][2].c[1] 
              2 = ::s[0][2].c[2] 
              3 = ::s[0][2].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[0][2].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[0][2].j[0] 
              1 = ::s[0][2].j[1] 
            }
        )
        [1][0] = ::s[1][0] (
          bool^0 b (instantiated) = ::s[1][0].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[1][0].c[0] 
              1 = ::s[1][0].c[1] 
              2 = ::s[1][0].c[2] 
              3 = ::s[1][0].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[1][0].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[1][0].j[0] 
              1 = ::s[1][0].j[1] 
            }
        )
        [1][1] = ::t (
          bool^0 b (instantiated) = ::s[1][1].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[1][1].c[0] 
              1 = ::s[1][1].c[1] 
              2 = ::s[1][1].c[2] 
              3 = ::s[1][1].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[1][1].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[1][1].j[0] 
              1 = ::s[1][1].j[1] 
            }
        )
        [1][2] = ::s[1][2] (
          bool^0 b (instantiated) = ::s[1][2].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[1][2].c[0] 
              1 = ::s[1][2].c[1] 
              2 = ::s[1][2].c[2] 
              3 = ::s[1][2].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[1][2].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[1][2].j[0] 
              1 = ::s[1][2].j[1] 
            }
        )
        [2][0] = ::s[2][0] (
          bool^0 b (instantiated) = ::s[2][0].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[2][0].c[0] 
              1 = ::s[2][0].c[1] 
              2 = ::s[2][0].c[2] 
              3 = ::s[2][0].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[2][0].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[2][0].j[0] 
              1 = ::s[2][0].j[1] 
            }
        )
        [2][1] = ::s[2][1] (
          bool^0 b (instantiated) = ::s[2][1].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[2][1].c[0] 
              1 = ::s[2][1].c[1] 
              2 = ::s[2][1].c[2] 
              3 = ::s[2][1].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[2][1].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[2][1].j[0] 
              1 = ::s[2][1].j[1] 
            }
        )
        [2][2] = ::s[2][2] (
          bool^0 b (instantiated) = ::s[2][2].b 
          bool^1 c with indices: {
            [0..3]
          }
            unrolled indices: {
              0 = ::s[2][2].c[0] 
              1 = ::s[2][2].c[1] 
              2 = ::s[2][2].c[2] 
              3 = ::s[2][2].c[3] 
            }
          int<32>^0 i (instantiated) = ::s[2][2].i 
          int<32>^1 j with indices: {
            [0..1]
          }
            unrolled indices: {
              0 = ::s[2][2].j[0] 
              1 = ::s[2][2].j[1] 
            }
        )
      }
    t = process portaproc<>^0 t (instantiated) = ::s[1][1] (
      bool^0 b (instantiated) = ::t.b 
      bool^1 c with indices: {
        [0..3]
      }
        unrolled indices: {
          0 = ::t.c[0] 
          1 = ::t.c[1] 
          2 = ::t.c[2] 
          3 = ::t.c[3] 
        }
      int<32>^0 i (instantiated) = ::t.i 
      int<32>^1 j with indices: {
        [0..1]
      }
        unrolled indices: {
          0 = ::t.j[0] 
          1 = ::t.j[1] 
        }
    )
    x = bool^1 x with indices: {
      [0..3]
    }
      unrolled indices: {
        0 = ::p.c[0] 
        1 = ::p.c[1] 
        2 = ::p.c[2] 
        3 = ::p.c[3] 
      }
}

