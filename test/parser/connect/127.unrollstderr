
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	195
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	5	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	6	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	12	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	13	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	14	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	15	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	16	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	17	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	18	##ADDR##	procdefn	0	#HEAD#	#TAIL#	196
	19	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	20	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	21	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	22	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	24	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	procdefn	0	#HEAD#	#TAIL#	198
	26	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	33
	27	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	31	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	32	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	21
	36	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	25
	37	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	38	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	40	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	42	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	43	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	44	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	45	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	46	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25
	47	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	48	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	49	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	50	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	52	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	55	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	56	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	21
	57	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	58	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	59	##ADDR##	procpacc	0	#HEAD#	#TAIL#	33
	60	##ADDR##	dboolpac	0	#HEAD#	#TAIL#	25

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    ar = process-definition (defined) ar(
        bool<> y
      )
      In definition "ar", we have: {
      Instances:
        y = bool<> ar::y
        z = bool<> ar::z
      unroll sequence: 
        bool<> y
        bool<> z
        y = z;
      footprint: {
        y = bool^0 = ar::z 
        z = bool^0 = ar::z 
      }
      }

    array = process-definition (defined) array(
        bool<> x
      )
      In definition "array", we have: {
      Instances:
        composite = bool<> array::composite
        x = bool<> array::x
      unroll sequence: 
        bool<> x
        bool<> composite
        x = composite;
      footprint: {
        composite = bool^0 = array::composite 
        x = bool^0 = array::composite 
      }
      }

    foo = process-definition (defined) foo(
        ar<> r
      )
      In definition "foo", we have: {
      Instances:
        k = array<> foo::k
        r = ar<> foo::r
      unroll sequence: 
        ar<> r
        array<> k
        k (r.y);
      footprint: {
        k = process array<>^0 = foo::k (
          x = bool^0 = foo::k.x 
        )
        r = process ar<>^0 = foo::r (
          y = bool^0 = foo::k.x 
        )
      }
      }

  Instances:
    B = ar<> B
    C = foo<> C
}

footprint: {
  B = process ar<>^0 = C.r (
    y = bool^0 = B.y 
  )
  C = process foo<>^0 = C (
    r = process ar<>^0 = C.r (
      y = bool^0 = B.y 
    )
  )
}
