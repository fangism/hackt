WARNING: channel Z.A lacks connection to a producer.
WARNING: channel Z.B lacks connection to a producer.
WARNING: channel Z.G lacks connection to a producer.
WARNING: channel Z.Z lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	160
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	14	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	15	##ADDR##	portscop	0	#HEAD#	#TAIL#	36
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	22	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	23	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	27	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	33	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	34	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	37	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	38	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	40	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	41	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	42	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	43	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	44	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	47	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	48	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	49	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	50	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	53	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	footprnt	0	#HEAD#	#TAIL#	570
	56	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	57	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	58	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	59	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	61	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	62	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	63	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	64	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	65	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	66	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	67	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	68	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	69	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	70	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	71	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	72	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	73	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	74	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	76	##ADDR##	footprnt	0	#HEAD#	#TAIL#	494
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        bool<> !GND
        bool<> !Vdd
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
      Instances:
        !GND = bool<> split_bool_soup::!GND
        !Vdd = bool<> split_bool_soup::!Vdd
        A = chan?(bool<>) split_bool_soup::A
        B = chan?(bool<>) split_bool_soup::B
        G = chan?(bool<>) split_bool_soup::G
        Z = chan!(bool<>) split_bool_soup::Z
        g = bool<> split_bool_soup::g
        x = bool<> split_bool_soup::x
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(bool<>) A
          chan?(bool<>) B
          chan?(bool<>) G
          chan!(bool<>) Z
        )
        bool<> g
        bool<> x
      chp:
        concurrent: {
          *[
            sequential: {
              G#(g)
              concurrent: {
                G?
                sequential: {
                  deterministic: {
                    g -> A?(x)
                    ~g -> B?(x)
                  }
                  Z!(x)
                }
              }
            }
          ]
        }
      footprint: {
        !GND = bool^0 = split_bool_soup<>::!GND (1) 
        !Vdd = bool^0 = split_bool_soup<>::!Vdd (2) 
        A = channel chan?(bool<>)^0 = split_bool_soup<>::A (1) 
        B = channel chan?(bool<>)^0 = split_bool_soup<>::B (2) 
        G = channel chan?(bool<>)^0 = split_bool_soup<>::G (3) 
        Z = channel chan!(bool<>)^0 = split_bool_soup<>::Z (4) 
        g = bool^0 = split_bool_soup<>::g (3) 
        x = bool^0 = split_bool_soup<>::x (4) 
        Created state:
        channel instance pool:
        1	split_bool_soup<>::A
        2	split_bool_soup<>::B
        3	split_bool_soup<>::G
        4	split_bool_soup<>::Z
        bool instance pool:
        1	split_bool_soup<>::!GND
        2	split_bool_soup<>::!Vdd
        3	split_bool_soup<>::g
        4	split_bool_soup<>::x
        resolved concurrent actions:
          *[
            sequential: {
              G#(g)
              concurrent: {
                G?
                sequential: {
                  deterministic: {
                    g -> A?(x)
                    ~g -> B?(x)
                  }
                  Z!(x)
                }
              }
            }
          ]
        chp events: {
          event[0]: peek: G#(g), #pred: 1, succ: 8 
          event[1]: join: , #pred: 2, succ: 0 
          event[2]: receive: G?, #pred: 1, succ: 1 
          event[3]: send: Z!(x), #pred: 1, succ: 1 
          event[4]: null: null, #pred: 1, succ: 3 
          event[5]: receive: A?(x), #pred: 1, succ: 4 
          event[6]: receive: B?(x), #pred: 1, succ: 4 
          event[7]: select: [ g -> ... [] ~g -> ... ], #pred: 1, succ: 5 6 
          event[8]: fork: , #pred: 1, succ: 2 7 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    Z = split_bool_soup<> Z
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  Z = process split_bool_soup<>^0 = Z (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    A = channel chan?(bool<>)^0 = Z.A (1) 
    B = channel chan?(bool<>)^0 = Z.B (2) 
    G = channel chan?(bool<>)^0 = Z.G (3) 
    Z = channel chan!(bool<>)^0 = Z.Z (4) 
  )
  Created state:
  process instance pool:
  1	Z
  channel instance pool:
  1	Z.A
  2	Z.B
  3	Z.G
  4	Z.Z
  bool instance pool:
  1	!GND
  2	!Vdd
}
