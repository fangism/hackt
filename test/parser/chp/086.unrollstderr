
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	261
	5	##ADDR##	chancoll	0	#HEAD#	#TAIL#	49
	6	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	10	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	12	##ADDR##	chancoll	1	#HEAD#	#TAIL#	42
	13	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	14	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	19	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	29
	20	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	21	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	22	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	23	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	24	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	48	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	49	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	51	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	54	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	20
	55	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	56	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	57	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	61	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	62	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	66	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	67	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	69	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	70	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	72	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	73	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	74	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	75	##ADDR##	chancoll	1	#HEAD#	#TAIL#	84
	76	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	77	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	78	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	93
	79	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	80	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	81	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	82	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	83	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	84	##ADDR##	chancoll	1	#HEAD#	#TAIL#	84
	85	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	86	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	87	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	88	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	89	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed(
        chan?(int<1>) index[0..1]
        chan!(int<32>) out
      )
      In definition "send_indexed", we have: {
      Parameters:
        x = pint<> x

      Instances:
        index = chan?(int<1>) index

        out = chan!(int<32>) out
        y = int<1> y
        z = int<1> z
      unroll sequence: 
        chan?(int<1>) index[0..1]
        chan!(int<32>) out
        pint<> x[0..1][0..1]
        x[0][0] = 1;
        x[0][1] = 2;
        x[1][0] = 3;
        x[1][1] = 4;
        int<1> y
        int<1> z
      chp:
        concurrent: {
          *[
            sequential: {
              concurrent: {
                index[0]?(y)
                index[1]?(z)
              }
              out!(x[y][z])
            }
          ]
        }
      footprint: {
        channel chan!(int<32>)^0 out (instantiated) = ::send_indexed::out 
        channel chan?(int<1>)^1 index
          unrolled indices: {
            0 = ::send_indexed::index[0] 
            1 = ::send_indexed::index[1] 
          }
        pint^2 x
          unrolled index-value pairs: {
            [0][0] = 1
            [0][1] = 2
            [1][0] = 3
            [1][1] = 4
          }
        int<1>^0 y (instantiated) = ::send_indexed::y 
        int<1>^0 z (instantiated) = ::send_indexed::z 
      }
      }

  Instances:
    foo = process send_indexed<>^0 foo (instantiated) = ::foo (
      channel chan?(int<1>)^1 index
        unrolled indices: {
          0 = ::foo.index[0] 
          1 = ::foo.index[1] 
        }
      channel chan!(int<32>)^0 out (instantiated) = ::foo.out 
    )
}

