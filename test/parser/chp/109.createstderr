
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	24
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	141
	4	##ADDR##	chanplch	0	#HEAD#	#TAIL#	26
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	26
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	12	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	13	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	16	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	30	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	31	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	33	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	34	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	35	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	36	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	39	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	41	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	42	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	45	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	47	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	49	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	52	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	53	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	56	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	footprnt	0	#HEAD#	#TAIL#	266

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    sum_diff = process-definition (defined) sum_diff(
        chan?(int<32>) L1
        chan?(int<32>) L2
        chan!(int<32>) R
      )
      In definition "sum_diff", we have: {
      Instances:
        L1 = chan?(int<32>) sum_diff::L1
        L2 = chan?(int<32>) sum_diff::L2
        M = chan(int<32>) sum_diff::M
        R = chan!(int<32>) sum_diff::R
        w = int<32> sum_diff::w
        x = int<32> sum_diff::x
        z = int<32> sum_diff::z
      unroll sequence: 
        ports: (
          chan?(int<32>) L1
          chan?(int<32>) L2
          chan!(int<32>) R
        )
        int<32> x
        int<32> z
        int<32> w
        chan(int<32>) M
      chp:
        concurrent: {
          sequential: {
            concurrent: {
              sequential: {
                L1#(x)
                L1?
              }
              sequential: {
                L2#(z)
                L2?
              }
            }
            M!(x-z)
          }
          sequential: {
            M?(w)
            R!(w)
          }
        }
      }

}

footprint: {
}
