
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail
	0	         0	________	0	0	0
	1	 0x3d04e30	module__	0	0	29
	2	 0x3d00144	namespc_	0	29	53
	3	 0x3d04e50	procdefn	0	53	181
	4	 0x3d04ee4	chancoll	0	181	223
	5	 0x3d04f40	chaninst	0	223	243
	6	 0x3d04f60	bchntprf	0	243	268
	7	 0x3d04f90	datatprf	0	268	288
	8	 0x3d04fb0	datadefn	0	288	341
	9	 0x3d05054	chancoll	0	341	383
	10	 0x3d050b0	chaninst	0	383	403
	11	 0x3d050d4	chancoll	0	403	445
	12	 0x3d05130	chaninst	0	445	465
	13	 0x3d05154	chancoll	0	465	507
	14	 0x3d051b0	chaninst	0	507	527
	15	 0x3d051d0	bchntprf	0	527	552
	16	 0x3d05200	datatprf	0	552	572
	17	 0x3d05224	dboolcol	0	572	606
	18	 0x3d05280	datainst	0	606	630
	19	 0x3d052a0	datatprf	0	630	650
	20	 0x3d052c4	dboolcol	0	650	684
	21	 0x3d05320	datainst	0	684	708
	22	 0x3d05340	CHPloop_	0	708	720
	23	 0x3d05350	CHPseqnc	0	720	744
	24	 0x3d05360	CHPrecv_	0	744	764
	25	 0x3d05380	schnnref	0	764	780
	26	 0x3d05390	sdbnref_	0	780	796
	27	 0x3d053b0	CHPdetsl	0	796	816
	28	 0x3d053c0	CHPguard	0	816	832
	29	 0x3d053e0	sdbnref_	0	832	848
	30	 0x3d05400	CHPrecv_	0	848	868
	31	 0x3d05420	schnnref	0	868	884
	32	 0x3d05430	sdbnref_	0	884	900
	33	 0x3d05450	CHPguard	0	900	916
	34	 0x3d05470	nbnotex_	0	916	928
	35	 0x3d05480	sdbnref_	0	928	944
	36	 0x3d054a0	CHPrecv_	0	944	964
	37	 0x3d054c0	schnnref	0	964	980
	38	 0x3d054d0	sdbnref_	0	980	996
	39	 0x3d054f0	CHPsend_	0	996	1016
	40	 0x3d05510	schnnref	0	1016	1032
	41	 0x3d05520	sdbnref_	0	1032	1048

In module created from: ./053.in (unrolled)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
        A = chan?(bool<>) A
        B = chan?(bool<>) B
        G = chan?(bool<>) G
        Z = chan!(bool<>) Z
        g = bool<> g
        x = bool<> x
        chp:
        concurrent: {
          *[
            sequential: {
              G?(g)
              deterministic: {
                g -> A?(x)
                ~g -> B?(x)
              }
              Z!(x)
            }
          ]
        }
      }

}

