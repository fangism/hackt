WARNING: channel y2_0.b lacks connection to a consumer.
WARNING: channel y2_1.b lacks connection to a consumer.
WARNING: channel y3_0.b lacks connection to a consumer.
WARNING: channel y3_1.b lacks connection to a consumer.
WARNING: channel y3_2.b lacks connection to a consumer.
WARNING: channel y6_0.b lacks connection to a consumer.
WARNING: channel y6_1.b lacks connection to a consumer.
WARNING: channel y6_2.b lacks connection to a consumer.
WARNING: channel y6_3.b lacks connection to a consumer.
WARNING: channel y6_4.b lacks connection to a consumer.
WARNING: channel y6_5.b lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	72
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	326
	10	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	11	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	12	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	13	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	14	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	15	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	16	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	18	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	21	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	22	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	23	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	27	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	28	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	29	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	30	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	32	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	26
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	footprnt	0	#HEAD#	#TAIL#	329
	37	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	38	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	39	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	40	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	41	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	26
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	footprnt	0	#HEAD#	#TAIL#	329
	46	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	47	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	48	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	49	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	50	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	51	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	53	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	footprnt	0	#HEAD#	#TAIL#	334
	55	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	56	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	57	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	58	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	59	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	60	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	61	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	footprnt	0	#HEAD#	#TAIL#	334
	64	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	66	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	67	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	68	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	69	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	70	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	71	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	72	##ADDR##	footprnt	0	#HEAD#	#TAIL#	334
	73	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	74	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	75	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	76	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	77	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	80	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	81	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	82	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	83	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	84	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	85	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	86	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	87	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	88	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	89	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	90	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	91	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	92	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	93	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	94	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	95	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	96	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	97	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	98	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	99	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	100	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	101	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	102	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	103	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	104	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	105	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	106	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	107	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	108	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	109	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	110	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	111	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	112	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	113	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	114	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	115	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	116	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	117	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	118	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	119	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	120	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	121	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	122	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	123	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	124	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	125	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	126	##ADDR##	footprnt	0	#HEAD#	#TAIL#	349
	127	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	128	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	129	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	130	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	131	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	132	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	133	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	134	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	135	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	136	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	137	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	138	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	139	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	140	##ADDR##	loopscop	0	#HEAD#	#TAIL#	24
	141	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	142	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	143	##ADDR##	pbassign	0	#HEAD#	#TAIL#	20
	144	##ADDR##	pireltex	0	#HEAD#	#TAIL#	22
	145	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	146	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	147	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	148	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	149	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	150	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	151	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	152	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	153	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	154	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	155	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	156	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	157	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	158	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	159	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	160	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	161	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	162	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	163	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	164	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	165	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	166	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	167	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	168	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	169	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	170	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	171	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	172	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	173	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	174	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	175	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	176	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	177	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	178	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	179	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	180	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	181	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	182	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	183	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	184	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	185	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	186	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	187	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	188	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	189	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	190	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	191	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	192	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	193	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	194	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	195	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	196	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	197	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	198	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	199	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	200	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	201	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	202	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	203	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	204	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	205	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	206	##ADDR##	footprnt	0	#HEAD#	#TAIL#	919
	207	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	208	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	209	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	210	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	211	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	212	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	213	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	214	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	215	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	216	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	217	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  1 parameter-collections
  11 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Parameters:
    x = pbool<> x^1
  Definitions:
    assign_me = process-definition (defined) assign_me<
      pint<> N
      pbool<> B[0..N-1]
      pint<> M
      >(
        chan!(bool<>) b
      )
      In definition "assign_me", we have: {
      Parameters:
        B = pbool<> assign_me::B^1
        M = pint<> assign_me::M
        N = pint<> assign_me::N
      Instances:
        b = chan!(bool<>) assign_me::b
      unroll sequence: 
        chan!(bool<>) b
      chp:
        concurrent: {
          *[
            b!(B[M])
          ]
        }
      footprint collection: {
        <2, {0,1}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
            }
          M = pint^0 value: 0
          N = pint^0 value: 2
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <2, {0,1}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
            }
          M = pint^0 value: 1
          N = pint^0 value: 2
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(true)
            ]
        }
        <3, {0,1,0}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 0
          N = pint^0 value: 3
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <3, {0,1,0}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 1
          N = pint^0 value: 3
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(true)
            ]
        }
        <3, {0,1,0}, 2> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 2
          N = pint^0 value: 3
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <6, {0,1,0,1,0,1}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 0
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <6, {0,1,0,1,0,1}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 1
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(true)
            ]
        }
        <6, {0,1,0,1,0,1}, 2> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 2
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <6, {0,1,0,1,0,1}, 3> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 3
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(true)
            ]
        }
        <6, {0,1,0,1,0,1}, 4> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 4
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(false)
            ]
        }
        <6, {0,1,0,1,0,1}, 5> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 5
          N = pint^0 value: 6
          b = channel chan!(bool<>)^0 = assign_me::b (1) 
          Created state:
          channel instance pool:
          1	assign_me::b
          resolved concurrent actions:
            *[
              b!(true)
            ]
        }
      }
      }

  Instances:
    y2_0 = assign_me<2, x[0..1], 0> y2_0
    y2_1 = assign_me<2, x[0..1], 1> y2_1
    y3_0 = assign_me<3, x[2..4], 0> y3_0
    y3_1 = assign_me<3, x[2..4], 1> y3_1
    y3_2 = assign_me<3, x[2..4], 2> y3_2
    y6_0 = assign_me<6, x, 0> y6_0
    y6_1 = assign_me<6, x, 1> y6_1
    y6_2 = assign_me<6, x, 2> y6_2
    y6_3 = assign_me<6, x, 3> y6_3
    y6_4 = assign_me<6, x, 4> y6_4
    y6_5 = assign_me<6, x, 5> y6_5
}

footprint: {
  x = pbool^1
    unrolled index-value pairs: {
      0 = 0
      1 = 1
      2 = 0
      3 = 1
      4 = 0
      5 = 1
    }
  y2_0 = process assign_me<2, {0,1}, 0>^0 = y2_0 (1) (
    b = channel chan!(bool<>)^0 = y2_0.b (1) 
  )
  y2_1 = process assign_me<2, {0,1}, 1>^0 = y2_1 (2) (
    b = channel chan!(bool<>)^0 = y2_1.b (2) 
  )
  y3_0 = process assign_me<3, {0,1,0}, 0>^0 = y3_0 (3) (
    b = channel chan!(bool<>)^0 = y3_0.b (3) 
  )
  y3_1 = process assign_me<3, {0,1,0}, 1>^0 = y3_1 (4) (
    b = channel chan!(bool<>)^0 = y3_1.b (4) 
  )
  y3_2 = process assign_me<3, {0,1,0}, 2>^0 = y3_2 (5) (
    b = channel chan!(bool<>)^0 = y3_2.b (5) 
  )
  y6_0 = process assign_me<6, {0,1,0,1,0,1}, 0>^0 = y6_0 (6) (
    b = channel chan!(bool<>)^0 = y6_0.b (6) 
  )
  y6_1 = process assign_me<6, {0,1,0,1,0,1}, 1>^0 = y6_1 (7) (
    b = channel chan!(bool<>)^0 = y6_1.b (7) 
  )
  y6_2 = process assign_me<6, {0,1,0,1,0,1}, 2>^0 = y6_2 (8) (
    b = channel chan!(bool<>)^0 = y6_2.b (8) 
  )
  y6_3 = process assign_me<6, {0,1,0,1,0,1}, 3>^0 = y6_3 (9) (
    b = channel chan!(bool<>)^0 = y6_3.b (9) 
  )
  y6_4 = process assign_me<6, {0,1,0,1,0,1}, 4>^0 = y6_4 (10) (
    b = channel chan!(bool<>)^0 = y6_4.b (10) 
  )
  y6_5 = process assign_me<6, {0,1,0,1,0,1}, 5>^0 = y6_5 (11) (
    b = channel chan!(bool<>)^0 = y6_5.b (11) 
  )
  Created state:
  process instance pool:
  1	y2_0
  2	y2_1
  3	y3_0
  4	y3_1
  5	y3_2
  6	y6_0
  7	y6_1
  8	y6_2
  9	y6_3
  10	y6_4
  11	y6_5
  channel instance pool:
  1	y2_0.b
  2	y2_1.b
  3	y3_0.b
  4	y3_1.b
  5	y3_2.b
  6	y6_0.b
  7	y6_1.b
  8	y6_2.b
  9	y6_3.b
  10	y6_4.b
  11	y6_5.b
}
