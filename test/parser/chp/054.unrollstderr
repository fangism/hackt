
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail
	0	         0	________	0	0	0
	1	 0x3c04b50	module__	0	0	29
	2	 0x3c00144	namespc_	0	29	53
	3	 0x3c04b70	procdefn	0	53	181
	4	 0x3c04c04	chancoll	0	181	219
	5	 0x3c04c60	chaninst	0	219	239
	6	 0x3c04c80	bchntprf	0	239	264
	7	 0x3c04cb0	datatprf	0	264	284
	8	 0x3c04cd0	datadefn	0	284	337
	9	 0x3c04d74	chancoll	0	337	375
	10	 0x3c04dd0	chaninst	0	375	395
	11	 0x3c04df4	chancoll	0	395	433
	12	 0x3c04e50	chaninst	0	433	453
	13	 0x3c04e74	chancoll	0	453	491
	14	 0x3c04ed0	chaninst	0	491	511
	15	 0x3c04ef0	bchntprf	0	511	536
	16	 0x3c04f20	datatprf	0	536	556
	17	 0x3c04f44	dboolcol	0	556	590
	18	 0x3c04fa0	datainst	0	590	614
	19	 0x3c04fc0	datatprf	0	614	634
	20	 0x3c04fe4	dboolcol	0	634	668
	21	 0x3c05040	datainst	0	668	692
	22	 0x3c05060	CHPloop_	0	692	704
	23	 0x3c05070	CHPseqnc	0	704	728
	24	 0x3c05080	CHPrecv_	0	728	748
	25	 0x3c050a0	schnnref	0	748	764
	26	 0x3c050b0	sdbnref_	0	764	780
	27	 0x3c050d0	CHPdetsl	0	780	800
	28	 0x3c050e0	CHPguard	0	800	816
	29	 0x3c05100	sdbnref_	0	816	832
	30	 0x3c05120	CHPrecv_	0	832	852
	31	 0x3c05140	schnnref	0	852	868
	32	 0x3c05150	sdbnref_	0	868	884
	33	 0x3c05170	CHPguard	0	884	900
	34	 0x3c05190	CHPrecv_	0	900	920
	35	 0x3c051b0	schnnref	0	920	936
	36	 0x3c051c0	sdbnref_	0	936	952
	37	 0x3c051e0	CHPsend_	0	952	972
	38	 0x3c05200	schnnref	0	972	988
	39	 0x3c05210	sdbnref_	0	988	1004

In module created from: ./054.in (unrolled)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
        A = chan?(bool<>) A
        B = chan?(bool<>) B
        G = chan?(bool<>) G
        Z = chan!(bool<>) Z
        g = bool<> g
        x = bool<> x
        chp:
        concurrent: {
          *[
            sequential: {
              G?(g)
              deterministic: {
                g -> A?(x)
                else -> B?(x)
              }
              Z!(x)
            }
          ]
        }
      }

}

