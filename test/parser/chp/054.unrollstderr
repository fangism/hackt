
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail
	0	         0	________	0	0	0
	1	 0x3d04b50	module__	0	0	29
	2	 0x3d00144	namespc_	0	29	53
	3	 0x3d04b70	procdefn	0	53	181
	4	 0x3d04c04	chancoll	0	181	223
	5	 0x3d04c60	chaninst	0	223	243
	6	 0x3d04c80	bchntprf	0	243	268
	7	 0x3d04cb0	datatprf	0	268	288
	8	 0x3d04cd0	datadefn	0	288	341
	9	 0x3d04d74	chancoll	0	341	383
	10	 0x3d04dd0	chaninst	0	383	403
	11	 0x3d04df4	chancoll	0	403	445
	12	 0x3d04e50	chaninst	0	445	465
	13	 0x3d04e74	chancoll	0	465	507
	14	 0x3d04ed0	chaninst	0	507	527
	15	 0x3d04ef0	bchntprf	0	527	552
	16	 0x3d04f20	datatprf	0	552	572
	17	 0x3d04f44	dboolcol	0	572	606
	18	 0x3d04fa0	datainst	0	606	630
	19	 0x3d04fc0	datatprf	0	630	650
	20	 0x3d04fe4	dboolcol	0	650	684
	21	 0x3d05040	datainst	0	684	708
	22	 0x3d05060	CHPloop_	0	708	720
	23	 0x3d05070	CHPseqnc	0	720	744
	24	 0x3d05080	CHPrecv_	0	744	764
	25	 0x3d050a0	schnnref	0	764	780
	26	 0x3d050b0	sdbnref_	0	780	796
	27	 0x3d050d0	CHPdetsl	0	796	816
	28	 0x3d050e0	CHPguard	0	816	832
	29	 0x3d05100	sdbnref_	0	832	848
	30	 0x3d05120	CHPrecv_	0	848	868
	31	 0x3d05140	schnnref	0	868	884
	32	 0x3d05150	sdbnref_	0	884	900
	33	 0x3d05170	CHPguard	0	900	916
	34	 0x3d05190	CHPrecv_	0	916	936
	35	 0x3d051b0	schnnref	0	936	952
	36	 0x3d051c0	sdbnref_	0	952	968
	37	 0x3d051e0	CHPsend_	0	968	988
	38	 0x3d05200	schnnref	0	988	1004
	39	 0x3d05210	sdbnref_	0	1004	1020

In module created from: ./054.in (unrolled)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
        A = chan?(bool<>) A
        B = chan?(bool<>) B
        G = chan?(bool<>) G
        Z = chan!(bool<>) Z
        g = bool<> g
        x = bool<> x
        chp:
        concurrent: {
          *[
            sequential: {
              G?(g)
              deterministic: {
                g -> A?(x)
                else -> B?(x)
              }
              Z!(x)
            }
          ]
        }
      }

}

