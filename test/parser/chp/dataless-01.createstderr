
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	procdefn	0	#HEAD#	#TAIL#	122
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	10	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	11	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	16	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	19	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	24	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	28	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	footprnt	0	#HEAD#	#TAIL#	333
	30	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	12
	31	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	32	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	33	##ADDR##	procdefn	0	#HEAD#	#TAIL#	122
	34	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	35	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	36	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	37	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	38	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	39	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	40	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	41	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	42	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	43	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	44	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	52	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	footprnt	0	#HEAD#	#TAIL#	333
	54	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	55	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	56	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	58	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	59	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	60	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	64	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	65	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	66	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	67	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	68	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	69	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	70	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	71	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	28
	72	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	73	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	74	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	75	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	76	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	28
	77	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	78	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	79	##ADDR##	footprnt	0	#HEAD#	#TAIL#	565
	80	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	81	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  5 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    clack = process-definition (defined) clack(
        bool<> !GND
        bool<> !Vdd
        chan?() Y
      )
      In definition "clack", we have: {
      Instances:
        !GND = bool<> clack::!GND
        !Vdd = bool<> clack::!Vdd
        Y = chan?() clack::Y
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?() Y
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
      chp:
        concurrent: {
          Y?
        }
      footprint: {
        !GND = bool^0 = clack<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = clack<>::!Vdd (2) @[ supply_high port-alias ] 
        Y = channel chan?()^0 = clack<>::Y (1) @[ port! chp? meta? ] 
        Created state:
        channel instance pool: (1 ports, 0 local, 0 mapped)
        1	clack<>::Y @[ port! chp? meta? ]	
        bool instance pool: (2 ports, 0 local, 0 mapped)
        1	clack<>::!GND @[ supply_low port-alias ]	
        2	clack<>::!Vdd @[ supply_high port-alias ]	
        resolved concurrent actions:
          Y?
        chp events: {
          event[0]: receive: Y?, #pred: 1, succ: 
        }
      }
      }

    click = process-definition (defined) click(
        bool<> !GND
        bool<> !Vdd
        chan!() X
      )
      In definition "click", we have: {
      Instances:
        !GND = bool<> click::!GND
        !Vdd = bool<> click::!Vdd
        X = chan!() click::X
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan!() X
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
      chp:
        concurrent: {
          X!
        }
      footprint: {
        !GND = bool^0 = click<>::!GND (1) @[ supply_low port-alias ] 
        !Vdd = bool^0 = click<>::!Vdd (2) @[ supply_high port-alias ] 
        X = channel chan!()^0 = click<>::X (1) @[ chp! meta! port? ] 
        Created state:
        channel instance pool: (1 ports, 0 local, 0 mapped)
        1	click<>::X @[ chp! meta! port? ]	
        bool instance pool: (2 ports, 0 local, 0 mapped)
        1	click<>::!GND @[ supply_low port-alias ]	
        2	click<>::!Vdd @[ supply_high port-alias ]	
        resolved concurrent actions:
          X!
        chp events: {
          event[0]: send: X!, #pred: 1, succ: 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    A = click<> A
    B = clack<> B
    Z = chan() Z
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  A = process click<>^0 = A (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    X = channel chan!()^0 = Z (1) @[ sub! chp! meta! sub? chp? meta? ] 
  )
  B = process clack<>^0 = B (2) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    Y = channel chan?()^0 = Z (1) @[ sub! chp! meta! sub? chp? meta? ] 
  )
  Z = channel chan()^0 = Z (1) @[ sub! chp! meta! sub? chp? meta? ] 
  Created state:
  process instance pool: (0 ports, 2 local, 0 mapped)
  1	A	click<>
    channel: 1
    bool: 1,2
  2	B	clack<>
    channel: 1
    bool: 1,2
  channel instance pool: (0 ports, 1 local, 0 mapped)
  1	Z @[ sub! chp! meta! sub? chp? meta? ]	
  bool instance pool: (0 ports, 2 local, 0 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
}
