
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	90
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	9	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	10	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	11	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	12	##ADDR##	footprnt	0	#HEAD#	#TAIL#	295
	13	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	12
	14	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	15	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	16	##ADDR##	procdefn	0	#HEAD#	#TAIL#	90
	17	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	18	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	20	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	footprnt	0	#HEAD#	#TAIL#	295
	23	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	24	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	25	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	21
	27	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	30	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	33	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	34	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	35	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	footprnt	0	#HEAD#	#TAIL#	397
	38	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	39	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  2 definitions
  0 typedefs
  Definitions:
    clack = process-definition (defined) clack(
        chan?() Y
      )
      In definition "clack", we have: {
      Instances:
        Y = chan?() clack::Y
      unroll sequence: 
        chan?() Y
      chp:
        concurrent: {
          Y?
        }
      footprint: {
        Y = channel chan?()^0 = clack<>::Y (1) 
        Created state:
        channel instance pool:
        1	clack<>::Y
        resolved concurrent actions:
          Y?
        chp events: {
          event[0]: receive: Y?, #pred: 1, succ: 
        }
      }
      }

    click = process-definition (defined) click(
        chan!() X
      )
      In definition "click", we have: {
      Instances:
        X = chan!() click::X
      unroll sequence: 
        chan!() X
      chp:
        concurrent: {
          X!
        }
      footprint: {
        X = channel chan!()^0 = click<>::X (1) 
        Created state:
        channel instance pool:
        1	click<>::X
        resolved concurrent actions:
          X!
        chp events: {
          event[0]: send: X!, #pred: 1, succ: 
        }
      }
      }

  Instances:
    A = click<> A
    B = clack<> B
    Z = chan() Z
}

footprint: {
  A = process click<>^0 = A (1) (
    X = channel chan!()^0 = Z (1) 
  )
  B = process clack<>^0 = B (2) (
    Y = channel chan?()^0 = Z (1) 
  )
  Z = channel chan()^0 = Z (1) 
  Created state:
  process instance pool:
  1	A
  2	B
  channel instance pool:
  1	Z
}
