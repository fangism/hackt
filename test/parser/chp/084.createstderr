WARNING: channel foo.out lacks connection to a consumer.
WARNING: channel ick.out lacks connection to a consumer.
WARNING: channel poo.out lacks connection to a consumer.
WARNING: channel bar.out lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	7	##ADDR##	procdefn	0	#HEAD#	#TAIL#	193
	8	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	9	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	10	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	11	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	12	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	13	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	14	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	15	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	16	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	17	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	21	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	24	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	27	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	49	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	52	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	53	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	54	##ADDR##	footprnt	0	#HEAD#	#TAIL#	407
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	57	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	58	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	59	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	60	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	61	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	footprnt	0	#HEAD#	#TAIL#	407
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	66	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	67	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	69	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	70	##ADDR##	footprnt	0	#HEAD#	#TAIL#	407
	71	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	72	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	73	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	74	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	75	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	76	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	77	##ADDR##	footprnt	0	#HEAD#	#TAIL#	407
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	80	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	81	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	82	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	83	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	84	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	85	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	86	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	87	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	88	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	89	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	90	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	91	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	92	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	93	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	94	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	95	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	96	##ADDR##	footprnt	0	#HEAD#	#TAIL#	490
	97	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	99	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	100	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed<
      pint<> I
      pint<> J
      >(
        chan!(int<32>) out
      )
      In definition "send_indexed", we have: {
      Parameters:
        I = pint<> send_indexed::I
        J = pint<> send_indexed::J
        x = pint<> send_indexed::x^2
      Instances:
        out = chan!(int<32>) send_indexed::out
      unroll sequence: 
        ports: (
          chan!(int<32>) out
        )
        pint<> x[0..1][0..1]
        x[0][0] = 1;
        x[0][1] = 2;
        x[1][0] = 3;
        x[1][1] = 4;
      chp:
        concurrent: {
          *[
            out!(x[I][J])
          ]
        }
      footprint collection: {
        <0, 0> {
          I = pint^0 value: 0
          J = pint^0 value: 0
          out = channel chan!(int<32>)^0 = send_indexed<0, 0>::out (1) 
          x = pint^2
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          Created state:
          channel instance pool:
          1	send_indexed<0, 0>::out
          resolved concurrent actions:
            *[
              out!(1)
            ]
          chp events: {
            event[0]: send: out!(1), #pred: 1, succ: 0 
          }
        }
        <0, 1> {
          I = pint^0 value: 0
          J = pint^0 value: 1
          out = channel chan!(int<32>)^0 = send_indexed<0, 1>::out (1) 
          x = pint^2
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          Created state:
          channel instance pool:
          1	send_indexed<0, 1>::out
          resolved concurrent actions:
            *[
              out!(2)
            ]
          chp events: {
            event[0]: send: out!(2), #pred: 1, succ: 0 
          }
        }
        <1, 0> {
          I = pint^0 value: 1
          J = pint^0 value: 0
          out = channel chan!(int<32>)^0 = send_indexed<1, 0>::out (1) 
          x = pint^2
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          Created state:
          channel instance pool:
          1	send_indexed<1, 0>::out
          resolved concurrent actions:
            *[
              out!(3)
            ]
          chp events: {
            event[0]: send: out!(3), #pred: 1, succ: 0 
          }
        }
        <1, 1> {
          I = pint^0 value: 1
          J = pint^0 value: 1
          out = channel chan!(int<32>)^0 = send_indexed<1, 1>::out (1) 
          x = pint^2
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          Created state:
          channel instance pool:
          1	send_indexed<1, 1>::out
          resolved concurrent actions:
            *[
              out!(4)
            ]
          chp events: {
            event[0]: send: out!(4), #pred: 1, succ: 0 
          }
        }
      }
      }

  Instances:
    bar = send_indexed<1, 1> bar
    foo = send_indexed<0, 0> foo
    ick = send_indexed<0, 1> ick
    poo = send_indexed<1, 0> poo
}

footprint: {
  bar = process send_indexed<1, 1>^0 = bar (4) (
    out = channel chan!(int<32>)^0 = bar.out (4) 
  )
  foo = process send_indexed<0, 0>^0 = foo (1) (
    out = channel chan!(int<32>)^0 = foo.out (1) 
  )
  ick = process send_indexed<0, 1>^0 = ick (2) (
    out = channel chan!(int<32>)^0 = ick.out (2) 
  )
  poo = process send_indexed<1, 0>^0 = poo (3) (
    out = channel chan!(int<32>)^0 = poo.out (3) 
  )
  Created state:
  process instance pool:
  1	foo
  2	ick
  3	poo
  4	bar
  channel instance pool:
  1	foo.out
  2	ick.out
  3	poo.out
  4	bar.out
}
