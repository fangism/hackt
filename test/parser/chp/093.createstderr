WARNING: channel foo.index lacks connection to a producer.
WARNING: channel foo.out[0] lacks connection to a consumer.
WARNING: channel foo.out[1] lacks connection to a consumer.
WARNING: channel bar.index lacks connection to a producer.
WARNING: channel bar.out[0] lacks connection to a consumer.
WARNING: channel bar.out[1] lacks connection to a consumer.
Warnings found (6) while creating complete type <top-level>.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	20
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	7	##ADDR##	procdefn	0	#HEAD#	#TAIL#	185
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	10	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	11	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	12	##ADDR##	chanplch	0	#HEAD#	#TAIL#	29
	13	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	14	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	15	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	16	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	18	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	19	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	21	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	22	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	26	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	27	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	31	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	32	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	35	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	40	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	47	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	48	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	54	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	55	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	56	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	57	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	59	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	60	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	62	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	63	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	65	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	66	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	67	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	69	##ADDR##	footprnt	0	#HEAD#	#TAIL#	476
	70	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	71	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	21
	72	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	73	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	21
	74	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	75	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	76	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	77	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	78	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	79	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	80	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	81	##ADDR##	footprnt	0	#HEAD#	#TAIL#	476
	82	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	83	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	84	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	85	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	86	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	87	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	88	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	89	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	90	##ADDR##	datatprf	0	#HEAD#	#TAIL#	21
	91	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	92	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	93	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	95	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	96	##ADDR##	dboolatt	0	#HEAD#	#TAIL#	30
	97	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	98	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	99	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	100	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	101	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	102	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	103	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	104	##ADDR##	proctprf	0	#HEAD#	#TAIL#	21
	105	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	106	##ADDR##	footprnt	0	#HEAD#	#TAIL#	644
	107	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	108	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed<
      pint<> I
      >(
        bool<> !GND
        bool<> !Vdd
        chan?(int<1>) index
        chan!(int<32>) out[0..1]
      )
      In definition "send_indexed", we have: {
      Parameters:
        I = pint<> send_indexed::I
        x = pint<> send_indexed::x^1
      Instances:
        !GND = bool<> send_indexed::!GND
        !Vdd = bool<> send_indexed::!Vdd
        index = chan?(int<1>) send_indexed::index
        out = chan!(int<32>) send_indexed::out^1
        y = int<1> send_indexed::y
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(int<1>) index
          chan!(int<32>) out[0..1]
        )
        !GND@[supply=0]
        !Vdd@[supply=1]
        pint<> x[0..1]
        x[0] = 1;
        x[1] = 0;
        int<1> y
      chp:
        concurrent: {
          *[
            sequential: {
              index?(y)
              out[x[y]]!(I)
            }
          ]
        }
      footprint collection: {
        <0> {
          !GND = bool^0 = send_indexed<0>::!GND (1) @[ supply_low port-alias ] 
          !Vdd = bool^0 = send_indexed<0>::!Vdd (2) @[ supply_high port-alias ] 
          I = pint^0 value: 0
          index = channel chan?(int<1>)^0 = send_indexed<0>::index (1) @[ port! chp? meta? ] 
          out = channel chan!(int<32>)^1
            {
              [0] = send_indexed<0>::out[0] (2) @[ chp! ~meta! port? ] 
              [1] = send_indexed<0>::out[1] (3) @[ chp! ~meta! port? ] 
            }
          x = pint^1
            unrolled index-value pairs: {
              0 = 1
              1 = 0
            }
          y = int<1>^0 = send_indexed<0>::y (1) 
          Created state:
          channel instance pool: (3 ports, 0 local, 0 mapped)
          1	send_indexed<0>::index @[ port! chp? meta? ]	
          2	send_indexed<0>::out[0] @[ chp! ~meta! port? ]	
          3	send_indexed<0>::out[1] @[ chp! ~meta! port? ]	
          int instance pool: (0 ports, 1 local, 0 mapped)
          1	send_indexed<0>::y	
          bool instance pool: (2 ports, 0 local, 0 mapped)
          1	send_indexed<0>::!GND @[ supply_low port-alias ]	
          2	send_indexed<0>::!Vdd @[ supply_high port-alias ]	
          resolved concurrent actions:
            *[
              sequential: {
                index?(y)
                out[x[y]]!(0)
              }
            ]
          chp events: {
            event[0]: receive: index?(y), #pred: 1, succ: 1 
            event[1]: send: out[x[y]]!(0), #pred: 1, succ: 0 
          }
        }
        <1> {
          !GND = bool^0 = send_indexed<1>::!GND (1) @[ supply_low port-alias ] 
          !Vdd = bool^0 = send_indexed<1>::!Vdd (2) @[ supply_high port-alias ] 
          I = pint^0 value: 1
          index = channel chan?(int<1>)^0 = send_indexed<1>::index (1) @[ port! chp? meta? ] 
          out = channel chan!(int<32>)^1
            {
              [0] = send_indexed<1>::out[0] (2) @[ chp! ~meta! port? ] 
              [1] = send_indexed<1>::out[1] (3) @[ chp! ~meta! port? ] 
            }
          x = pint^1
            unrolled index-value pairs: {
              0 = 1
              1 = 0
            }
          y = int<1>^0 = send_indexed<1>::y (1) 
          Created state:
          channel instance pool: (3 ports, 0 local, 0 mapped)
          1	send_indexed<1>::index @[ port! chp? meta? ]	
          2	send_indexed<1>::out[0] @[ chp! ~meta! port? ]	
          3	send_indexed<1>::out[1] @[ chp! ~meta! port? ]	
          int instance pool: (0 ports, 1 local, 0 mapped)
          1	send_indexed<1>::y	
          bool instance pool: (2 ports, 0 local, 0 mapped)
          1	send_indexed<1>::!GND @[ supply_low port-alias ]	
          2	send_indexed<1>::!Vdd @[ supply_high port-alias ]	
          resolved concurrent actions:
            *[
              sequential: {
                index?(y)
                out[x[y]]!(1)
              }
            ]
          chp events: {
            event[0]: receive: index?(y), #pred: 1, succ: 1 
            event[1]: send: out[x[y]]!(1), #pred: 1, succ: 0 
          }
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    bar = send_indexed<1> bar
    foo = send_indexed<0> foo
}

footprint: {
  !GND = bool^0 = !GND (1) @[ supply_low ] 
  !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
  bar = process send_indexed<1>^0 = bar (2) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    index = channel chan?(int<1>)^0 = bar.index (4) @[ sub? chp? meta? ] 
    out = channel chan!(int<32>)^1
      {
        [0] = bar.out[0] (5) @[ sub! chp! ~meta! ] 
        [1] = bar.out[1] (6) @[ sub! chp! ~meta! ] 
      }
  )
  foo = process send_indexed<0>^0 = foo (1) (
    !GND = bool^0 = !GND (1) @[ supply_low ] 
    !Vdd = bool^0 = !Vdd (2) @[ supply_high ] 
    index = channel chan?(int<1>)^0 = foo.index (1) @[ sub? chp? meta? ] 
    out = channel chan!(int<32>)^1
      {
        [0] = foo.out[0] (2) @[ sub! chp! ~meta! ] 
        [1] = foo.out[1] (3) @[ sub! chp! ~meta! ] 
      }
  )
  Created state:
  process instance pool: (0 ports, 2 local, 0 mapped)
  1	foo	send_indexed<0>
    channel: 1,2,3
    bool: 1,2
  2	bar	send_indexed<1>
    channel: 4,5,6
    bool: 1,2
  channel instance pool: (0 ports, 6 local, 0 mapped)
  1	foo.index @[ sub? chp? meta? ]	
  2	foo.out[0] @[ sub! chp! ~meta! ]	
  3	foo.out[1] @[ sub! chp! ~meta! ]	
  4	bar.index @[ sub? chp? meta? ]	
  5	bar.out[0] @[ sub! chp! ~meta! ]	
  6	bar.out[1] @[ sub! chp! ~meta! ]	
  private sub-int index map:
    (1 -> 0)
    (2 -> 1)
    (3 -> 2)
  bool instance pool: (0 ports, 2 local, 0 mapped)
  1	!GND @[ supply_low ]	
  2	!Vdd @[ supply_high ]	
}
