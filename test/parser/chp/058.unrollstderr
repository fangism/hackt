
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail
	0	         0	________	0	0	0
	1	 0x3c04e30	module__	0	0	29
	2	 0x3c00144	namespc_	0	29	53
	3	 0x3c04e50	procdefn	0	53	181
	4	 0x3c04ee4	chancoll	0	181	219
	5	 0x3c04f40	chaninst	0	219	239
	6	 0x3c04f60	bchntprf	0	239	264
	7	 0x3c04f90	datatprf	0	264	284
	8	 0x3c04fb0	datadefn	0	284	337
	9	 0x3c05054	chancoll	0	337	375
	10	 0x3c050b0	chaninst	0	375	395
	11	 0x3c050d4	chancoll	0	395	433
	12	 0x3c05130	chaninst	0	433	453
	13	 0x3c05154	chancoll	0	453	491
	14	 0x3c051b0	chaninst	0	491	511
	15	 0x3c051d0	bchntprf	0	511	536
	16	 0x3c05200	datatprf	0	536	556
	17	 0x3c05224	dboolcol	0	556	590
	18	 0x3c05280	datainst	0	590	614
	19	 0x3c052a0	datatprf	0	614	634
	20	 0x3c052c4	dboolcol	0	634	668
	21	 0x3c05320	datainst	0	668	692
	22	 0x3c05340	CHPloop_	0	692	704
	23	 0x3c05350	CHPseqnc	0	704	728
	24	 0x3c05360	CHPrecv_	0	728	748
	25	 0x3c05380	schnnref	0	748	764
	26	 0x3c05390	sdbnref_	0	764	780
	27	 0x3c053b0	CHPndtsl	0	780	800
	28	 0x3c053c0	CHPguard	0	800	816
	29	 0x3c053e0	sdbnref_	0	816	832
	30	 0x3c05400	CHPrecv_	0	832	852
	31	 0x3c05420	schnnref	0	852	868
	32	 0x3c05430	sdbnref_	0	868	884
	33	 0x3c05450	CHPguard	0	884	900
	34	 0x3c05470	nbnotex_	0	900	912
	35	 0x3c05480	sdbnref_	0	912	928
	36	 0x3c054a0	CHPrecv_	0	928	948
	37	 0x3c054c0	schnnref	0	948	964
	38	 0x3c054d0	sdbnref_	0	964	980
	39	 0x3c054f0	CHPsend_	0	980	1000
	40	 0x3c05510	schnnref	0	1000	1016
	41	 0x3c05520	sdbnref_	0	1016	1032

In module created from: ./058.in (unrolled)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
        A = chan?(bool<>) A
        B = chan?(bool<>) B
        G = chan?(bool<>) G
        Z = chan!(bool<>) Z
        g = bool<> g
        x = bool<> x
        chp:
        concurrent: {
          *[
            sequential: {
              G?(g)
              nondeterministic: {
                g -> A?(x)
                ~g -> B?(x)
              }
              Z!(x)
            }
          ]
        }
      }

}

