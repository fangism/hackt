
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail
	0	         0	________	0	0	0
	1	 0x4304c00	module__	0	0	29
	2	 0x4300144	namespc_	0	29	53
	3	 0x4304c20	procdefn	0	53	181
	4	 0x4304cb4	chancoll	0	181	219
	5	 0x4304d10	chaninst	0	219	239
	6	 0x4304d30	bchntprf	0	239	260
	7	 0x4304d50	datatprf	0	260	276
	8	 0x4304d60	datadefn	0	276	313
	9	 0x4304dc4	chancoll	0	313	351
	10	 0x4304e20	chaninst	0	351	371
	11	 0x4304e44	chancoll	0	371	409
	12	 0x4304ea0	chaninst	0	409	429
	13	 0x4304ec4	chancoll	0	429	467
	14	 0x4304f20	chaninst	0	467	487
	15	 0x4304f40	bchntprf	0	487	508
	16	 0x4304f60	datatprf	0	508	524
	17	 0x4304f74	dboolcol	0	524	558
	18	 0x4304fd0	datainst	0	558	578
	19	 0x4304ff0	datatprf	0	578	594
	20	 0x4305004	dboolcol	0	594	628
	21	 0x4305060	datainst	0	628	648
	22	 0x4305080	CHPloop_	0	648	660
	23	 0x4305090	CHPseqnc	0	660	684
	24	 0x43050a0	CHPrecv_	0	684	704
	25	 0x43050c0	schnnref	0	704	720
	26	 0x43050d0	sdbnref_	0	720	736
	27	 0x43050f0	CHPndtsl	0	736	756
	28	 0x4305100	CHPguard	0	756	772
	29	 0x4305120	sdbnref_	0	772	788
	30	 0x4305140	CHPrecv_	0	788	808
	31	 0x4305160	schnnref	0	808	824
	32	 0x4305170	sdbnref_	0	824	840
	33	 0x4305190	CHPguard	0	840	856
	34	 0x43051b0	nbnotex_	0	856	868
	35	 0x43051c0	sdbnref_	0	868	884
	36	 0x43051e0	CHPrecv_	0	884	904
	37	 0x4305200	schnnref	0	904	920
	38	 0x4305210	sdbnref_	0	920	936
	39	 0x4305230	CHPsend_	0	936	956
	40	 0x4305250	schnnref	0	956	972
	41	 0x4305260	sdbnref_	0	972	988

In module created from: ./058.in (unrolled)
In namespace "", we have: {
  0 parameter-collections
  0 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
        A = chan?(bool<>) A
        B = chan?(bool<>) B
        G = chan?(bool<>) G
        Z = chan!(bool<>) Z
        g = bool<> g
        x = bool<> x
        chp:
        concurrent: {
          *[
            sequential: {
              G?(g)
              nondeterministic: {
                g -> A?(x)
                ~g -> B?(x)
              }
              Z!(x)
            }
          ]
        }
      }

}

