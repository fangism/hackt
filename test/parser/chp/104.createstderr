WARNING: channel bar.A lacks connection to a producer.
WARNING: channel bar.B lacks connection to a producer.
WARNING: channel bar.C lacks connection to a consumer.
WARNING: channel bar.D lacks connection to a consumer.
WARNING: channel bar.E lacks connection to a consumer.
WARNING: channel bar.F lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	172
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	13	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	14	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	15	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	16	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	18	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	26	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	30	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	32	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	33	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	34	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	35	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	36	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	37	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	40	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	43	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	45	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	47	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	32
	48	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	49	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	52	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	nnegatex	0	#HEAD#	#TAIL#	13
	54	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	56	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	58	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	59	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	61	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	63	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	footprnt	0	#HEAD#	#TAIL#	626
	66	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	68	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	69	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	70	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	71	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	72	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	73	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	74	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	20
	75	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	32
	76	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	77	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	78	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	79	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	80	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	81	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	82	##ADDR##	footprnt	0	#HEAD#	#TAIL#	446
	83	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    foo = process-definition (defined) foo(
        chan?(int<32>) A
        chan?(int<32>) B
        chan!(int<32>) C
        chan!(int<32>) D
        chan!(int<32>) E
        chan!(int<32>) F
      )
      In definition "foo", we have: {
      Instances:
        A = chan?(int<32>) foo::A
        B = chan?(int<32>) foo::B
        C = chan!(int<32>) foo::C
        D = chan!(int<32>) foo::D
        E = chan!(int<32>) foo::E
        F = chan!(int<32>) foo::F
        a = int<32> foo::a
        b = int<32> foo::b
        z = int<32> foo::z
      unroll sequence: 
        chan?(int<32>) A
        chan?(int<32>) B
        chan!(int<32>) C
        chan!(int<32>) D
        chan!(int<32>) E
        chan!(int<32>) F
        int<32> a
        int<32> b
        int<32> z
      chp:
        concurrent: {
          *[
            sequential: {
              concurrent: {
                A?(a)
                B?(b)
              }
              z := a^b
              concurrent: {
                C!(z)
                D!(~z)
                E!(a&b)
                F!(a|b)
              }
            }
          ]
        }
      footprint: {
        A = channel chan?(int<32>)^0 = foo::A (1) 
        B = channel chan?(int<32>)^0 = foo::B (2) 
        C = channel chan!(int<32>)^0 = foo::C (3) 
        D = channel chan!(int<32>)^0 = foo::D (4) 
        E = channel chan!(int<32>)^0 = foo::E (5) 
        F = channel chan!(int<32>)^0 = foo::F (6) 
        a = int<32>^0 = foo::a (1) 
        b = int<32>^0 = foo::b (2) 
        z = int<32>^0 = foo::z (3) 
        Created state:
        channel instance pool:
        1	foo::A
        2	foo::B
        3	foo::C
        4	foo::D
        5	foo::E
        6	foo::F
        int instance pool:
        1	foo::a
        2	foo::b
        3	foo::z
        resolved concurrent actions:
          *[
            sequential: {
              concurrent: {
                A?(a)
                B?(b)
              }
              z := a^b
              concurrent: {
                C!(z)
                D!(~z)
                E!(a&b)
                F!(a|b)
              }
            }
          ]
        chp events: {
          event[0]: fork: , #pred: 1, succ: 9 10 
          event[1]: join: , #pred: 4, succ: 0 
          event[2]: send: C!(z), #pred: 1, succ: 1 
          event[3]: send: D!(~z), #pred: 1, succ: 1 
          event[4]: send: E!(a&b), #pred: 1, succ: 1 
          event[5]: send: F!(a|b), #pred: 1, succ: 1 
          event[6]: fork: , #pred: 1, succ: 2 3 4 5 
          event[7]: assign: z := a^b, #pred: 1, succ: 6 
          event[8]: join: , #pred: 2, succ: 7 
          event[9]: receive: A?(a), #pred: 1, succ: 8 
          event[10]: receive: B?(b), #pred: 1, succ: 8 
        }
      }
      }

  Instances:
    bar = foo<> bar
}

footprint: {
  bar = process foo<>^0 = bar (1) (
    A = channel chan?(int<32>)^0 = bar.A (1) 
    B = channel chan?(int<32>)^0 = bar.B (2) 
    C = channel chan!(int<32>)^0 = bar.C (3) 
    D = channel chan!(int<32>)^0 = bar.D (4) 
    E = channel chan!(int<32>)^0 = bar.E (5) 
    F = channel chan!(int<32>)^0 = bar.F (6) 
  )
  Created state:
  process instance pool:
  1	bar
  channel instance pool:
  1	bar.A
  2	bar.B
  3	bar.C
  4	bar.D
  5	bar.E
  6	bar.F
}
