
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	901
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	8	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	9	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	10	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	11	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	12	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	16	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	19	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	20	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	21	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	23	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	24	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	25	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	26	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	27	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	30	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	31	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	33	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	34	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	35	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	36	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	44	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	46	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	47	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	48	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	49	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	51	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	57	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	59	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	60	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	61	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	62	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	66	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	67	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	70	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	72	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	24
	73	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	74	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	75	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	76	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	77	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	80	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	81	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	82	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	83	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	84	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	85	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	86	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	87	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	88	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	89	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	90	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	91	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	92	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	93	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	95	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	99	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	100	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	101	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	102	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	103	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	104	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	105	##ADDR##	proccoll	0	#HEAD#	#TAIL#	41
	106	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	107	##ADDR##	chancoll	2	#HEAD#	#TAIL#	121
	108	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed<
      pint<> I
      pint<> J
      >(
        chan!(int<32>) out[0..1][0..1]
      )
      In definition "send_indexed", we have: {
      Parameters:
        I = pint<> send_indexed::I
        J = pint<> send_indexed::J
      Instances:
        out = chan!(int<32>) send_indexed::out^2
      unroll sequence: 
        chan!(int<32>) out[0..1][0..1]
      chp:
        concurrent: {
          *[
            out[I][J]!(I+J)
          ]
        }
      footprint collection: {
        <0, 0> {
          I = pint^0 value: 0
          J = pint^0 value: 0
          out = channel chan!(int<32>)^2
            {
              [0][0] = send_indexed::out[0][0] (1) 
              [0][1] = send_indexed::out[0][1] (2) 
              [1][0] = send_indexed::out[1][0] (3) 
              [1][1] = send_indexed::out[1][1] (4) 
            }
          Created state:
          channel instance pool:
          1	send_indexed::out[0][0]
          2	send_indexed::out[0][1]
          3	send_indexed::out[1][0]
          4	send_indexed::out[1][1]
          resolved concurrent actions:
            *[
              out[0][0]!(0)
            ]
        }
        <0, 1> {
          I = pint^0 value: 0
          J = pint^0 value: 1
          out = channel chan!(int<32>)^2
            {
              [0][0] = send_indexed::out[0][0] (1) 
              [0][1] = send_indexed::out[0][1] (2) 
              [1][0] = send_indexed::out[1][0] (3) 
              [1][1] = send_indexed::out[1][1] (4) 
            }
          Created state:
          channel instance pool:
          1	send_indexed::out[0][0]
          2	send_indexed::out[0][1]
          3	send_indexed::out[1][0]
          4	send_indexed::out[1][1]
          resolved concurrent actions:
            *[
              out[0][1]!(1)
            ]
        }
        <1, 0> {
          I = pint^0 value: 1
          J = pint^0 value: 0
          out = channel chan!(int<32>)^2
            {
              [0][0] = send_indexed::out[0][0] (1) 
              [0][1] = send_indexed::out[0][1] (2) 
              [1][0] = send_indexed::out[1][0] (3) 
              [1][1] = send_indexed::out[1][1] (4) 
            }
          Created state:
          channel instance pool:
          1	send_indexed::out[0][0]
          2	send_indexed::out[0][1]
          3	send_indexed::out[1][0]
          4	send_indexed::out[1][1]
          resolved concurrent actions:
            *[
              out[1][0]!(1)
            ]
        }
        <1, 1> {
          I = pint^0 value: 1
          J = pint^0 value: 1
          out = channel chan!(int<32>)^2
            {
              [0][0] = send_indexed::out[0][0] (1) 
              [0][1] = send_indexed::out[0][1] (2) 
              [1][0] = send_indexed::out[1][0] (3) 
              [1][1] = send_indexed::out[1][1] (4) 
            }
          Created state:
          channel instance pool:
          1	send_indexed::out[0][0]
          2	send_indexed::out[0][1]
          3	send_indexed::out[1][0]
          4	send_indexed::out[1][1]
          resolved concurrent actions:
            *[
              out[1][1]!(2)
            ]
        }
      }
      }

  Instances:
    bar = send_indexed<1, 1> bar
    foo = send_indexed<0, 0> foo
    ick = send_indexed<0, 1> ick
    poo = send_indexed<1, 0> poo
}

footprint: {
  bar = process send_indexed<1, 1>^0 = bar (3) (
    out = channel chan!(int<32>)^2
      {
        [0][0] = bar.out[0][0] (9) 
        [0][1] = bar.out[0][1] (10) 
        [1][0] = bar.out[1][0] (11) 
        [1][1] = bar.out[1][1] (12) 
      }
  )
  foo = process send_indexed<0, 0>^0 = foo (1) (
    out = channel chan!(int<32>)^2
      {
        [0][0] = foo.out[0][0] (1) 
        [0][1] = foo.out[0][1] (2) 
        [1][0] = foo.out[1][0] (3) 
        [1][1] = foo.out[1][1] (4) 
      }
  )
  ick = process send_indexed<0, 1>^0 = ick (2) (
    out = channel chan!(int<32>)^2
      {
        [0][0] = ick.out[0][0] (5) 
        [0][1] = ick.out[0][1] (6) 
        [1][0] = ick.out[1][0] (7) 
        [1][1] = ick.out[1][1] (8) 
      }
  )
  poo = process send_indexed<1, 0>^0 = poo (4) (
    out = channel chan!(int<32>)^2
      {
        [0][0] = poo.out[0][0] (13) 
        [0][1] = poo.out[0][1] (14) 
        [1][0] = poo.out[1][0] (15) 
        [1][1] = poo.out[1][1] (16) 
      }
  )
  Created state:
  process instance pool:
  1	foo
  2	ick
  3	bar
  4	poo
  channel instance pool:
  1	foo.out[0][0]
  2	foo.out[0][1]
  3	foo.out[1][0]
  4	foo.out[1][1]
  5	ick.out[0][0]
  6	ick.out[0][1]
  7	ick.out[1][0]
  8	ick.out[1][1]
  9	bar.out[0][0]
  10	bar.out[0][1]
  11	bar.out[1][0]
  12	bar.out[1][1]
  13	poo.out[0][0]
  14	poo.out[0][1]
  15	poo.out[1][0]
  16	poo.out[1][1]
}
