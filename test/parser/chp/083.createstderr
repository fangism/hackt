
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	453
	5	##ADDR##	chancoll	0	#HEAD#	#TAIL#	49
	6	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	7	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	10	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	12	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	13	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	14	##ADDR##	chancoll	0	#HEAD#	#TAIL#	51
	15	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	16	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	17	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	18	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	19	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	29
	20	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	21	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	22	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	23	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	24	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	27	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	28	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	33	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	34	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	41	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	48	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	51	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	20
	52	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	53	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	55	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	56	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	57	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	58	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	59	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	61	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	62	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	63	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	65	##ADDR##	chancoll	0	#HEAD#	#TAIL#	59
	66	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	67	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	93
	68	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	69	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	70	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	20
	71	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	72	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	73	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	74	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	75	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	76	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	77	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	78	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	79	##ADDR##	chancoll	0	#HEAD#	#TAIL#	59
	80	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	81	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	93
	82	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	34
	83	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	84	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	20
	85	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	86	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	87	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	88	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	89	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	90	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	91	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	92	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	93	##ADDR##	chancoll	0	#HEAD#	#TAIL#	59
	94	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	95	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	96	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	56
	98	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	99	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	100	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	101	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	102	##ADDR##	chancoll	0	#HEAD#	#TAIL#	59
	103	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	104	##ADDR##	chancoll	0	#HEAD#	#TAIL#	57
	105	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed<
      pint<> I
      >(
        chan?(int<32>) index
        chan!(int<32>) out
      )
      In definition "send_indexed", we have: {
      Parameters:
        I = pint<> I
        x = pint<> x

      Instances:
        index = chan?(int<32>) index
        out = chan!(int<32>) out
        y = int<32> y
      unroll sequence: 
        pint<> I
        chan?(int<32>) index
        chan!(int<32>) out
        pint<> x[0..1][0..1]
        x[0][0] = 1;
        x[0][1] = 2;
        x[1][0] = 3;
        x[1][1] = 4;
        int<32> y
      chp:
        concurrent: {
          *[
            sequential: {
              index?(y)
              out!(x[I][y])
            }
          ]
        }
      footprint collection: {
        <0> {
          channel chan!(int<32>)^0 out (instantiated) = ::send_indexed::out (1) 
          pint^0 I value: ?
          channel chan?(int<32>)^0 index (instantiated) = ::send_indexed::index (2) 
          pint^2 x
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          int<32>^0 y (instantiated) = ::send_indexed::y (1) 
          channel instance pool:
          1	::send_indexed::out
          2	::send_indexed::index
          int instance pool:
          1	::send_indexed::y
          resolved concurrent actions:
            *[
              sequential: {
                index?(y)
                out!(x[0][y])
              }
            ]
        }
        <1> {
          channel chan!(int<32>)^0 out (instantiated) = ::send_indexed::out (1) 
          pint^0 I value: ?
          channel chan?(int<32>)^0 index (instantiated) = ::send_indexed::index (2) 
          pint^2 x
            unrolled index-value pairs: {
              [0][0] = 1
              [0][1] = 2
              [1][0] = 3
              [1][1] = 4
            }
          int<32>^0 y (instantiated) = ::send_indexed::y (1) 
          channel instance pool:
          1	::send_indexed::out
          2	::send_indexed::index
          int instance pool:
          1	::send_indexed::y
          resolved concurrent actions:
            *[
              sequential: {
                index?(y)
                out!(x[1][y])
              }
            ]
        }
      }
      }

  Instances:
    bar = process send_indexed<1>^0 bar (instantiated) = ::bar (2) (
      channel chan?(int<32>)^0 index (instantiated) = ::bar.index (3) 
      channel chan!(int<32>)^0 out (instantiated) = ::bar.out (4) 
    )
    foo = process send_indexed<0>^0 foo (instantiated) = ::foo (1) (
      channel chan?(int<32>)^0 index (instantiated) = ::foo.index (1) 
      channel chan!(int<32>)^0 out (instantiated) = ::foo.out (2) 
    )
}

Created state:
process instance pool:
1	::foo
2	::bar
channel instance pool:
1	::foo.index
2	::foo.out
3	::bar.index
4	::bar.out

