
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	152
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	13	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	14	##ADDR##	portscop	0	#HEAD#	#TAIL#	36
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	17	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	19	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	23	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	24	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	26	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	30	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	31	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	32	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	33	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	35	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	36	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	21
	37	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	39	##ADDR##	CHPdetsl	0	#HEAD#	#TAIL#	24
	40	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	43	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	CHPguard	0	#HEAD#	#TAIL#	16
	46	##ADDR##	nbnotex_	0	#HEAD#	#TAIL#	12
	47	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	49	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	52	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	54	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	55	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	56	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	footprnt	0	#HEAD#	#TAIL#	298

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    split_bool_soup = process-definition (defined) split_bool_soup(
        bool<> !GND
        bool<> !Vdd
        chan?(bool<>) A
        chan?(bool<>) B
        chan?(bool<>) G
        chan!(bool<>) Z
      )
      In definition "split_bool_soup", we have: {
      Instances:
        !GND = bool<> split_bool_soup::!GND
        !Vdd = bool<> split_bool_soup::!Vdd
        A = chan?(bool<>) split_bool_soup::A
        B = chan?(bool<>) split_bool_soup::B
        G = chan?(bool<>) split_bool_soup::G
        Z = chan!(bool<>) split_bool_soup::Z
        g = bool<> split_bool_soup::g
        x = bool<> split_bool_soup::x
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(bool<>) A
          chan?(bool<>) B
          chan?(bool<>) G
          chan!(bool<>) Z
        )
        bool<> g
        bool<> x
      chp:
        concurrent: {
          *[
            sequential: {
              G#(g)
              concurrent: {
                G?
                sequential: {
                  deterministic: {
                    g -> A?(x)
                    ~g -> B?(x)
                  }
                  Z!(x)
                }
              }
            }
          ]
        }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  Created state:
  bool instance pool:
  1	!GND
  2	!Vdd
}
