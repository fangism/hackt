
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	28
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	4	##ADDR##	procdefn	0	#HEAD#	#TAIL#	337
	5	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	29
	7	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	8	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	9	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	10	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datadefn	0	#HEAD#	#TAIL#	60
	16	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	19	##ADDR##	chaninst	0	#HEAD#	#TAIL#	24
	20	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	24	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	28	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	29	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	30	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	33	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	48	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	49	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	50	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	53	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	54	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	20
	55	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	56	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	57	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	58	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	61	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	20
	62	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	66	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	20
	67	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	68	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	69	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	70	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	72	##ADDR##	chancoll	0	#HEAD#	#TAIL#	46
	73	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	74	##ADDR##	chancoll	1	#HEAD#	#TAIL#	71
	75	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	76	##ADDR##	pintcoll	2	#HEAD#	#TAIL#	84
	77	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	25
	78	##ADDR##	dintcoll	0	#HEAD#	#TAIL#	25
	79	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	80	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	81	##ADDR##	proccoll	0	#HEAD#	#TAIL#	45
	82	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	83	##ADDR##	chancoll	1	#HEAD#	#TAIL#	71
	84	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	85	##ADDR##	chancoll	0	#HEAD#	#TAIL#	46
	86	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed(
        chan?(int<1>) index[0..1]
        chan!(int<32>) out
      )
      In definition "send_indexed", we have: {
      Parameters:
        x = pint<> send_indexed::x^2
      Instances:
        index = chan?(int<1>) send_indexed::index^1
        out = chan!(int<32>) send_indexed::out
        y = int<1> send_indexed::y
        z = int<1> send_indexed::z
      unroll sequence: 
        chan?(int<1>) index[0..1]
        chan!(int<32>) out
        pint<> x[0..1][0..1]
        x[0][0] = 1;
        x[0][1] = 2;
        x[1][0] = 3;
        x[1][1] = 4;
        int<1> y
        int<1> z
      chp:
        concurrent: {
          *[
            sequential: {
              concurrent: {
                index[0]?(y)
                index[1]?(z)
              }
              out!(x[y][z])
            }
          ]
        }
      footprint: {
        index = channel chan?(int<1>)^1
          {
            0 = send_indexed::index[0] (2) 
            1 = send_indexed::index[1] (3) 
          }
        out = channel chan!(int<32>)^0 = send_indexed::out (1) 
        x = pint^2
          unrolled index-value pairs: {
            [0][0] = 1
            [0][1] = 2
            [1][0] = 3
            [1][1] = 4
          }
        y = int<1>^0 = send_indexed::y (1) 
        z = int<1>^0 = send_indexed::z (2) 
        Created state:
        channel instance pool:
        1	send_indexed::out
        2	send_indexed::index[0]
        3	send_indexed::index[1]
        int instance pool:
        1	send_indexed::y
        2	send_indexed::z
        resolved concurrent actions:
          *[
            sequential: {
              concurrent: {
                index[0]?(y)
                index[1]?(z)
              }
              out!(x[y][z])
            }
          ]
      }
      }

  Instances:
    foo = send_indexed<> foo
}

footprint: {
  foo = process send_indexed<>^0 = foo (1) (
    index = channel chan?(int<1>)^1
      {
        0 = foo.index[0] (1) 
        1 = foo.index[1] (2) 
      }
    out = channel chan!(int<32>)^0 = foo.out (3) 
  )
  Created state:
  process instance pool:
  1	foo
  channel instance pool:
  1	foo.index[0]
  2	foo.index[1]
  3	foo.out
}
