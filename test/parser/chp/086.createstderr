WARNING: channel foo.index[0] lacks connection to a producer.
WARNING: channel foo.index[1] lacks connection to a producer.
WARNING: channel foo.out lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	4	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	6	##ADDR##	procdefn	0	#HEAD#	#TAIL#	165
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	9	##ADDR##	chanplch	0	#HEAD#	#TAIL#	29
	10	##ADDR##	chanplch	0	#HEAD#	#TAIL#	27
	11	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	12	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	13	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	28
	14	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	15	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	16	##ADDR##	portscop	0	#HEAD#	#TAIL#	28
	17	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	18	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	19	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	22	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	23	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	24	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	25	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	28	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	30	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	31	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	33	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	43	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	49	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	piassign	0	#HEAD#	#TAIL#	20
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	54	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	20
	55	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	56	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	57	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	61	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	62	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	64	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	65	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	66	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	67	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	70	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	71	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	72	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	73	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	74	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	75	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	76	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	77	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	78	##ADDR##	nindlist	0	#HEAD#	#TAIL#	20
	79	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	80	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	81	##ADDR##	footprnt	0	#HEAD#	#TAIL#	568
	82	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	83	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	84	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	85	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	86	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	87	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	16
	88	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	24
	89	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	24
	90	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	91	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	92	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	93	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	94	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	95	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	96	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	97	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	98	##ADDR##	footprnt	0	#HEAD#	#TAIL#	460
	99	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    send_indexed = process-definition (defined) send_indexed(
        bool<> !GND
        bool<> !Vdd
        chan?(int<1>) index[0..1]
        chan!(int<32>) out
      )
      In definition "send_indexed", we have: {
      Parameters:
        x = pint<> send_indexed::x^2
      Instances:
        !GND = bool<> send_indexed::!GND
        !Vdd = bool<> send_indexed::!Vdd
        index = chan?(int<1>) send_indexed::index^1
        out = chan!(int<32>) send_indexed::out
        y = int<1> send_indexed::y
        z = int<1> send_indexed::z
      unroll sequence: 
        ports: (
          bool<> !GND
          bool<> !Vdd
          chan?(int<1>) index[0..1]
          chan!(int<32>) out
        )
        pint<> x[0..1][0..1]
        x[0][0] = 1;
        x[0][1] = 2;
        x[1][0] = 3;
        x[1][1] = 4;
        int<1> y
        int<1> z
      chp:
        concurrent: {
          *[
            sequential: {
              concurrent: {
                index[0]?(y)
                index[1]?(z)
              }
              out!(x[y][z])
            }
          ]
        }
      footprint: {
        !GND = bool^0 = send_indexed<>::!GND (1) 
        !Vdd = bool^0 = send_indexed<>::!Vdd (2) 
        index = channel chan?(int<1>)^1
          {
            [0] = send_indexed<>::index[0] (2) 
            [1] = send_indexed<>::index[1] (3) 
          }
        out = channel chan!(int<32>)^0 = send_indexed<>::out (1) 
        x = pint^2
          unrolled index-value pairs: {
            [0][0] = 1
            [0][1] = 2
            [1][0] = 3
            [1][1] = 4
          }
        y = int<1>^0 = send_indexed<>::y (1) 
        z = int<1>^0 = send_indexed<>::z (2) 
        Created state:
        channel instance pool: (3 ports, 0 local, 0 mapped)
        1	send_indexed<>::out	
        2	send_indexed<>::index[0]	
        3	send_indexed<>::index[1]	
        int instance pool: (0 ports, 2 local, 0 mapped)
        1	send_indexed<>::y	
        2	send_indexed<>::z	
        bool instance pool: (2 ports, 0 local, 0 mapped)
        1	send_indexed<>::!GND	
        2	send_indexed<>::!Vdd	
        resolved concurrent actions:
          *[
            sequential: {
              concurrent: {
                index[0]?(y)
                index[1]?(z)
              }
              out!(x[y][z])
            }
          ]
        chp events: {
          event[0]: fork: , #pred: 1, succ: 3 4 
          event[1]: send: out!(x[y][z]), #pred: 1, succ: 0 
          event[2]: join: , #pred: 2, succ: 1 
          event[3]: receive: index[0]?(y), #pred: 1, succ: 2 
          event[4]: receive: index[1]?(z), #pred: 1, succ: 2 
        }
      }
      }

  Instances:
    !GND = bool<> !GND
    !Vdd = bool<> !Vdd
    foo = send_indexed<> foo
}

footprint: {
  !GND = bool^0 = !GND (1) 
  !Vdd = bool^0 = !Vdd (2) 
  foo = process send_indexed<>^0 = foo (1) (
    !GND = bool^0 = !GND (1) 
    !Vdd = bool^0 = !Vdd (2) 
    index = channel chan?(int<1>)^1
      {
        [0] = foo.index[0] (1) 
        [1] = foo.index[1] (2) 
      }
    out = channel chan!(int<32>)^0 = foo.out (3) 
  )
  Created state:
  process instance pool: (0 ports, 1 local, 0 mapped)
  1	foo	send_indexed<>
    channel: 3,1,2
    bool: 1,2
  channel instance pool: (0 ports, 3 local, 0 mapped)
  1	foo.index[0]	
  2	foo.index[1]	
  3	foo.out	
  private sub-int index map:
    (1 -> 0)
    (2 -> 2)
  bool instance pool: (0 ports, 2 local, 0 mapped)
  1	!GND	
  2	!Vdd	
}
