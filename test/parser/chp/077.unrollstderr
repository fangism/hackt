
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	72
	3	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	4	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	5	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	6	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	7	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	8	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	9	##ADDR##	procdefn	0	#HEAD#	#TAIL#	326
	10	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	11	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	12	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	13	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	14	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	15	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	16	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	17	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	18	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	21	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	22	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	23	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	24	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	26	##ADDR##	CHPloop_	0	#HEAD#	#TAIL#	12
	27	##ADDR##	CHPassgn	0	#HEAD#	#TAIL#	16
	28	##ADDR##	sdbnref_	0	#HEAD#	#TAIL#	16
	29	##ADDR##	spbnref_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	nindlist	0	#HEAD#	#TAIL#	16
	31	##ADDR##	spinref_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	33	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	26
	34	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	35	##ADDR##	footprnt	0	#HEAD#	#TAIL#	345
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	26
	38	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	39	##ADDR##	footprnt	0	#HEAD#	#TAIL#	345
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	footprnt	0	#HEAD#	#TAIL#	350
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	footprnt	0	#HEAD#	#TAIL#	350
	48	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	49	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	27
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	footprnt	0	#HEAD#	#TAIL#	350
	52	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	53	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	54	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	55	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	56	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	57	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	58	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	59	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	60	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	61	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	62	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	63	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	64	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	65	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	66	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	67	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	70	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	71	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	72	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	73	##ADDR##	cnstpbc_	1	#HEAD#	#TAIL#	30
	74	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	75	##ADDR##	footprnt	0	#HEAD#	#TAIL#	365
	76	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	77	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	78	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	79	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	80	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	81	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	82	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	83	##ADDR##	procplch	0	#HEAD#	#TAIL#	28
	84	##ADDR##	loopscop	0	#HEAD#	#TAIL#	24
	85	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	86	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	87	##ADDR##	pbassign	0	#HEAD#	#TAIL#	20
	88	##ADDR##	pireltex	0	#HEAD#	#TAIL#	22
	89	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	90	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	91	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	92	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	93	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	94	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	95	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	96	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	97	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	98	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	99	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	100	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	101	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	104	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	105	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	106	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	107	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	108	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	109	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	110	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	111	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	112	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	113	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	114	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	115	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	116	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	117	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	118	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	119	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	120	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	121	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	122	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	123	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	124	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	125	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	126	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	127	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	128	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	129	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	130	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	131	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	132	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	133	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	134	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	135	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	136	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	137	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	138	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	139	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	140	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	141	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	142	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	143	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	144	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	145	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	146	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	147	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	148	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	24
	149	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	150	##ADDR##	footprnt	0	#HEAD#	#TAIL#	819
	151	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	152	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	153	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	154	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	155	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	156	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	157	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	158	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	159	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	160	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24
	161	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	24

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  1 parameter-collections
  11 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Parameters:
    x = pbool<> x^1
  Definitions:
    assign_me = process-definition (defined) assign_me<
      pint<> N
      pbool<> B[0..N-1]
      pint<> M
      >(
        bool<> b
      )
      In definition "assign_me", we have: {
      Parameters:
        B = pbool<> assign_me::B^1
        M = pint<> assign_me::M
        N = pint<> assign_me::N
      Instances:
        b = bool<> assign_me::b
      unroll sequence: 
        bool<> b
      chp:
        concurrent: {
          *[
            b := B[M]
          ]
        }
      footprint collection: {
        <2, {0,1}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
            }
          M = pint^0 value: 0
          N = pint^0 value: 2
          b = bool^0 = assign_me::b 
        }
        <2, {0,1}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
            }
          M = pint^0 value: 1
          N = pint^0 value: 2
          b = bool^0 = assign_me::b 
        }
        <3, {0,1,0}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 0
          N = pint^0 value: 3
          b = bool^0 = assign_me::b 
        }
        <3, {0,1,0}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 1
          N = pint^0 value: 3
          b = bool^0 = assign_me::b 
        }
        <3, {0,1,0}, 2> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
            }
          M = pint^0 value: 2
          N = pint^0 value: 3
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 0> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 0
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 1> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 1
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 2> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 2
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 3> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 3
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 4> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 4
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
        <6, {0,1,0,1,0,1}, 5> {
          B = pbool^1
            unrolled index-value pairs: {
              0 = 0
              1 = 1
              2 = 0
              3 = 1
              4 = 0
              5 = 1
            }
          M = pint^0 value: 5
          N = pint^0 value: 6
          b = bool^0 = assign_me::b 
        }
      }
      }

  Instances:
    y2_0 = assign_me<2, x[0..1], 0> y2_0
    y2_1 = assign_me<2, x[0..1], 1> y2_1
    y3_0 = assign_me<3, x[2..4], 0> y3_0
    y3_1 = assign_me<3, x[2..4], 1> y3_1
    y3_2 = assign_me<3, x[2..4], 2> y3_2
    y6_0 = assign_me<6, x, 0> y6_0
    y6_1 = assign_me<6, x, 1> y6_1
    y6_2 = assign_me<6, x, 2> y6_2
    y6_3 = assign_me<6, x, 3> y6_3
    y6_4 = assign_me<6, x, 4> y6_4
    y6_5 = assign_me<6, x, 5> y6_5
}

footprint: {
  x = pbool^1
    unrolled index-value pairs: {
      0 = 0
      1 = 1
      2 = 0
      3 = 1
      4 = 0
      5 = 1
    }
  y2_0 = process assign_me<2, {0,1}, 0>^0 = y2_0 (
    b = bool^0 = y2_0.b 
  )
  y2_1 = process assign_me<2, {0,1}, 1>^0 = y2_1 (
    b = bool^0 = y2_1.b 
  )
  y3_0 = process assign_me<3, {0,1,0}, 0>^0 = y3_0 (
    b = bool^0 = y3_0.b 
  )
  y3_1 = process assign_me<3, {0,1,0}, 1>^0 = y3_1 (
    b = bool^0 = y3_1.b 
  )
  y3_2 = process assign_me<3, {0,1,0}, 2>^0 = y3_2 (
    b = bool^0 = y3_2.b 
  )
  y6_0 = process assign_me<6, {0,1,0,1,0,1}, 0>^0 = y6_0 (
    b = bool^0 = y6_0.b 
  )
  y6_1 = process assign_me<6, {0,1,0,1,0,1}, 1>^0 = y6_1 (
    b = bool^0 = y6_1.b 
  )
  y6_2 = process assign_me<6, {0,1,0,1,0,1}, 2>^0 = y6_2 (
    b = bool^0 = y6_2.b 
  )
  y6_3 = process assign_me<6, {0,1,0,1,0,1}, 3>^0 = y6_3 (
    b = bool^0 = y6_3.b 
  )
  y6_4 = process assign_me<6, {0,1,0,1,0,1}, 4>^0 = y6_4 (
    b = bool^0 = y6_4.b 
  )
  y6_5 = process assign_me<6, {0,1,0,1,0,1}, 5>^0 = y6_5 (
    b = bool^0 = y6_5.b 
  )
}
