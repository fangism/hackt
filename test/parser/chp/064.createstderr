WARNING: channel A lacks connection to a producer.
WARNING: channel B lacks connection to a consumer.
---- END CREATE WARNINGS ---

Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	4	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	5	##ADDR##	procdefn	0	#HEAD#	#TAIL#	138
	6	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	7	##ADDR##	chanplch	0	#HEAD#	#TAIL#	25
	8	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	9	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	10	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	11	##ADDR##	dintplch	0	#HEAD#	#TAIL#	25
	12	##ADDR##	portscop	0	#HEAD#	#TAIL#	20
	13	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	15	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	16	##ADDR##	datadefn	0	#HEAD#	#TAIL#	68
	17	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	18	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	19	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	20	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	23	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	27	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	29	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	30	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	31	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	32	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	33	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	34	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	37	##ADDR##	schnnref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	narithex	0	#HEAD#	#TAIL#	17
	39	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	sdinref_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	footprnt	0	#HEAD#	#TAIL#	404
	42	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	fndchntp	0	#HEAD#	#TAIL#	20
	44	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	CHPconcr	0	#HEAD#	#TAIL#	20
	47	##ADDR##	CHPseqnc	0	#HEAD#	#TAIL#	28
	48	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	49	##ADDR##	CHPrecv_	0	#HEAD#	#TAIL#	25
	50	##ADDR##	CHPsend_	0	#HEAD#	#TAIL#	24
	51	##ADDR##	procplch	0	#HEAD#	#TAIL#	30
	52	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	53	##ADDR##	bchntprf	0	#HEAD#	#TAIL#	25
	54	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	55	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	56	##ADDR##	chaninst	0	#HEAD#	#TAIL#	20
	57	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	24
	61	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	62	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	63	##ADDR##	schnmref	0	#HEAD#	#TAIL#	16
	64	##ADDR##	footprnt	0	#HEAD#	#TAIL#	392
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  3 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    adjacent_diff = process-definition (defined) adjacent_diff<
      pint<> W
      >(
        chan?(int<adjacent_diff::W>) L
        chan!(int<adjacent_diff::W>) R
      )
      In definition "adjacent_diff", we have: {
      Parameters:
        W = pint<> adjacent_diff::W
      Instances:
        L = chan?(int<adjacent_diff::W>) adjacent_diff::L
        R = chan!(int<adjacent_diff::W>) adjacent_diff::R
        x = int<adjacent_diff::W> adjacent_diff::x
        z = int<adjacent_diff::W> adjacent_diff::z
      unroll sequence: 
        ports: (
          chan?(int<adjacent_diff::W>) L
          chan!(int<adjacent_diff::W>) R
        )
        int<adjacent_diff::W> x
        int<adjacent_diff::W> z
      chp:
        concurrent: {
          sequential: {
            L?(x)
            L?(z)
            R!(x-z)
          }
        }
      footprint collection: {
        <12> {
          L = channel chan?(int<12>)^0 = adjacent_diff<12>::L (1) 
          R = channel chan!(int<12>)^0 = adjacent_diff<12>::R (2) 
          W = pint^0 value: 12
          x = int<12>^0 = adjacent_diff<12>::x (1) 
          z = int<12>^0 = adjacent_diff<12>::z (2) 
          Created state:
          channel instance pool:
          1	adjacent_diff<12>::L
          2	adjacent_diff<12>::R
          int instance pool:
          1	adjacent_diff<12>::x
          2	adjacent_diff<12>::z
          resolved concurrent actions:
            sequential: {
              L?(x)
              L?(z)
              R!(x-z)
            }
          chp events: {
            event[0]: receive: L?(x), #pred: 1, succ: 1 
            event[1]: receive: L?(z), #pred: 1, succ: 2 
            event[2]: send: R!(x-z), #pred: 1, succ: 
          }
        }
      }
      }

  Instances:
    A = chan(int<12>) A
    B = chan(int<12>) B
    differ = adjacent_diff<12> differ
}

footprint: {
  A = channel chan(int<12>)^0 = A (1) 
  B = channel chan(int<12>)^0 = B (2) 
  differ = process adjacent_diff<12>^0 = differ (1) (
    L = channel chan?(int<12>)^0 = A (1) 
    R = channel chan!(int<12>)^0 = B (2) 
  )
  Created state:
  process instance pool:
  1	differ
  channel instance pool:
  1	A
  2	B
}
