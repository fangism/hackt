
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	182
	4	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	5	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	6	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	7	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	8	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	9	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	10	##ADDR##	procdefn	0	#HEAD#	#TAIL#	192
	11	##ADDR##	proccoll	0	#HEAD#	#TAIL#	47
	12	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	13	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	14	##ADDR##	procdefn	0	#HEAD#	#TAIL#	202
	15	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	16	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	17	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	25
	18	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	19	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	20	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	21	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	24	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	25	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	28	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	proccoll	1	#HEAD#	#TAIL#	34
	32	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	33	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	34	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	35	##ADDR##	loopscop	0	#HEAD#	#TAIL#	24
	36	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	37	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	38	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	39	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	41	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	43	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	44	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	45	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	49	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	81
	51	##ADDR##	proccoll	1	#HEAD#	#TAIL#	59
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	53	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	54	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	55	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	56	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    ch1of = process-definition (defined) ch1of<
      pint<> N
      >(
        bool<> d

      )
      In definition "ch1of", we have: {
      Parameters:
        N = pint<> N
      Instances:
        d = bool<> d

      unroll sequence: 
        pint<> N
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          pint^0 N value: ?
          bool^1 d
            unrolled indices: {
              0 = ::ch1of::d[0] 
              1 = ::ch1of::d[1] 
              2 = ::ch1of::d[2] 
              3 = ::ch1of::d[3] 
            }
        }
      }
      }

    dcelm = process-definition (defined) dcelm(
        bool<> a
      )
      In definition "dcelm", we have: {
      Instances:
        a = bool<> a
      unroll sequence: 
        bool<> a
      footprint: {
        bool^0 a (instantiated) = ::dcelm::a 
      }
      }

    lut = process-definition (defined) lut(
      )
      In definition "lut", we have: {
      Instances:
        ad = ch1of<4> ad
        ce = dcelm<> ce

      unroll sequence: 
        ch1of<4> ad
        dcelm<> ce[0..0]
        (;b:[0..0]:
          ce[$b] (ad.d[$b/4]);
        )
      footprint: {
        process ch1of<4>^0 ad (instantiated) = ::lut::ad (
          bool^1 d
            unrolled indices: {
              0 = ::lut::ce[0].a 
              1 = ::lut::ad.d[1] 
              2 = ::lut::ad.d[2] 
              3 = ::lut::ad.d[3] 
            }
        )
        process dcelm<>^1 ce
          unrolled indices: {
            0 = ::lut::ce[0] (
              bool^0 a (instantiated) = ::lut::ce[0].a 
            )
          }
      }
      }

  Instances:
    l = process lut<>^0 l (instantiated) = ::l 
}

