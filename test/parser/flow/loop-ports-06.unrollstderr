
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	319
	4	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	25
	7	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	10	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	12	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	13	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	14	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	18	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	21	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	233
	22	##ADDR##	procdefn	0	#HEAD#	#TAIL#	246
	23	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	28	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	29	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	30	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	31	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	32	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	33	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	34	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	37	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	40	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	41	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	42	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	46	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	48	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	49	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	50	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	51	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	52	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	53	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	55	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	56	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	57	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	58	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	59	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	60	##ADDR##	procdefn	0	#HEAD#	#TAIL#	224
	61	##ADDR##	proccoll	1	#HEAD#	#TAIL#	34
	62	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	63	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	64	##ADDR##	procdefn	0	#HEAD#	#TAIL#	318
	65	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	66	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	67	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	25
	68	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	69	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	70	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	71	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	72	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	73	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	74	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	75	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	76	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	77	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	78	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	79	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	80	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	81	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	233
	82	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	83	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	84	##ADDR##	proccoll	1	#HEAD#	#TAIL#	34
	85	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	86	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	87	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	88	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	89	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	90	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	91	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	92	##ADDR##	proccoll	1	#HEAD#	#TAIL#	35
	93	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	94	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	95	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	96	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	97	##ADDR##	proccoll	0	#HEAD#	#TAIL#	46
	98	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	99	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	100	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	101	##ADDR##	proccoll	0	#HEAD#	#TAIL#	47
	102	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	103	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	104	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	105	##ADDR##	loopscop	0	#HEAD#	#TAIL#	28
	106	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	107	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	108	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	109	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	110	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	111	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	112	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	113	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	114	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	115	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	116	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	117	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	118	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	119	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	120	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	121	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	122	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	123	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	124	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	125	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	126	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	127	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	128	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	129	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	130	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	131	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	132	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	133	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	134	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	135	##ADDR##	proccoll	1	#HEAD#	#TAIL#	84
	136	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	137	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	93
	138	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	93
	139	##ADDR##	proccoll	1	#HEAD#	#TAIL#	626
	140	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	141	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	142	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	143	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	144	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	145	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	146	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	147	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	148	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	149	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	150	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	151	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	152	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	153	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	154	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	155	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	156	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	157	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	158	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	159	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	160	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	161	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	162	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	163	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	164	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	165	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	166	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	167	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	168	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	169	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	170	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	171	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	172	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	173	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	174	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	175	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	176	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	177	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	178	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	179	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	180	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	181	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	182	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	183	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	184	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	185	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	186	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	187	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	188	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	189	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	190	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	191	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	192	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	193	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	194	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	195	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	34
	196	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	30
	197	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	198	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	199	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	200	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	201	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	202	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	203	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	33
	204	##ADDR##	dboolcol	0	#HEAD#	#TAIL#	32
	205	##ADDR##	proccoll	1	#HEAD#	#TAIL#	85
	206	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	207	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	208	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	77
	209	##ADDR##	proccoll	0	#HEAD#	#TAIL#	50
	210	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	211	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	297
	212	##ADDR##	proccoll	0	#HEAD#	#TAIL#	51
	213	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	214	##ADDR##	dboolcol	1	#HEAD#	#TAIL#	297
	215	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	216	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	217	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  4 definitions
  0 typedefs
  Definitions:
    ch1of = process-definition (defined) ch1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch1of", we have: {
      Parameters:
        N = pint<> N
      Instances:
        d = bool<> d

      unroll sequence: 
        pint<> N
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          pint^0 N value: ?
          bool^1 d
            unrolled indices: {
              0 = ::ch1of::d[0] 
              1 = ::ch1of::d[1] 
              2 = ::ch1of::d[2] 
              3 = ::ch1of::d[3] 
            }
        }
        <16> {
          pint^0 N value: ?
          bool^1 d
            unrolled indices: {
              0 = ::ch1of::d[0] 
              1 = ::ch1of::d[1] 
              2 = ::ch1of::d[2] 
              3 = ::ch1of::d[3] 
              4 = ::ch1of::d[4] 
              5 = ::ch1of::d[5] 
              6 = ::ch1of::d[6] 
              7 = ::ch1of::d[7] 
              8 = ::ch1of::d[8] 
              9 = ::ch1of::d[9] 
              10 = ::ch1of::d[10] 
              11 = ::ch1of::d[11] 
              12 = ::ch1of::d[12] 
              13 = ::ch1of::d[13] 
              14 = ::ch1of::d[14] 
              15 = ::ch1of::d[15] 
            }
        }
      }
      }

    ch_1of = process-definition (defined) ch_1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch_1of", we have: {
      Parameters:
        N = pint<> N
      Instances:
        d = bool<> d

      unroll sequence: 
        pint<> N
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          pint^0 N value: ?
          bool^1 d
            unrolled indices: {
              0 = ::ch_1of::d[0] 
              1 = ::ch_1of::d[1] 
              2 = ::ch_1of::d[2] 
              3 = ::ch_1of::d[3] 
            }
        }
        <16> {
          pint^0 N value: ?
          bool^1 d
            unrolled indices: {
              0 = ::ch_1of::d[0] 
              1 = ::ch_1of::d[1] 
              2 = ::ch_1of::d[2] 
              3 = ::ch_1of::d[3] 
              4 = ::ch_1of::d[4] 
              5 = ::ch_1of::d[5] 
              6 = ::ch_1of::d[6] 
              7 = ::ch_1of::d[7] 
              8 = ::ch_1of::d[8] 
              9 = ::ch_1of::d[9] 
              10 = ::ch_1of::d[10] 
              11 = ::ch_1of::d[11] 
              12 = ::ch_1of::d[12] 
              13 = ::ch_1of::d[13] 
              14 = ::ch_1of::d[14] 
              15 = ::ch_1of::d[15] 
            }
        }
      }
      }

    dcelm = process-definition (defined) dcelm(
        bool<> a
        bool<> b
        bool<> _out
        bool<> out
      )
      In definition "dcelm", we have: {
      Instances:
        _out = bool<> _out
        a = bool<> a
        b = bool<> b
        out = bool<> out
      unroll sequence: 
        bool<> a
        bool<> b
        bool<> _out
        bool<> out
      prs:
        a & b -> _out-
        ~a & ~b -> _out+
        _out -> out-
        ~_out -> out+
      footprint: {
        bool^0 out (instantiated) = ::dcelm::out 
        bool^0 a (instantiated) = ::dcelm::a 
        bool^0 b (instantiated) = ::dcelm::b 
        bool^0 _out (instantiated) = ::dcelm::_out 
      }
      }

    lut = process-definition (defined) lut(
      )
      In definition "lut", we have: {
      Instances:
        _ad = ch_1of<4> _ad

        _d = ch_1of<16> _d
        ad = ch1of<4> ad

        ce = dcelm<> ce

        d = ch1of<16> d
      unroll sequence: 
        ch_1of<4> _ad[0..1]
        ch1of<4> ad[0..1]
        ch1of<16> d
        ch_1of<16> _d
        (;b:[0..15]:
          dcelm<> ce[$b..$b]
          ce[$b] (ad[1].d[$b/4], ad[0].d[$b%4], _d.d[$b], d.d[$b]);
        )
      footprint: {
        process ch1of<4>^1 ad
          unrolled indices: {
            0 = ::lut::ad[0] (
              bool^1 d
                unrolled indices: {
                  0 = ::lut::ce[8].b 
                  1 = ::lut::ce[9].b 
                  2 = ::lut::ce[10].b 
                  3 = ::lut::ce[11].b 
                }
            )
            1 = ::lut::ad[1] (
              bool^1 d
                unrolled indices: {
                  0 = ::lut::ce[2].a 
                  1 = ::lut::ce[6].a 
                  2 = ::lut::ce[10].a 
                  3 = ::lut::ce[14].a 
                }
            )
          }
        process dcelm<>^1 ce
          unrolled indices: {
            0 = ::lut::ce[0] (
              bool^0 a (instantiated) = ::lut::ce[1].a 
              bool^0 b (instantiated) = ::lut::ce[4].b 
              bool^0 _out (instantiated) = ::lut::ce[0]._out 
              bool^0 out (instantiated) = ::lut::ce[0].out 
            )
            1 = ::lut::ce[1] (
              bool^0 a (instantiated) = ::lut::ce[2].a 
              bool^0 b (instantiated) = ::lut::ce[5].b 
              bool^0 _out (instantiated) = ::lut::ce[1]._out 
              bool^0 out (instantiated) = ::lut::ce[1].out 
            )
            2 = ::lut::ce[2] (
              bool^0 a (instantiated) = ::lut::ce[3].a 
              bool^0 b (instantiated) = ::lut::ce[6].b 
              bool^0 _out (instantiated) = ::lut::ce[2]._out 
              bool^0 out (instantiated) = ::lut::ce[2].out 
            )
            3 = ::lut::ce[3] (
              bool^0 a (instantiated) = ::lut::ce[3].a 
              bool^0 b (instantiated) = ::lut::ce[7].b 
              bool^0 _out (instantiated) = ::lut::ce[3]._out 
              bool^0 out (instantiated) = ::lut::ce[3].out 
            )
            4 = ::lut::ce[4] (
              bool^0 a (instantiated) = ::lut::ce[5].a 
              bool^0 b (instantiated) = ::lut::ce[8].b 
              bool^0 _out (instantiated) = ::lut::ce[4]._out 
              bool^0 out (instantiated) = ::lut::ce[4].out 
            )
            5 = ::lut::ce[5] (
              bool^0 a (instantiated) = ::lut::ce[6].a 
              bool^0 b (instantiated) = ::lut::ce[9].b 
              bool^0 _out (instantiated) = ::lut::ce[5]._out 
              bool^0 out (instantiated) = ::lut::ce[5].out 
            )
            6 = ::lut::ce[6] (
              bool^0 a (instantiated) = ::lut::ce[7].a 
              bool^0 b (instantiated) = ::lut::ce[10].b 
              bool^0 _out (instantiated) = ::lut::ce[6]._out 
              bool^0 out (instantiated) = ::lut::ce[6].out 
            )
            7 = ::lut::ce[7] (
              bool^0 a (instantiated) = ::lut::ce[7].a 
              bool^0 b (instantiated) = ::lut::ce[11].b 
              bool^0 _out (instantiated) = ::lut::ce[7]._out 
              bool^0 out (instantiated) = ::lut::ce[7].out 
            )
            8 = ::lut::ce[8] (
              bool^0 a (instantiated) = ::lut::ce[9].a 
              bool^0 b (instantiated) = ::lut::ce[12].b 
              bool^0 _out (instantiated) = ::lut::ce[8]._out 
              bool^0 out (instantiated) = ::lut::ce[8].out 
            )
            9 = ::lut::ce[9] (
              bool^0 a (instantiated) = ::lut::ce[10].a 
              bool^0 b (instantiated) = ::lut::ce[13].b 
              bool^0 _out (instantiated) = ::lut::ce[9]._out 
              bool^0 out (instantiated) = ::lut::ce[9].out 
            )
            10 = ::lut::ce[10] (
              bool^0 a (instantiated) = ::lut::ce[11].a 
              bool^0 b (instantiated) = ::lut::ce[14].b 
              bool^0 _out (instantiated) = ::lut::ce[10]._out 
              bool^0 out (instantiated) = ::lut::ce[10].out 
            )
            11 = ::lut::ce[11] (
              bool^0 a (instantiated) = ::lut::ce[11].a 
              bool^0 b (instantiated) = ::lut::ce[15].b 
              bool^0 _out (instantiated) = ::lut::ce[11]._out 
              bool^0 out (instantiated) = ::lut::ce[11].out 
            )
            12 = ::lut::ce[12] (
              bool^0 a (instantiated) = ::lut::ce[13].a 
              bool^0 b (instantiated) = ::lut::ce[12].b 
              bool^0 _out (instantiated) = ::lut::ce[12]._out 
              bool^0 out (instantiated) = ::lut::ce[12].out 
            )
            13 = ::lut::ce[13] (
              bool^0 a (instantiated) = ::lut::ce[14].a 
              bool^0 b (instantiated) = ::lut::ce[13].b 
              bool^0 _out (instantiated) = ::lut::ce[13]._out 
              bool^0 out (instantiated) = ::lut::ce[13].out 
            )
            14 = ::lut::ce[14] (
              bool^0 a (instantiated) = ::lut::ce[15].a 
              bool^0 b (instantiated) = ::lut::ce[14].b 
              bool^0 _out (instantiated) = ::lut::ce[14]._out 
              bool^0 out (instantiated) = ::lut::ce[14].out 
            )
            15 = ::lut::ce[15] (
              bool^0 a (instantiated) = ::lut::ce[15].a 
              bool^0 b (instantiated) = ::lut::ce[15].b 
              bool^0 _out (instantiated) = ::lut::ce[15]._out 
              bool^0 out (instantiated) = ::lut::ce[15].out 
            )
          }
        process ch_1of<4>^1 _ad
          unrolled indices: {
            0 = ::lut::_ad[0] (
              bool^1 d
                unrolled indices: {
                  0 = ::lut::_ad[0].d[0] 
                  1 = ::lut::_ad[0].d[1] 
                  2 = ::lut::_ad[0].d[2] 
                  3 = ::lut::_ad[0].d[3] 
                }
            )
            1 = ::lut::_ad[1] (
              bool^1 d
                unrolled indices: {
                  0 = ::lut::_ad[1].d[0] 
                  1 = ::lut::_ad[1].d[1] 
                  2 = ::lut::_ad[1].d[2] 
                  3 = ::lut::_ad[1].d[3] 
                }
            )
          }
        process ch1of<16>^0 d (instantiated) = ::lut::d (
          bool^1 d
            unrolled indices: {
              0 = ::lut::ce[0].out 
              1 = ::lut::ce[1].out 
              2 = ::lut::ce[2].out 
              3 = ::lut::ce[3].out 
              4 = ::lut::ce[4].out 
              5 = ::lut::ce[5].out 
              6 = ::lut::ce[6].out 
              7 = ::lut::ce[7].out 
              8 = ::lut::ce[8].out 
              9 = ::lut::ce[9].out 
              10 = ::lut::ce[10].out 
              11 = ::lut::ce[11].out 
              12 = ::lut::ce[12].out 
              13 = ::lut::ce[13].out 
              14 = ::lut::ce[14].out 
              15 = ::lut::ce[15].out 
            }
        )
        process ch_1of<16>^0 _d (instantiated) = ::lut::_d (
          bool^1 d
            unrolled indices: {
              0 = ::lut::ce[0]._out 
              1 = ::lut::ce[1]._out 
              2 = ::lut::ce[2]._out 
              3 = ::lut::ce[3]._out 
              4 = ::lut::ce[4]._out 
              5 = ::lut::ce[5]._out 
              6 = ::lut::ce[6]._out 
              7 = ::lut::ce[7]._out 
              8 = ::lut::ce[8]._out 
              9 = ::lut::ce[9]._out 
              10 = ::lut::ce[10]._out 
              11 = ::lut::ce[11]._out 
              12 = ::lut::ce[12]._out 
              13 = ::lut::ce[13]._out 
              14 = ::lut::ce[14]._out 
              15 = ::lut::ce[15]._out 
            }
        )
      }
      }

  Instances:
    l = process lut<>^0 l (instantiated) = ::l 
}

