
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	107
	4	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	61
	10	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	12	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	13	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	14	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	330
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	footprnt	0	#HEAD#	#TAIL#	390
	20	##ADDR##	procdefn	0	#HEAD#	#TAIL#	134
	21	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	27
	22	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	23	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	24	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	28
	25	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	26	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	28	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	29	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	30	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	31	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	32	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	33	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	34	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	35	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	36	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	38	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	39	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	41	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	42	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	43	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	44	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	PRSpuldn	0	#HEAD#	#TAIL#	21
	47	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	50	##ADDR##	PRSpulup	0	#HEAD#	#TAIL#	21
	51	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	52	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	53	##ADDR##	footprnt	0	#HEAD#	#TAIL#	318
	54	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	55	##ADDR##	procdefn	0	#HEAD#	#TAIL#	108
	56	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	57	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	58	##ADDR##	procplch	0	#HEAD#	#TAIL#	27
	59	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	60	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	61	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	62	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	63	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	64	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	65	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	66	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	67	##ADDR##	procdefn	0	#HEAD#	#TAIL#	106
	68	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	69	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	70	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	71	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	72	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	73	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	74	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	75	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	76	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	77	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	80	##ADDR##	footprnt	0	#HEAD#	#TAIL#	330
	81	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	82	##ADDR##	footprnt	0	#HEAD#	#TAIL#	390
	83	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	84	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	85	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	86	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	87	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	88	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	89	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	90	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	91	##ADDR##	loopscop	0	#HEAD#	#TAIL#	28
	92	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	93	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	94	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	95	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	96	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	97	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	98	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	99	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	100	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	32
	101	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	102	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	103	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	104	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	105	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	106	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	107	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	108	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	109	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	110	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	111	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	112	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	113	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	114	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	115	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	116	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	117	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	118	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	119	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	120	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	121	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	122	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	123	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	124	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	125	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	126	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	127	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	128	##ADDR##	footprnt	0	#HEAD#	#TAIL#	2650
	129	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	130	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	131	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	132	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	133	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	134	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	135	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	136	##ADDR##	footprnt	0	#HEAD#	#TAIL#	307
	137	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  4 definitions
  0 typedefs
  Definitions:
    ch1of = process-definition (defined) ch1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch1of", we have: {
      Parameters:
        N = pint<> ch1of::N
      Instances:
        d = bool<> ch1of::d^1
      unroll sequence: 
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          N = pint^0 value: 4
          d = bool^1
            {
              [0] = ch1of::d[0] 
              [1] = ch1of::d[1] 
              [2] = ch1of::d[2] 
              [3] = ch1of::d[3] 
            }
        }
        <16> {
          N = pint^0 value: 16
          d = bool^1
            {
              [0] = ch1of::d[0] 
              [1] = ch1of::d[1] 
              [2] = ch1of::d[2] 
              [3] = ch1of::d[3] 
              [4] = ch1of::d[4] 
              [5] = ch1of::d[5] 
              [6] = ch1of::d[6] 
              [7] = ch1of::d[7] 
              [8] = ch1of::d[8] 
              [9] = ch1of::d[9] 
              [10] = ch1of::d[10] 
              [11] = ch1of::d[11] 
              [12] = ch1of::d[12] 
              [13] = ch1of::d[13] 
              [14] = ch1of::d[14] 
              [15] = ch1of::d[15] 
            }
        }
      }
      }

    ch_1of = process-definition (defined) ch_1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch_1of", we have: {
      Parameters:
        N = pint<> ch_1of::N
      Instances:
        d = bool<> ch_1of::d^1
      unroll sequence: 
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          N = pint^0 value: 4
          d = bool^1
            {
              [0] = ch_1of::d[0] 
              [1] = ch_1of::d[1] 
              [2] = ch_1of::d[2] 
              [3] = ch_1of::d[3] 
            }
        }
        <16> {
          N = pint^0 value: 16
          d = bool^1
            {
              [0] = ch_1of::d[0] 
              [1] = ch_1of::d[1] 
              [2] = ch_1of::d[2] 
              [3] = ch_1of::d[3] 
              [4] = ch_1of::d[4] 
              [5] = ch_1of::d[5] 
              [6] = ch_1of::d[6] 
              [7] = ch_1of::d[7] 
              [8] = ch_1of::d[8] 
              [9] = ch_1of::d[9] 
              [10] = ch_1of::d[10] 
              [11] = ch_1of::d[11] 
              [12] = ch_1of::d[12] 
              [13] = ch_1of::d[13] 
              [14] = ch_1of::d[14] 
              [15] = ch_1of::d[15] 
            }
        }
      }
      }

    dcelm = process-definition (defined) dcelm(
        bool<> a
        bool<> b
        bool<> _out
        bool<> out
      )
      In definition "dcelm", we have: {
      Instances:
        _out = bool<> dcelm::_out
        a = bool<> dcelm::a
        b = bool<> dcelm::b
        out = bool<> dcelm::out
      unroll sequence: 
        bool<> a
        bool<> b
        bool<> _out
        bool<> out
      prs:
        a & b -> _out-
        ~a & ~b -> _out+
        _out -> out-
        ~_out -> out+
      footprint: {
        _out = bool^0 = dcelm::_out 
        a = bool^0 = dcelm::a 
        b = bool^0 = dcelm::b 
        out = bool^0 = dcelm::out 
      }
      }

    lut = process-definition (defined) lut(
      )
      In definition "lut", we have: {
      Instances:
        _ad = ch_1of<4> lut::_ad^1
        _d = ch_1of<16> lut::_d
        ad = ch1of<4> lut::ad^1
        ce = dcelm<> lut::ce^1
        d = ch1of<16> lut::d
      unroll sequence: 
        ch_1of<4> _ad[0..1]
        ch1of<4> ad[0..1]
        ch1of<16> d
        ch_1of<16> _d
        (;b:[0..15]:
          dcelm<> ce[$b..$b]
          ce[$b] (ad[1].d[$b/4], ad[0].d[$b%4], _d.d[$b], d.d[$b]);
        )
      footprint: {
        _ad = process ch_1of<4>^1
          {
            [0] = lut::_ad[0] (
              d = bool^1
                {
                  [0] = lut::_ad[0].d[0] 
                  [1] = lut::_ad[0].d[1] 
                  [2] = lut::_ad[0].d[2] 
                  [3] = lut::_ad[0].d[3] 
                }
            )
            [1] = lut::_ad[1] (
              d = bool^1
                {
                  [0] = lut::_ad[1].d[0] 
                  [1] = lut::_ad[1].d[1] 
                  [2] = lut::_ad[1].d[2] 
                  [3] = lut::_ad[1].d[3] 
                }
            )
          }
        _d = process ch_1of<16>^0 = lut::_d (
          d = bool^1
            {
              [0] = lut::ce[0]._out 
              [1] = lut::ce[1]._out 
              [2] = lut::ce[2]._out 
              [3] = lut::ce[3]._out 
              [4] = lut::ce[4]._out 
              [5] = lut::ce[5]._out 
              [6] = lut::ce[6]._out 
              [7] = lut::ce[7]._out 
              [8] = lut::ce[8]._out 
              [9] = lut::ce[9]._out 
              [10] = lut::ce[10]._out 
              [11] = lut::ce[11]._out 
              [12] = lut::ce[12]._out 
              [13] = lut::ce[13]._out 
              [14] = lut::ce[14]._out 
              [15] = lut::ce[15]._out 
            }
        )
        ad = process ch1of<4>^1
          {
            [0] = lut::ad[0] (
              d = bool^1
                {
                  [0] = lut::ce[8].b 
                  [1] = lut::ce[9].b 
                  [2] = lut::ce[10].b 
                  [3] = lut::ce[11].b 
                }
            )
            [1] = lut::ad[1] (
              d = bool^1
                {
                  [0] = lut::ce[2].a 
                  [1] = lut::ce[6].a 
                  [2] = lut::ce[10].a 
                  [3] = lut::ce[14].a 
                }
            )
          }
        ce = process dcelm<>^1
          {
            [0] = lut::ce[0] (
              a = bool^0 = lut::ce[1].a 
              b = bool^0 = lut::ce[4].b 
              _out = bool^0 = lut::ce[0]._out 
              out = bool^0 = lut::ce[0].out 
            )
            [1] = lut::ce[1] (
              a = bool^0 = lut::ce[2].a 
              b = bool^0 = lut::ce[5].b 
              _out = bool^0 = lut::ce[1]._out 
              out = bool^0 = lut::ce[1].out 
            )
            [2] = lut::ce[2] (
              a = bool^0 = lut::ce[3].a 
              b = bool^0 = lut::ce[6].b 
              _out = bool^0 = lut::ce[2]._out 
              out = bool^0 = lut::ce[2].out 
            )
            [3] = lut::ce[3] (
              a = bool^0 = lut::ce[3].a 
              b = bool^0 = lut::ce[7].b 
              _out = bool^0 = lut::ce[3]._out 
              out = bool^0 = lut::ce[3].out 
            )
            [4] = lut::ce[4] (
              a = bool^0 = lut::ce[5].a 
              b = bool^0 = lut::ce[8].b 
              _out = bool^0 = lut::ce[4]._out 
              out = bool^0 = lut::ce[4].out 
            )
            [5] = lut::ce[5] (
              a = bool^0 = lut::ce[6].a 
              b = bool^0 = lut::ce[9].b 
              _out = bool^0 = lut::ce[5]._out 
              out = bool^0 = lut::ce[5].out 
            )
            [6] = lut::ce[6] (
              a = bool^0 = lut::ce[7].a 
              b = bool^0 = lut::ce[10].b 
              _out = bool^0 = lut::ce[6]._out 
              out = bool^0 = lut::ce[6].out 
            )
            [7] = lut::ce[7] (
              a = bool^0 = lut::ce[7].a 
              b = bool^0 = lut::ce[11].b 
              _out = bool^0 = lut::ce[7]._out 
              out = bool^0 = lut::ce[7].out 
            )
            [8] = lut::ce[8] (
              a = bool^0 = lut::ce[9].a 
              b = bool^0 = lut::ce[12].b 
              _out = bool^0 = lut::ce[8]._out 
              out = bool^0 = lut::ce[8].out 
            )
            [9] = lut::ce[9] (
              a = bool^0 = lut::ce[10].a 
              b = bool^0 = lut::ce[13].b 
              _out = bool^0 = lut::ce[9]._out 
              out = bool^0 = lut::ce[9].out 
            )
            [10] = lut::ce[10] (
              a = bool^0 = lut::ce[11].a 
              b = bool^0 = lut::ce[14].b 
              _out = bool^0 = lut::ce[10]._out 
              out = bool^0 = lut::ce[10].out 
            )
            [11] = lut::ce[11] (
              a = bool^0 = lut::ce[11].a 
              b = bool^0 = lut::ce[15].b 
              _out = bool^0 = lut::ce[11]._out 
              out = bool^0 = lut::ce[11].out 
            )
            [12] = lut::ce[12] (
              a = bool^0 = lut::ce[13].a 
              b = bool^0 = lut::ce[12].b 
              _out = bool^0 = lut::ce[12]._out 
              out = bool^0 = lut::ce[12].out 
            )
            [13] = lut::ce[13] (
              a = bool^0 = lut::ce[14].a 
              b = bool^0 = lut::ce[13].b 
              _out = bool^0 = lut::ce[13]._out 
              out = bool^0 = lut::ce[13].out 
            )
            [14] = lut::ce[14] (
              a = bool^0 = lut::ce[15].a 
              b = bool^0 = lut::ce[14].b 
              _out = bool^0 = lut::ce[14]._out 
              out = bool^0 = lut::ce[14].out 
            )
            [15] = lut::ce[15] (
              a = bool^0 = lut::ce[15].a 
              b = bool^0 = lut::ce[15].b 
              _out = bool^0 = lut::ce[15]._out 
              out = bool^0 = lut::ce[15].out 
            )
          }
        d = process ch1of<16>^0 = lut::d (
          d = bool^1
            {
              [0] = lut::ce[0].out 
              [1] = lut::ce[1].out 
              [2] = lut::ce[2].out 
              [3] = lut::ce[3].out 
              [4] = lut::ce[4].out 
              [5] = lut::ce[5].out 
              [6] = lut::ce[6].out 
              [7] = lut::ce[7].out 
              [8] = lut::ce[8].out 
              [9] = lut::ce[9].out 
              [10] = lut::ce[10].out 
              [11] = lut::ce[11].out 
              [12] = lut::ce[12].out 
              [13] = lut::ce[13].out 
              [14] = lut::ce[14].out 
              [15] = lut::ce[15].out 
            }
        )
      }
      }

  Instances:
    l = lut<> l
}

footprint: {
  l = process lut<>^0 = l 
}
