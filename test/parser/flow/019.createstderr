
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	40
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	1949
	4	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	38
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	38
	7	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	8	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	30
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	24
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	53
	12	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	20
	13	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	14	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	15	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	16	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	18	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	21	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	loopscop	0	#HEAD#	#TAIL#	24
	24	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	25	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	26	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	27	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	28	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	29	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	30	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	31	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	32	##ADDR##	loopscop	0	#HEAD#	#TAIL#	28
	33	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	34	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	37	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	38	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	42	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	43	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	20
	44	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	45	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	46	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	47	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	20
	48	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	49	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	52	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	53	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	55	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	56	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	20
	57	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	58	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	61	##ADDR##	sdbmref_	0	#HEAD#	#TAIL#	20
	62	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	20
	63	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	64	##ADDR##	arithexp	0	#HEAD#	#TAIL#	17
	65	##ADDR##	spimref_	0	#HEAD#	#TAIL#	20
	66	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	67	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	68	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	69	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	70	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	71	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	286
	72	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	73	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	74	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	75	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	76	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	373
	77	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	78	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	79	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	80	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	81	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	373
	82	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	83	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	84	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	85	##ADDR##	pintcoll	0	#HEAD#	#TAIL#	33
	86	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	489
	87	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	88	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	89	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	90	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	91	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	92	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	93	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	94	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	291
	95	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	96	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	97	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	98	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	99	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	100	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	101	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	102	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	378
	103	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	104	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	105	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	106	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	107	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	108	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	109	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	110	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	378
	111	##ADDR##	proccoll	0	#HEAD#	#TAIL#	55
	112	##ADDR##	procinst	0	#HEAD#	#TAIL#	24
	113	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	114	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	20
	115	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	116	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	117	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	20
	118	##ADDR##	dboolcol	2	#HEAD#	#TAIL#	494

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  4 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    checkers = process-definition (defined) checkers<
      pint<> M
      pint<> N
      >(
        bool<> m with indices: {
          [0..::checkers::M-1][0..::checkers::N-1]
        }

      )
      In definition "checkers", we have: {
      Parameters:
        M = pint<> M
        N = pint<> N
      Instances:
        m = bool<> m with indices: {
          [0..::checkers::M-1][0..::checkers::N-1]
        }

      footprint collection: {
        <3, 3> {
          pint^0 M value: ?
          pint^0 N value: ?
          bool^2 m with indices: {
          }
            unrolled indices: {
              [0][0] = ::checkers::m[0][2] (1) 
              [0][1] = ::checkers::m[1][0] (2) 
              [0][2] = ::checkers::m[2][0] (1) 
              [1][0] = ::checkers::m[1][2] (2) 
              [1][1] = ::checkers::m[0][0] (1) 
              [1][2] = ::checkers::m[2][1] (2) 
              [2][0] = ::checkers::m[2][2] (1) 
              [2][1] = ::checkers::m[0][1] (2) 
              [2][2] = ::checkers::m[1][1] (1) 
            }
          bool instance pool:
          1	::checkers::m[0][0]
          2	::checkers::m[0][1]
          bool port aliases:
          1: ::checkers::m[0][0] = ::checkers::m[0][2] = ::checkers::m[1][1] = ::checkers::m[2][0] = ::checkers::m[2][2]
          2: ::checkers::m[0][1] = ::checkers::m[1][0] = ::checkers::m[1][2] = ::checkers::m[2][1]
        }
        <3, 4> {
          pint^0 M value: ?
          pint^0 N value: ?
          bool^2 m with indices: {
          }
            unrolled indices: {
              [0][0] = ::checkers::m[0][2] (1) 
              [0][1] = ::checkers::m[0][3] (2) 
              [0][2] = ::checkers::m[2][0] (1) 
              [0][3] = ::checkers::m[1][0] (2) 
              [1][0] = ::checkers::m[2][1] (2) 
              [1][1] = ::checkers::m[1][3] (1) 
              [1][2] = ::checkers::m[0][1] (2) 
              [1][3] = ::checkers::m[0][0] (1) 
              [2][0] = ::checkers::m[2][2] (1) 
              [2][1] = ::checkers::m[2][3] (2) 
              [2][2] = ::checkers::m[1][1] (1) 
              [2][3] = ::checkers::m[1][2] (2) 
            }
          bool instance pool:
          1	::checkers::m[0][0]
          2	::checkers::m[0][1]
          bool port aliases:
          1: ::checkers::m[0][0] = ::checkers::m[0][2] = ::checkers::m[1][1] = ::checkers::m[1][3] = ::checkers::m[2][0] = ::checkers::m[2][2]
          2: ::checkers::m[0][1] = ::checkers::m[0][3] = ::checkers::m[1][0] = ::checkers::m[1][2] = ::checkers::m[2][1] = ::checkers::m[2][3]
        }
        <4, 3> {
          pint^0 M value: ?
          pint^0 N value: ?
          bool^2 m with indices: {
          }
            unrolled indices: {
              [0][0] = ::checkers::m[2][0] (1) 
              [0][1] = ::checkers::m[1][0] (2) 
              [0][2] = ::checkers::m[1][1] (1) 
              [1][0] = ::checkers::m[3][0] (2) 
              [1][1] = ::checkers::m[2][2] (1) 
              [1][2] = ::checkers::m[0][1] (2) 
              [2][0] = ::checkers::m[0][2] (1) 
              [2][1] = ::checkers::m[3][2] (2) 
              [2][2] = ::checkers::m[3][1] (1) 
              [3][0] = ::checkers::m[2][1] (2) 
              [3][1] = ::checkers::m[0][0] (1) 
              [3][2] = ::checkers::m[1][2] (2) 
            }
          bool instance pool:
          1	::checkers::m[0][0]
          2	::checkers::m[0][1]
          bool port aliases:
          1: ::checkers::m[0][0] = ::checkers::m[0][2] = ::checkers::m[1][1] = ::checkers::m[2][0] = ::checkers::m[2][2] = ::checkers::m[3][1]
          2: ::checkers::m[0][1] = ::checkers::m[1][0] = ::checkers::m[1][2] = ::checkers::m[2][1] = ::checkers::m[3][0] = ::checkers::m[3][2]
        }
        <4, 4> {
          pint^0 M value: ?
          pint^0 N value: ?
          bool^2 m with indices: {
          }
            unrolled indices: {
              [0][0] = ::checkers::m[0][2] (1) 
              [0][1] = ::checkers::m[0][3] (2) 
              [0][2] = ::checkers::m[2][0] (1) 
              [0][3] = ::checkers::m[3][0] (2) 
              [1][0] = ::checkers::m[1][2] (2) 
              [1][1] = ::checkers::m[1][3] (1) 
              [1][2] = ::checkers::m[0][1] (2) 
              [1][3] = ::checkers::m[0][0] (1) 
              [2][0] = ::checkers::m[3][1] (1) 
              [2][1] = ::checkers::m[3][2] (2) 
              [2][2] = ::checkers::m[3][3] (1) 
              [2][3] = ::checkers::m[2][1] (2) 
              [3][0] = ::checkers::m[2][3] (2) 
              [3][1] = ::checkers::m[2][2] (1) 
              [3][2] = ::checkers::m[1][0] (2) 
              [3][3] = ::checkers::m[1][1] (1) 
            }
          bool instance pool:
          1	::checkers::m[0][0]
          2	::checkers::m[0][1]
          bool port aliases:
          1: ::checkers::m[0][0] = ::checkers::m[0][2] = ::checkers::m[1][1] = ::checkers::m[1][3] = ::checkers::m[2][0] = ::checkers::m[2][2] = ::checkers::m[3][1] = ::checkers::m[3][3]
          2: ::checkers::m[0][1] = ::checkers::m[0][3] = ::checkers::m[1][0] = ::checkers::m[1][2] = ::checkers::m[2][1] = ::checkers::m[2][3] = ::checkers::m[3][0] = ::checkers::m[3][2]
        }
      }
      }

  Instances:
    a = process checkers<3, 3>^0 a (instantiated) = ::a (1) (
      bool^2 m with indices: {
        [0..::checkers::M-1][0..::checkers::N-1]
      }
        unrolled indices: {
          [0][0] = ::a.m[0][2] (1) 
          [0][1] = ::a.m[1][0] (2) 
          [0][2] = ::a.m[1][1] (1) 
          [1][0] = ::a.m[1][2] (2) 
          [1][1] = ::a.m[2][0] (1) 
          [1][2] = ::a.m[2][1] (2) 
          [2][0] = ::a.m[2][2] (1) 
          [2][1] = ::a.m[0][1] (2) 
          [2][2] = ::a.m[0][0] (1) 
        }
    )
    b = process checkers<3, 4>^0 b (instantiated) = ::b (2) (
      bool^2 m with indices: {
        [0..::checkers::M-1][0..::checkers::N-1]
      }
        unrolled indices: {
          [0][0] = ::b.m[0][2] (3) 
          [0][1] = ::b.m[0][3] (4) 
          [0][2] = ::b.m[1][1] (3) 
          [0][3] = ::b.m[1][0] (4) 
          [1][0] = ::b.m[1][2] (4) 
          [1][1] = ::b.m[1][3] (3) 
          [1][2] = ::b.m[2][1] (4) 
          [1][3] = ::b.m[2][0] (3) 
          [2][0] = ::b.m[2][2] (3) 
          [2][1] = ::b.m[2][3] (4) 
          [2][2] = ::b.m[0][0] (3) 
          [2][3] = ::b.m[0][1] (4) 
        }
    )
    c = process checkers<4, 3>^0 c (instantiated) = ::c (3) (
      bool^2 m with indices: {
        [0..::checkers::M-1][0..::checkers::N-1]
      }
        unrolled indices: {
          [0][0] = ::c.m[0][2] (5) 
          [0][1] = ::c.m[1][0] (6) 
          [0][2] = ::c.m[1][1] (5) 
          [1][0] = ::c.m[1][2] (6) 
          [1][1] = ::c.m[2][0] (5) 
          [1][2] = ::c.m[2][1] (6) 
          [2][0] = ::c.m[2][2] (5) 
          [2][1] = ::c.m[3][0] (6) 
          [2][2] = ::c.m[3][1] (5) 
          [3][0] = ::c.m[3][2] (6) 
          [3][1] = ::c.m[0][0] (5) 
          [3][2] = ::c.m[0][1] (6) 
        }
    )
    d = process checkers<4, 4>^0 d (instantiated) = ::d (4) (
      bool^2 m with indices: {
        [0..::checkers::M-1][0..::checkers::N-1]
      }
        unrolled indices: {
          [0][0] = ::d.m[0][2] (7) 
          [0][1] = ::d.m[0][3] (8) 
          [0][2] = ::d.m[1][1] (7) 
          [0][3] = ::d.m[1][0] (8) 
          [1][0] = ::d.m[1][2] (8) 
          [1][1] = ::d.m[1][3] (7) 
          [1][2] = ::d.m[2][1] (8) 
          [1][3] = ::d.m[2][0] (7) 
          [2][0] = ::d.m[2][2] (7) 
          [2][1] = ::d.m[2][3] (8) 
          [2][2] = ::d.m[3][1] (7) 
          [2][3] = ::d.m[3][0] (8) 
          [3][0] = ::d.m[3][2] (8) 
          [3][1] = ::d.m[3][3] (7) 
          [3][2] = ::d.m[0][1] (8) 
          [3][3] = ::d.m[0][0] (7) 
        }
    )
}

Created state:
process instance pool:
1	::a
2	::b
3	::c
4	::d
bool instance pool:
1	::a.m[0][0]
2	::a.m[0][1]
3	::b.m[0][0]
4	::b.m[0][1]
5	::c.m[0][0]
6	::c.m[0][1]
7	::d.m[0][0]
8	::d.m[0][1]

