
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	4	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	10	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	12	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	13	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	14	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	354
	18	##ADDR##	procdefn	0	#HEAD#	#TAIL#	86
	19	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	20	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	21	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	22	##ADDR##	footprnt	0	#HEAD#	#TAIL#	278
	23	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	24	##ADDR##	procdefn	0	#HEAD#	#TAIL#	92
	25	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	26	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	27	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	29	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	30	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	31	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	32	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	33	##ADDR##	loopscop	0	#HEAD#	#TAIL#	24
	34	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	35	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	20
	37	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	38	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	40	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	41	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	43	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	45	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	46	##ADDR##	footprnt	0	#HEAD#	#TAIL#	444
	47	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	49	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	50	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	51	##ADDR##	footprnt	0	#HEAD#	#TAIL#	292
	52	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    ch1of = process-definition (defined) ch1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch1of", we have: {
      Parameters:
        N = pint<> ch1of::N
      Instances:
        d = bool<> ch1of::d^1
      unroll sequence: 
        bool<> d[0..N-1]
      footprint collection: {
        <4> {
          N = pint^0 value: 4
          d = bool^1
            {
              [0] = ch1of::d[0] (1) 
              [1] = ch1of::d[1] (2) 
              [2] = ch1of::d[2] (3) 
              [3] = ch1of::d[3] (4) 
            }
          Created state:
          bool instance pool:
          1	ch1of::d[0]
          2	ch1of::d[1]
          3	ch1of::d[2]
          4	ch1of::d[3]
        }
      }
      }

    dcelm = process-definition (defined) dcelm(
        bool<> a
      )
      In definition "dcelm", we have: {
      Instances:
        a = bool<> dcelm::a
      unroll sequence: 
        bool<> a
      footprint: {
        a = bool^0 = dcelm::a (1) 
        Created state:
        bool instance pool:
        1	dcelm::a
      }
      }

    lut = process-definition (defined) lut(
      )
      In definition "lut", we have: {
      Instances:
        ad = ch1of<4> lut::ad
        ce = dcelm<> lut::ce^1
      unroll sequence: 
        ch1of<4> ad
        dcelm<> ce[0..0]
        (;b:[0..0]:
          ce[$b] (ad.d[$b/4]);
        )
      footprint: {
        ad = process ch1of<4>^0 = lut::ad (1) (
          d = bool^1
            {
              [0] = lut::ad.d[0] (1) 
              [1] = lut::ad.d[1] (2) 
              [2] = lut::ad.d[2] (3) 
              [3] = lut::ad.d[3] (4) 
            }
        )
        ce = process dcelm<>^1
          {
            [0] = lut::ce[0] (2) (
              a = bool^0 = lut::ad.d[0] (1) 
            )
          }
        Created state:
        process instance pool:
        1	lut::ad
        2	lut::ce[0]
        bool instance pool:
        1	lut::ad.d[0]
        2	lut::ad.d[1]
        3	lut::ad.d[2]
        4	lut::ad.d[3]
      }
      }

  Instances:
    l = lut<> l
}

footprint: {
  l = process lut<>^0 = l (1) 
  Created state:
  process instance pool:
  1	l
}
