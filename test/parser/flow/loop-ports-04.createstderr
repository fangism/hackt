
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	36
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	98
	4	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	portscop	0	#HEAD#	#TAIL#	16
	8	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	11	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	12	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	13	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	14	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	15	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	16	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	17	##ADDR##	footprnt	0	#HEAD#	#TAIL#	358
	18	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	19	##ADDR##	procdefn	0	#HEAD#	#TAIL#	102
	20	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	21	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	22	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	23	##ADDR##	portscop	0	#HEAD#	#TAIL#	24
	24	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	25	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	26	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	27	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	28	##ADDR##	footprnt	0	#HEAD#	#TAIL#	314
	29	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	30	##ADDR##	procdefn	0	#HEAD#	#TAIL#	88
	31	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	32	##ADDR##	procplch	0	#HEAD#	#TAIL#	26
	33	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	34	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	35	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	loopscop	0	#HEAD#	#TAIL#	28
	37	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	38	##ADDR##	cnstrng_	0	#HEAD#	#TAIL#	16
	39	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	40	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	41	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	42	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	43	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	45	##ADDR##	prcprtcn	0	#HEAD#	#TAIL#	28
	46	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	47	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	48	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	50	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	52	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	53	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	54	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	55	##ADDR##	mdbolref	0	#HEAD#	#TAIL#	20
	56	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	57	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	58	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	59	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	60	##ADDR##	sprcmref	0	#HEAD#	#TAIL#	16
	61	##ADDR##	footprnt	0	#HEAD#	#TAIL#	2231
	62	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12
	64	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	65	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	66	##ADDR##	footprnt	0	#HEAD#	#TAIL#	296
	67	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	12

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  1 instantiation-collections
  0 sub-namespaces
  3 definitions
  0 typedefs
  Definitions:
    ch1of = process-definition (defined) ch1of<
      pint<> N
      >(
        bool<> d[0..N-1]
      )
      In definition "ch1of", we have: {
      Parameters:
        N = pint<> ch1of::N
      Instances:
        d = bool<> ch1of::d^1
      unroll sequence: 
        ports: (
          bool<> d[0..N-1]
        )
      footprint collection: {
        <4> {
          N = pint^0 value: 4
          d = bool^1
            {
              [0] = ch1of<4>::d[0] (1) 
              [1] = ch1of<4>::d[1] (2) 
              [2] = ch1of<4>::d[2] (3) 
              [3] = ch1of<4>::d[3] (4) 
            }
          Created state:
          bool instance pool:
          1	ch1of<4>::d[0]
          2	ch1of<4>::d[1]
          3	ch1of<4>::d[2]
          4	ch1of<4>::d[3]
        }
      }
      }

    dcelm = process-definition (defined) dcelm(
        bool<> a
        bool<> b
        bool<> c
      )
      In definition "dcelm", we have: {
      Instances:
        a = bool<> dcelm::a
        b = bool<> dcelm::b
        c = bool<> dcelm::c
      unroll sequence: 
        ports: (
          bool<> a
          bool<> b
          bool<> c
        )
      footprint: {
        a = bool^0 = dcelm<>::a (1) 
        b = bool^0 = dcelm<>::b (2) 
        c = bool^0 = dcelm<>::c (3) 
        Created state:
        bool instance pool:
        1	dcelm<>::a
        2	dcelm<>::b
        3	dcelm<>::c
      }
      }

    lut = process-definition (defined) lut(
      )
      In definition "lut", we have: {
      Instances:
        ad = ch1of<4> lut::ad
        ce = dcelm<> lut::ce^1
      unroll sequence: 
        ch1of<4> ad
        (;b:[0..15]:
          dcelm<> ce[$b..$b]
          ce[$b] (ad.d[$b/4], ad.d[$b%4], );
        )
      footprint: {
        ad = process ch1of<4>^0 = lut<>::ad (1) (
          d = bool^1
            {
              [0] = lut<>::ad.d[0] (1) 
              [1] = lut<>::ad.d[1] (2) 
              [2] = lut<>::ad.d[2] (3) 
              [3] = lut<>::ad.d[3] (4) 
            }
        )
        ce = process dcelm<>^1
          {
            [0] = lut<>::ce[0] (2) (
              a = bool^0 = lut<>::ad.d[0] (1) 
              b = bool^0 = lut<>::ad.d[0] (1) 
              c = bool^0 = lut<>::ce[0].c (5) 
            )
            [1] = lut<>::ce[1] (3) (
              a = bool^0 = lut<>::ad.d[0] (1) 
              b = bool^0 = lut<>::ad.d[1] (2) 
              c = bool^0 = lut<>::ce[1].c (6) 
            )
            [2] = lut<>::ce[2] (4) (
              a = bool^0 = lut<>::ad.d[0] (1) 
              b = bool^0 = lut<>::ad.d[2] (3) 
              c = bool^0 = lut<>::ce[2].c (7) 
            )
            [3] = lut<>::ce[3] (5) (
              a = bool^0 = lut<>::ad.d[0] (1) 
              b = bool^0 = lut<>::ad.d[3] (4) 
              c = bool^0 = lut<>::ce[3].c (8) 
            )
            [4] = lut<>::ce[4] (6) (
              a = bool^0 = lut<>::ad.d[1] (2) 
              b = bool^0 = lut<>::ad.d[0] (1) 
              c = bool^0 = lut<>::ce[4].c (9) 
            )
            [5] = lut<>::ce[5] (7) (
              a = bool^0 = lut<>::ad.d[1] (2) 
              b = bool^0 = lut<>::ad.d[1] (2) 
              c = bool^0 = lut<>::ce[5].c (10) 
            )
            [6] = lut<>::ce[6] (8) (
              a = bool^0 = lut<>::ad.d[1] (2) 
              b = bool^0 = lut<>::ad.d[2] (3) 
              c = bool^0 = lut<>::ce[6].c (11) 
            )
            [7] = lut<>::ce[7] (9) (
              a = bool^0 = lut<>::ad.d[1] (2) 
              b = bool^0 = lut<>::ad.d[3] (4) 
              c = bool^0 = lut<>::ce[7].c (12) 
            )
            [8] = lut<>::ce[8] (10) (
              a = bool^0 = lut<>::ad.d[2] (3) 
              b = bool^0 = lut<>::ad.d[0] (1) 
              c = bool^0 = lut<>::ce[8].c (13) 
            )
            [9] = lut<>::ce[9] (11) (
              a = bool^0 = lut<>::ad.d[2] (3) 
              b = bool^0 = lut<>::ad.d[1] (2) 
              c = bool^0 = lut<>::ce[9].c (14) 
            )
            [10] = lut<>::ce[10] (12) (
              a = bool^0 = lut<>::ad.d[2] (3) 
              b = bool^0 = lut<>::ad.d[2] (3) 
              c = bool^0 = lut<>::ce[10].c (15) 
            )
            [11] = lut<>::ce[11] (13) (
              a = bool^0 = lut<>::ad.d[2] (3) 
              b = bool^0 = lut<>::ad.d[3] (4) 
              c = bool^0 = lut<>::ce[11].c (16) 
            )
            [12] = lut<>::ce[12] (14) (
              a = bool^0 = lut<>::ad.d[3] (4) 
              b = bool^0 = lut<>::ad.d[0] (1) 
              c = bool^0 = lut<>::ce[12].c (17) 
            )
            [13] = lut<>::ce[13] (15) (
              a = bool^0 = lut<>::ad.d[3] (4) 
              b = bool^0 = lut<>::ad.d[1] (2) 
              c = bool^0 = lut<>::ce[13].c (18) 
            )
            [14] = lut<>::ce[14] (16) (
              a = bool^0 = lut<>::ad.d[3] (4) 
              b = bool^0 = lut<>::ad.d[2] (3) 
              c = bool^0 = lut<>::ce[14].c (19) 
            )
            [15] = lut<>::ce[15] (17) (
              a = bool^0 = lut<>::ad.d[3] (4) 
              b = bool^0 = lut<>::ad.d[3] (4) 
              c = bool^0 = lut<>::ce[15].c (20) 
            )
          }
        Created state:
        process instance pool:
        1	lut<>::ad
        2	lut<>::ce[0]
        3	lut<>::ce[1]
        4	lut<>::ce[2]
        5	lut<>::ce[3]
        6	lut<>::ce[4]
        7	lut<>::ce[5]
        8	lut<>::ce[6]
        9	lut<>::ce[7]
        10	lut<>::ce[8]
        11	lut<>::ce[9]
        12	lut<>::ce[10]
        13	lut<>::ce[11]
        14	lut<>::ce[12]
        15	lut<>::ce[13]
        16	lut<>::ce[14]
        17	lut<>::ce[15]
        bool instance pool:
        1	lut<>::ad.d[0]
        2	lut<>::ad.d[1]
        3	lut<>::ad.d[2]
        4	lut<>::ad.d[3]
        5	lut<>::ce[0].c
        6	lut<>::ce[1].c
        7	lut<>::ce[2].c
        8	lut<>::ce[3].c
        9	lut<>::ce[4].c
        10	lut<>::ce[5].c
        11	lut<>::ce[6].c
        12	lut<>::ce[7].c
        13	lut<>::ce[8].c
        14	lut<>::ce[9].c
        15	lut<>::ce[10].c
        16	lut<>::ce[11].c
        17	lut<>::ce[12].c
        18	lut<>::ce[13].c
        19	lut<>::ce[14].c
        20	lut<>::ce[15].c
      }
      }

  Instances:
    l = lut<> l
}

footprint: {
  l = process lut<>^0 = l (1) 
  Created state:
  process instance pool:
  1	l
}
