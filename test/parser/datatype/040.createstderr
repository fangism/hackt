
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	146
	4	##ADDR##	pboolplh	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pboolins	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	8	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	9	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	10	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	11	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	12	##ADDR##	crnglst_	0	#HEAD#	#TAIL#	20
	13	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	14	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	15	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	16	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	17	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	18	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	21	##ADDR##	dbalias_	0	#HEAD#	#TAIL#	20
	22	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	23	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	24	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	25	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	26	##ADDR##	SPCdcond	0	#HEAD#	#TAIL#	28
	27	##ADDR##	pbolunry	0	#HEAD#	#TAIL#	13
	28	##ADDR##	spbmvref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	SPCinvar	0	#HEAD#	#TAIL#	12
	30	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	31	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	32	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	33	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	34	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	36	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	37	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	38	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	39	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	40	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	41	##ADDR##	PRSand__	0	#HEAD#	#TAIL#	20
	42	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	43	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	44	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	45	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	46	##ADDR##	PRSnot__	0	#HEAD#	#TAIL#	12
	47	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	48	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	49	##ADDR##	cindlst_	0	#HEAD#	#TAIL#	16
	50	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	51	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	52	##ADDR##	footprnt	0	#HEAD#	#TAIL#	452
	53	##ADDR##	cnstpb__	0	#HEAD#	#TAIL#	9
	54	##ADDR##	footprnt	0	#HEAD#	#TAIL#	339
	55	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	56	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	57	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	58	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	59	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	60	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	61	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	62	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	63	##ADDR##	footprnt	0	#HEAD#	#TAIL#	540
	64	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	65	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    s1of2 = process-definition (defined) s1of2<
      pbool<> B
      >(
        bool<> d[0..1]
        bool<> t
        bool<> f
      )
      In definition "s1of2", we have: {
      Parameters:
        B = pbool<> s1of2::B
      Instances:
        d = bool<> s1of2::d^1
        f = bool<> s1of2::f
        t = bool<> s1of2::t
      unroll sequence: 
        bool<> d[0..1]
        bool<> t
        bool<> f
        d[0] = f;
        d[1] = t;
      spec:
        [ ~B ->
          $((~d[0] & d[1]) | (d[0] & ~d[1]))
        ]
      footprint collection: {
        <false> {
          B = pbool^0 value: 0
          d = bool^1
            {
              [0] = s1of2::f (2) 
              [1] = s1of2::t (1) 
            }
          f = bool^0 = s1of2::f (2) 
          t = bool^0 = s1of2::t (1) 
          Created state:
          bool instance pool:
          1	s1of2::t
          2	s1of2::f
          bool port aliases:
          1: s1of2::t = s1of2::d[1]
          2: s1of2::f = s1of2::d[0]
          invariant exprs: 
          $((~f & t) | (f & ~t))
        }
        <true> {
          B = pbool^0 value: 1
          d = bool^1
            {
              [0] = s1of2::f (2) 
              [1] = s1of2::t (1) 
            }
          f = bool^0 = s1of2::f (2) 
          t = bool^0 = s1of2::t (1) 
          Created state:
          bool instance pool:
          1	s1of2::t
          2	s1of2::f
          bool port aliases:
          1: s1of2::t = s1of2::d[1]
          2: s1of2::f = s1of2::d[0]
        }
      }
      }

  Instances:
    x = s1of2<false> x
    y = s1of2<true> y
}

footprint: {
  x = process s1of2<false>^0 = x (1) (
    d = bool^1
      {
        [0] = x.d[0] (1) 
        [1] = x.d[1] (2) 
      }
    t = bool^0 = x.d[1] (2) 
    f = bool^0 = x.d[0] (1) 
  )
  y = process s1of2<true>^0 = y (2) (
    d = bool^1
      {
        [0] = y.d[0] (3) 
        [1] = y.d[1] (4) 
      }
    t = bool^0 = y.d[1] (4) 
    f = bool^0 = y.d[0] (3) 
  )
  Created state:
  process instance pool:
  1	x
  2	y
  bool instance pool:
  1	x.d[0]
  2	x.d[1]
  3	y.d[0]
  4	y.d[1]
}
