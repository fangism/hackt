
Persistent Object Manager text dump: 
	i	addr		type		arg	head	tail	size
	0	##ADDR##	________	0	#HEAD#	#TAIL#	0
	1	##ADDR##	module__	0	#HEAD#	#TAIL#	##SIZE##
	2	##ADDR##	namespc_	0	#HEAD#	#TAIL#	32
	3	##ADDR##	procdefn	0	#HEAD#	#TAIL#	114
	4	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	5	##ADDR##	pintinst	0	#HEAD#	#TAIL#	16
	6	##ADDR##	dboolplh	0	#HEAD#	#TAIL#	25
	7	##ADDR##	datainst	0	#HEAD#	#TAIL#	20
	8	##ADDR##	datatprf	0	#HEAD#	#TAIL#	20
	9	##ADDR##	datadefn	0	#HEAD#	#TAIL#	69
	10	##ADDR##	drnglst_	0	#HEAD#	#TAIL#	16
	11	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	12	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	13	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	14	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	15	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	16	##ADDR##	SPCdloop	0	#HEAD#	#TAIL#	24
	17	##ADDR##	pintplch	0	#HEAD#	#TAIL#	29
	18	##ADDR##	dynrng__	0	#HEAD#	#TAIL#	16
	19	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	20	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	21	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	22	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	23	##ADDR##	SPCinvar	0	#HEAD#	#TAIL#	12
	24	##ADDR##	PRSor___	0	#HEAD#	#TAIL#	20
	25	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	26	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	27	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	28	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	29	##ADDR##	PRSlitrl	0	#HEAD#	#TAIL#	16
	30	##ADDR##	sdbmiref	0	#HEAD#	#TAIL#	16
	31	##ADDR##	dindlst_	0	#HEAD#	#TAIL#	16
	32	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	33	##ADDR##	piarthex	0	#HEAD#	#TAIL#	17
	34	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	35	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	36	##ADDR##	spimvref	0	#HEAD#	#TAIL#	16
	37	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	38	##ADDR##	footprnt	0	#HEAD#	#TAIL#	467
	39	##ADDR##	cnstpi__	0	#HEAD#	#TAIL#	12
	40	##ADDR##	footprnt	0	#HEAD#	#TAIL#	526
	41	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	42	##ADDR##	procplch	0	#HEAD#	#TAIL#	25
	43	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	44	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	45	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	46	##ADDR##	procinst	0	#HEAD#	#TAIL#	20
	47	##ADDR##	proctprf	0	#HEAD#	#TAIL#	20
	48	##ADDR##	dprmlst_	0	#HEAD#	#TAIL#	16
	49	##ADDR##	footprnt	0	#HEAD#	#TAIL#	464
	50	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16
	51	##ADDR##	cprmlst_	0	#HEAD#	#TAIL#	16

In module created from: ##FILE## (unrolled) (created)
In namespace "", we have: {
  0 parameter-collections
  2 instantiation-collections
  0 sub-namespaces
  1 definitions
  0 typedefs
  Definitions:
    s1of2 = process-definition (defined) s1of2<
      pint<> B
      >(
        bool<> d[0..B-1]
      )
      In definition "s1of2", we have: {
      Parameters:
        B = pint<> s1of2::B
      Instances:
        d = bool<> s1of2::d^1
      unroll sequence: 
        bool<> d[0..B-1]
      spec:
        (:i:[0..B-1]:
          $(d[$i] | d[($i+1)%B])
        )
      footprint collection: {
        <3> {
          B = pint^0 value: 3
          d = bool^1
            {
              [0] = s1of2::d[0] (1) 
              [1] = s1of2::d[1] (2) 
              [2] = s1of2::d[2] (3) 
            }
          Created state:
          bool instance pool:
          1	s1of2::d[0]
          2	s1of2::d[1]
          3	s1of2::d[2]
          invariant exprs: 
          $(d[0] | d[1])
          $(d[1] | d[2])
          $(d[2] | d[0])
        }
        <4> {
          B = pint^0 value: 4
          d = bool^1
            {
              [0] = s1of2::d[0] (1) 
              [1] = s1of2::d[1] (2) 
              [2] = s1of2::d[2] (3) 
              [3] = s1of2::d[3] (4) 
            }
          Created state:
          bool instance pool:
          1	s1of2::d[0]
          2	s1of2::d[1]
          3	s1of2::d[2]
          4	s1of2::d[3]
          invariant exprs: 
          $(d[0] | d[1])
          $(d[1] | d[2])
          $(d[2] | d[3])
          $(d[3] | d[0])
        }
      }
      }

  Instances:
    x = s1of2<3> x
    y = s1of2<4> y
}

footprint: {
  x = process s1of2<3>^0 = x (1) (
    d = bool^1
      {
        [0] = x.d[0] (1) 
        [1] = x.d[1] (2) 
        [2] = x.d[2] (3) 
      }
  )
  y = process s1of2<4>^0 = y (2) (
    d = bool^1
      {
        [0] = y.d[0] (4) 
        [1] = y.d[1] (5) 
        [2] = y.d[2] (6) 
        [3] = y.d[3] (7) 
      }
  )
  Created state:
  process instance pool:
  1	x
  2	y
  bool instance pool:
  1	x.d[0]
  2	x.d[1]
  3	x.d[2]
  4	y.d[0]
  5	y.d[1]
  6	y.d[2]
  7	y.d[3]
}
