time should be 0 
time: 0
time should still be 0 
time: 0
setting 'a-' and letting propagate 
expect to see a- in queue 
event queue:
	0	a : 0
	0	a : 0
	10	b : 1	[by a:=0]
expect to see c- in queue, b+ just happened 
event queue:
	20	c : 0	[from b:=1]
	20	c : 0	[by b:=1]
queue should be empty after step 
event queue:
time should be 20 
time: 20
setting 'a+' and letting propagate 
expect to see a+ in queue 
event queue:
	20	a : 1
	20	a : 1
	30	b : 0	[by a:=1]
expect to see c+ in queue, b- just happened 
event queue:
	40	c : 1	[from b:=0]
	40	c : 1	[by b:=0]
queue should be empty after step 
event queue:
time should be 40 
time: 40
setting 'a' to X and letting propagate 
expect to see a : X in queue 
event queue:
	40	a : X
expecting weak interference of X vs. X on b, propagating to c 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
	40	a : X
WARNING: weak-interference `c'
>> cause: `b' (val: X)
	50	b : X	[by a:=X]
expect to see c:x in queue, b:x just happened 
event queue:
	60	c : X	[from b:=X]
	60	c : X	[by b:=X]
queue should be empty after step 
event queue:
time should be 60 
time: 60
now testing cycle commands 
	60	a : 0
	70	b : 1	[by a:=0]
	80	c : 0	[by b:=1]
time should be 80, queue should be empty 
time: 80
event queue:
	80	a : 1
	90	b : 0	[by a:=1]
	100	c : 1	[by b:=0]
time should be 100, queue should be empty 
time: 100
event queue:
expecting weak interference, of course 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
	100	a : X
WARNING: weak-interference `c'
>> cause: `b' (val: X)
	110	b : X	[by a:=X]
	120	c : X	[by b:=X]
time should be 120, queue should be empty 
time: 120
event queue:
re-initializing should keep the simulator watchall mode 
time should be 0 
time: 0
time should still be 0 
time: 0
setting 'a-' and letting propagate 
expect to see a- in queue 
event queue:
	0	a : 0
	0	a : 0
	10	b : 1	[by a:=0]
expect to see c- in queue, b+ just happened 
event queue:
	20	c : 0	[from b:=1]
	20	c : 0	[by b:=1]
queue should be empty after step 
event queue:
time should be 20 
time: 20
setting 'a+' and letting propagate 
expect to see a+ in queue 
event queue:
	20	a : 1
	20	a : 1
	30	b : 0	[by a:=1]
expect to see c+ in queue, b- just happened 
event queue:
	40	c : 1	[from b:=0]
	40	c : 1	[by b:=0]
queue should be empty after step 
event queue:
time should be 40 
time: 40
setting 'a' to X and letting propagate 
expect to see a : X in queue 
event queue:
	40	a : X
expecting weak interference of X vs. X on b, propagating to c 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
	40	a : X
WARNING: weak-interference `c'
>> cause: `b' (val: X)
	50	b : X	[by a:=X]
expect to see c:x in queue, b:x just happened 
event queue:
	60	c : X	[from b:=X]
	60	c : X	[by b:=X]
queue should be empty after step 
event queue:
time should be 60 
time: 60
now testing cycle commands 
	60	a : 0
	70	b : 1	[by a:=0]
	80	c : 0	[by b:=1]
time should be 80, queue should be empty 
time: 80
event queue:
	80	a : 1
	90	b : 0	[by a:=1]
	100	c : 1	[by b:=0]
time should be 100, queue should be empty 
time: 100
event queue:
expecting weak interference, of course 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
	100	a : X
WARNING: weak-interference `c'
>> cause: `b' (val: X)
	110	b : X	[by a:=X]
	120	c : X	[by b:=X]
time should be 120, queue should be empty 
time: 120
event queue:
time should be 0 
time: 0
time should still be 0 
time: 0
setting 'a-' and letting propagate 
expect to see a- in queue 
event queue:
	0	a : 0
expect to see c- in queue, b+ just happened 
event queue:
	20	c : 0	[from b:=1]
queue should be empty after step 
event queue:
time should be 20 
time: 20
setting 'a+' and letting propagate 
expect to see a+ in queue 
event queue:
	20	a : 1
expect to see c+ in queue, b- just happened 
event queue:
	40	c : 1	[from b:=0]
queue should be empty after step 
event queue:
time should be 40 
time: 40
setting 'a' to X and letting propagate 
expect to see a : X in queue 
event queue:
	40	a : X
expecting weak interference of X vs. X on b, propagating to c 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
WARNING: weak-interference `c'
>> cause: `b' (val: X)
expect to see c:x in queue, b:x just happened 
event queue:
	60	c : X	[from b:=X]
queue should be empty after step 
event queue:
time should be 60 
time: 60
now testing cycle commands 
time should be 80, queue should be empty 
time: 80
event queue:
time should be 100, queue should be empty 
time: 100
event queue:
expecting weak interference, of course 
WARNING: weak-interference `b'
>> cause: `a' (val: X)
WARNING: weak-interference `c'
>> cause: `b' (val: X)
time should be 120, queue should be empty 
time: 120
event queue:
