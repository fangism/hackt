`include "standard-reverse.v"

// vi: syntax=verilog
// This file is automatically generated by wrap_verilog_modules_to_hacprsim.awk, maintained by David Fang.

module HAC_AND2 #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input A1,
	input A2,
	output Z
);
	integer _i_;
	reg [64*8:1] verilog_name, tmp;
initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".A1"}, {prsim_name, ".A1"});
	$to_prsim({verilog_name, ".A2"}, {prsim_name, ".A2"});
	$from_prsim({prsim_name, ".Z"}, {verilog_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_AND_N #(
	parameter input_size = 2,
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input [input_size-1:0] A,
	output Z
);
	integer _i_;
	reg [64*8:1] verilog_name, tmp;
initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	$sformat(verilog_name, "%m");
	for (_i_=0; _i_<=input_size-1; _i_=_i_+1) begin
		$sformat(tmp, ".A[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for
	$from_prsim({prsim_name, ".Z"}, {verilog_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_OR2 #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input A1,
	input A2,
	output Z
);
	integer _i_;
	reg [64*8:1] verilog_name, tmp;
initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".A1"}, {prsim_name, ".A1"});
	$to_prsim({verilog_name, ".A2"}, {prsim_name, ".A2"});
	$from_prsim({prsim_name, ".Z"}, {verilog_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_bus_array_test #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input CLK,
	input A,
	input [3:0] B,
	input [7:0] C,
	input [31:0] D,
	output E,
	output [3:0] F,
	output [7:0] G,
	output [31:0] H
);
	integer _i_;
	reg [64*8:1] verilog_name, tmp;
initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".CLK"}, {prsim_name, ".CLK"});
	$to_prsim({verilog_name, ".A"}, {prsim_name, ".A"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".B[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for
	for (_i_=0; _i_<=7; _i_=_i_+1) begin
		$sformat(tmp, ".C[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for
	for (_i_=0; _i_<=31; _i_=_i_+1) begin
		$sformat(tmp, ".D[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for
	$from_prsim({prsim_name, ".E"}, {verilog_name, ".E"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".F[%d]", _i_);
		$from_prsim({prsim_name, tmp}, {verilog_name, tmp});
	end // end for
	for (_i_=0; _i_<=7; _i_=_i_+1) begin
		$sformat(tmp, ".G[%d]", _i_);
		$from_prsim({prsim_name, tmp}, {verilog_name, tmp});
	end // end for
	for (_i_=0; _i_<=31; _i_=_i_+1) begin
		$sformat(tmp, ".H[%d]", _i_);
		$from_prsim({prsim_name, tmp}, {verilog_name, tmp});
	end // end for
	end // end if
end // end initial
endmodule

module HAC_wire_port_test #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input in_a,
	input [3:0] in_b,
	output [3:0] out_x
);
	integer _i_;
	reg [64*8:1] verilog_name, tmp;
initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".in_a"}, {prsim_name, ".in_a"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".in_b[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".out_x[%d]", _i_);
		$from_prsim({prsim_name, tmp}, {verilog_name, tmp});
	end // end for
	end // end if
end // end initial
endmodule

