`include "parse-test.v"

// vi: syntax=verilog
// This file is automatically generated by wrap_verilog_modules_to_hacprsim.awk, maintained by David Fang.
// options:
//	-v wrapper_prefix=HAC
//	-v max_strlen=256
//	-v wrapper_ports=0
//	-v reverse=0
//	-v debug=0
//	-v loopvar=_i_
//	-v output_format=verilog
//	-v repack_arrays=1

module HAC_T_001;
	parameter mode = "locked";
	parameter i_k_polarity = "rise";
	parameter i_k_dl = 0;
	parameter dmn = "";
	parameter data_is_reset = 0;
	parameter e_dls = 1;
	parameter ig_z_ack = 0;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire a;  // input
	wire ck;  // input
	wire en;  // input
	wire z_d0;  // output
	wire z_d1;  // output
	wire z_ack;  // input

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	T_001 #(mode, i_k_polarity, i_k_dl, dmn, data_is_reset, e_dls, ig_z_ack)
	dummy (
		.a ( a ),
		.ck ( ck ),
		.en ( en ),
		.z_d0 ( z_d0 ),
		.z_d1 ( z_d1 ),
		.z_ack ( z_ack )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".a"}, {verilog_name, ".a"});
	$from_prsim({prsim_name, ".ck"}, {verilog_name, ".ck"});
	$from_prsim({prsim_name, ".en"}, {verilog_name, ".en"});
	$to_prsim({verilog_name, ".z_d0"}, {prsim_name, ".z_d0"});
	$to_prsim({verilog_name, ".z_d1"}, {prsim_name, ".z_d1"});
	$from_prsim({prsim_name, ".z_ack"}, {verilog_name, ".z_ack"});
	end // end if
end // end initial
endmodule

