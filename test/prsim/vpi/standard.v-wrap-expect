`include "standard.v"

// vi: syntax=verilog
// This file is automatically generated by wrap_verilog_modules_to_hacprsim.awk, maintained by David Fang.
// options:
//	-v wrapper_prefix=HAC
//	-v max_strlen=256
//	-v wrapper_ports=0
//	-v reverse=0
//	-v debug=0
//	-v loopvar=_i_
//	-v output_format=verilog
//	-v repack_arrays=1

module HAC_INV;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire A;  // input
	wire Z;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	INV dummy (
		.A ( A ),
		.Z ( Z )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".A"}, {verilog_name, ".A"});
	$to_prsim({verilog_name, ".Z"}, {prsim_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_DELAY;
	parameter delay = 10;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire A;  // input
	wire Z;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	DELAY #(delay)
	dummy (
		.A ( A ),
		.Z ( Z )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".A"}, {verilog_name, ".A"});
	$to_prsim({verilog_name, ".Z"}, {prsim_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_AND2;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire A1;  // input
	wire A2;  // input
	wire Z;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	AND2 dummy (
		.A1 ( A1 ),
		.A2 ( A2 ),
		.Z ( Z )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".A1"}, {verilog_name, ".A1"});
	$from_prsim({prsim_name, ".A2"}, {verilog_name, ".A2"});
	$to_prsim({verilog_name, ".Z"}, {prsim_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_AND_N;
	parameter input_size = 2;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire [input_size-1:0] A;  // input
	wire Z;  // output

	integer _i_;
	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	AND_N #(input_size)
	dummy (
		.A ( A ),
		.Z ( Z )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	for (_i_=0; _i_<=input_size-1; _i_=_i_+1) begin
		$sformat(tmp, ".A[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	$to_prsim({verilog_name, ".Z"}, {prsim_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_OR2;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire A1;  // input
	wire A2;  // input
	wire Z;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	OR2 dummy (
		.A1 ( A1 ),
		.A2 ( A2 ),
		.Z ( Z )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".A1"}, {verilog_name, ".A1"});
	$from_prsim({prsim_name, ".A2"}, {verilog_name, ".A2"});
	$to_prsim({verilog_name, ".Z"}, {prsim_name, ".Z"});
	end // end if
end // end initial
endmodule

module HAC_POS_FLOP;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire CLK;  // input
	wire D;  // input
	wire Q;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	POS_FLOP dummy (
		.CLK ( CLK ),
		.D ( D ),
		.Q ( Q )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".CLK"}, {verilog_name, ".CLK"});
	$from_prsim({prsim_name, ".D"}, {verilog_name, ".D"});
	$to_prsim({verilog_name, ".Q"}, {prsim_name, ".Q"});
	end // end if
end // end initial
endmodule

module HAC_NEG_FLOP;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire CLK;  // input
	wire D;  // input
	wire Q;  // output

	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	NEG_FLOP dummy (
		.CLK ( CLK ),
		.D ( D ),
		.Q ( Q )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".CLK"}, {verilog_name, ".CLK"});
	$from_prsim({prsim_name, ".D"}, {verilog_name, ".D"});
	$to_prsim({verilog_name, ".Q"}, {prsim_name, ".Q"});
	end // end if
end // end initial
endmodule

module HAC_bus_array_test;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire CLK;  // input
	wire A;  // input
	wire [3:0] B;  // input
	wire [7:0] C;  // input
	wire [31:0] D;  // input
	wire E;  // output
	wire [3:0] F;  // output
	wire [7:0] G;  // output
	wire [31:0] H;  // output

	integer _i_;
	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	bus_array_test dummy (
		.CLK ( CLK ),
		.A ( A ),
		.B ( B ),
		.C ( C ),
		.D ( D ),
		.E ( E ),
		.F ( F ),
		.G ( G ),
		.H ( H )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".CLK"}, {verilog_name, ".CLK"});
	$from_prsim({prsim_name, ".A"}, {verilog_name, ".A"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".B[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=7; _i_=_i_+1) begin
		$sformat(tmp, ".C[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=31; _i_=_i_+1) begin
		$sformat(tmp, ".D[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	$to_prsim({verilog_name, ".E"}, {prsim_name, ".E"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".F[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=7; _i_=_i_+1) begin
		$sformat(tmp, ".G[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=31; _i_=_i_+1) begin
		$sformat(tmp, ".H[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	end // end if
end // end initial
endmodule

module HAC_wire_port_test;
	parameter prsim_name="";
// need not be reg with acc: wn:*
	wire in_a;  // input
	wire [3:0] in_b;  // input
	wire [3:0] out_x;  // output

	integer _i_;
	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

	wire_port_test dummy (
		.in_a ( in_a ),
		.in_b ( in_b ),
		.out_x ( out_x )
	);

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$from_prsim({prsim_name, ".in_a"}, {verilog_name, ".in_a"});
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".in_b[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".out_x[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	end // end if
end // end initial
endmodule

