`include "multidimensional-norepack.v"

// vi: syntax=verilog
// This file is automatically generated by wrap_verilog_modules_to_hacprsim.awk, maintained by David Fang.
// options:
//	-v wrapper_prefix=HAC
//	-v max_strlen=256
//	-v wrapper_ports=1
//	-v reverse=1
//	-v debug=0
//	-v loopvar=_i_
//	-v output_format=verilog
//	-v repack_arrays=0

module HAC_three_dee #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input CLK,
	input [7:0] A [0:2][0:3],
	output [4:0][5:0] B [0:1],
	input [2:0] C,
	output [2:0] D,
	input E [3:0],
	output F [3:0],
	input [3:0][2:0][1:0] G,
	output [3:0][2:0][1:0] H
);

	integer _i_;
	integer _i_2;
	integer _i_3;
	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".CLK"}, {prsim_name, ".CLK"});
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=3; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=7; _i_3=_i_3+1) begin
		$sformat(tmp, ".A[%d][%d][%d]", _i_, _i_2, _i_3);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=1; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=4; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=5; _i_3=_i_3+1) begin
		$sformat(tmp, ".B[%d][%d][%d]", _i_, _i_2, _i_3);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
		$sformat(tmp, ".C[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
		$sformat(tmp, ".D[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".E[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".F[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=2; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=1; _i_3=_i_3+1) begin
		$sformat(tmp, ".G[%d][%d][%d]", _i_, _i_2, _i_3);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=2; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=1; _i_3=_i_3+1) begin
		$sformat(tmp, ".H[%d][%d][%d]", _i_, _i_2, _i_3);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	end // end if
end // end initial
endmodule

module HAC_three_dee_alt #(
	parameter prsim_name=""
) (
// need not be reg with acc: wn:*
	input CLK,
	input [7:0] A [0:2][0:3],
	output [4:0][5:0] B [0:1],
	input [2:0] C,
	output [2:0] D,
	input E [3:0],
	output F [3:0],
	input [3:0][2:0][1:0] G,
	output [3:0][2:0][1:0] H
);

	integer _i_;
	integer _i_2;
	integer _i_3;
	reg [256*8:1] prsim_name_reg, verilog_name, tmp;

initial begin
#0	// happens *after* initial
	if (prsim_name != "") begin
	prsim_name_reg = prsim_name;
	$sformat(verilog_name, "%m");
	$to_prsim({verilog_name, ".CLK"}, {prsim_name, ".CLK"});
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=3; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=7; _i_3=_i_3+1) begin
		$sformat(tmp, ".A[%d][%d][%d]", _i_, _i_2, _i_3);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=1; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=4; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=5; _i_3=_i_3+1) begin
		$sformat(tmp, ".B[%d][%d][%d]", _i_, _i_2, _i_3);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
		$sformat(tmp, ".C[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=2; _i_=_i_+1) begin
		$sformat(tmp, ".D[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".E[%d]", _i_);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
		$sformat(tmp, ".F[%d]", _i_);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=2; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=1; _i_3=_i_3+1) begin
		$sformat(tmp, ".G[%d][%d][%d]", _i_, _i_2, _i_3);
		$to_prsim({verilog_name, tmp}, {prsim_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	for (_i_=0; _i_<=3; _i_=_i_+1) begin
	for (_i_2=0; _i_2<=2; _i_2=_i_2+1) begin
	for (_i_3=0; _i_3<=1; _i_3=_i_3+1) begin
		$sformat(tmp, ".H[%d][%d][%d]", _i_, _i_2, _i_3);
		$from_prsim({prsim_name_reg, tmp}, {verilog_name, tmp});
	end // end for _i_3
	end // end for _i_2
	end // end for _i_
	end // end if
end // end initial
endmodule

