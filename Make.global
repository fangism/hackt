# "Make.global"
#	vi: ft=automake
# Project-wide Makefile targets and dependencies.
# Generally, it is recommended to include this Makefile last.  
# This file may be used as an includable Makefile snippet, 
# or with automake for automatic inlining.  
# NOTE: standard definition macros appear in "Make.stddef" and should
# be included *before* the inclusion of this Makefile.  
# NOTE: the for-loop syntax used requires that SHELL = sh, not bash.
#	$Id: Make.global,v 1.35 2010/04/22 19:06:53 fang Exp $

# automatically runs autotools (and recursively in subdirectories)
reconf: force
	autoreconf

ALL_CVSIGNORE =

SKIP_TEST_SCRIPT = \
	$(ECHO) "Skipping $@ ..." ; \
	{ $(ECHO) $(SHELL_INTERPRETER) ; \
	  $(ECHO) "\# \"$@\"" ; \
	  $(ECHO) "exit 77" ;} > $@ ; \
	$(CHMOD) +x $@

DUMMY_TEST_SCRIPT = $(ECHO) "$(SHELL_INTERPRETER)" > $@ ; $(CHMOD) +x $@

# RECURSIVE_TARGETS =

# blatantly copied from Makefile.in, generated by automake
RECURSIVE_TARGET_SCRIPT = \
	failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

# always bottom-up and reverse order
# NOTE: this script needs to be prepended with '+' to connect jobserver
CLEAN_RECURSIVE_TARGET_SCRIPT = \
	set fnord $$MAKEFLAGS; amf=$$2; \
	list='$(SUBDIRS)'; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"

# demonstration of recursive target
MORE_RECURSIVE_TARGETS += pwd-recursive
pwd: pwd-recursive
pwd-am: pwd-local
pwd-local:
	@$(ECHO) "======== "`pwd`

if AUTO_CVSIGNORE
# .cvsignore for this project will always be semi-automatically generated
# .cvsignore is never needed for VPATH builds, duh!
$(srcdir)/.cvsignore: $(srcdir)/Makefile.am $(top_srcdir)/Make.global

# make cvsignore by default
ALL_CVSIGNORE += cvsignore-am

# phony recursive target
cvsignore-recursive: $(srcdir)/.cvsignore $(srcdir)/.gitignore force

cvsignore: cvsignore-recursive

cvsignore-am: $(srcdir)/.cvsignore $(srcdir)/.gitignore cvsignore-local

clean-cvsignore: clean-cvsignore-recursive

clean-cvsignore-am: clean-cvsignore-local
	-$(RM) $(srcdir)/.cvsignore $(srcdir)/.gitignore

PHONY_CVSIGNORE = clean-cvsignore-local clean-cvsignore-am cvsignore \
	clean-cvsignore cvsignore-local cvsignore-am

# automake doesn't like b/c RECURSIVE_TARGETS not defined early enough
MORE_RECURSIVE_TARGETS += cvsignore-recursive
MORE_CLEAN_RECURSIVE_TARGETS += clean-cvsignore-recursive

# DISTCLEANFILES += $(srcdir)/.cvsignore
else
cvsignore:
endif

all-local: $(ALL_CVSIGNORE)

MORE_RECURSIVE_TARGETS += build-check-recursive

build-check: build-check-recursive

build-check-am: build-check-local

build-check-local:

# convenient target for building subtree of the distribution
# not a recursive target
# this also clears out the target distribution directory first
distdir-subdir:
	top_distdir="$(top_builddir)/$(PACKAGE)-$(VERSION)" ; \
	distdir="$$top_distdir/$(subdir)" ; \
	until rm -fr $$distdir ; do : ; done ; \
	$(mkdir_p) $$distdir ; \
	$(MAKE) top_distdir="$$top_distdir" distdir="$$distdir" distdir ; \
	$(ECHO) "$$distdir ready for inspection."

# This target tells make to look exclusively in the srcdir for these files
# and copy them over to the distdir.
# This is needed because the EXTRA_DIST target sometimes finds unwanted files
# in the build directory.  (e.g. auto-generated empty files)
# $distdir is assumed passed in as Makefile variable already because it 
# is a dependency of dist-hook, which is a dependency of distdir.
# NOTE: this ignores files that are not found in the srcdir!
srcdir-distfiles: force
	list='$(srcdir_EXTRA_DIST)'; \
	for file in $$list ; do \
	  test ! -f $(srcdir)/$$file || cp -p $(srcdir)/$$file $(distdir) ; \
	done
#	for file in $$list ; do \
#	  case $$file in \
#	    $(srcdir)/*) cp $$file $(distdir) ;; \
#	    *) cp $(srcdir)/$$file $(distdir) ;; \
#	  esac ; \
#	done

dist-hook: srcdir-distfiles

DISTCLEANFILES += check.log cvsdiffs
DISTCLEANFILES += $(AUTO_DEPENDS)

cleandirs:
	test -z "$(CLEANDIRS)" || $(RM) -r $(CLEANDIRS)

clean-local: cleandirs

# $distdir is assumed passed in as Makefile variable
MORE_CLEAN_RECURSIVE_TARGETS += distclean-depend-recursive
distclean-depend: distclean-depend-recursive distclean-depend-am
distclean-depend-am: distclean-depend-local
distcleandirs:
	test -z "$(DISTCLEANDIRS)" || $(RM) -r $(DISTCLEANDIRS)

distclean-local: distcleandirs distclean-depend-local

# $distdir is assumed passed in as Makefile variable
dist-hook-autoclean:
	-cd $(distdir) && { test -z "$(DISTHOOK_CLEANFILES)" || $(RM) $(DISTHOOK_CLEANFILES) ;}

dist-hook: dist-hook-autoclean

# list of files to automatically CVS ignore, accumulated over Makefile
AUTO_IGNORE += .gdb_history .cvsignore .gitignore \
	Makefile.in Makefile make.log ignore backup temp \
	cvsdiffs gitdiffs-staged gitdiffs-cached \
	$(CLEANFILES) $(DISTCLEANFILES)

# echo makefile debugging
echo-extra-dist: force
	@$(ECHO) $(EXTRA_DIST)

echo-srcdir-extra-dist: force
	@$(ECHO) $(srcdir_EXTRA_DIST)

# list the automatically distributed files
echo-dist-common: force
	@$(ECHO) $(DIST_COMMON)

echo-distfiles: force
	@$(ECHO) $(DISTFILES)

echo-cleanfiles: force
	@$(ECHO) $(CLEANFILES)

echo-disthook-cleanfiles: force
	@$(ECHO) $(DISTHOOK_CLEANFILES)

echo-distcleanfiles: force
	@$(ECHO) $(DISTCLEANFILES)

echo-auto-ignore: force
	@$(ECHO) $(AUTO_IGNORE)

echo-config: force
	cd $(top_builddir) && ./config.status --version

echo-compile:
	@$(ECHO) $(COMPILE)

echo-cxxcompile:
	@$(ECHO) $(CXXCOMPILE)

echo-srcdir: force
	@$(ECHO) $(srcdir)

echo-top-srcdir: force
	@$(ECHO) $(top_srcdir)

echo-top-builddir: force
	@$(ECHO) $(top_builddir)

echo-subdir: force
	@$(ECHO) $(subdir)

echo-subdirs: force
	@$(ECHO) $(SUBDIRS)

echo-dist-subdirs: force
	@$(ECHO) $(DIST_SUBDIRS)

echo-build: force
	@$(ECHO) $(build)

echo-host: force
	@$(ECHO) $(host)

echo-program-transform-name: force
	@$(ECHO) $(program_transform_name)

echo-prefix: force
	@$(ECHO) $(prefix)

echo-exec-prefix: force
	@$(ECHO) $(exec_prefix)

echo-programs: force
	@$(ECHO) $(PROGRAMS)

echo-scripts: force
	@$(ECHO) $(SCRIPTS)

echo-data: force
	@$(ECHO) $(DATA)

echo-texinfos: force
	@$(ECHO) $(TEXINFOS)

echo-dvis: force
	@$(ECHO) $(DVIS)

echo-pdfs: force
	@$(ECHO) $(PDFS)

echo-pss: force
	@$(ECHO) $(PSS)

echo-htmls: force
	@$(ECHO) $(htmls)

echo-package: force
	@$(ECHO) $(PACKAGE)

echo-package-bugreport: force
	@$(ECHO) $(PACKAGE_BUGREPORT)

echo-package-version: force
	@$(ECHO) $(PACKAGE_VERSION)

echo-SUFFIXES: force
	@$(ECHO) $(SUFFIXES)

echo-LEX: force
	@$(ECHO) $(LEX)

echo-YACC: force
	@$(ECHO) $(YACC)

echo-AM_CFLAGS: force
	@$(ECHO) $(AM_CFLAGS)

echo-AM_CXXFLAGS: force
	@$(ECHO) $(AM_CXXFLAGS)

echo-AM_CPPFLAGS: force
	@$(ECHO) $(AM_CPPFLAGS)

echo-AM_LDFLAGS: force
	@$(ECHO) $(AM_LDFLAGS)

echo-CFLAGS: force
	@$(ECHO) $(CFLAGS)

echo-CXXFLAGS: force
	@$(ECHO) $(CXXFLAGS)

echo-CPPFLAGS: force
	@$(ECHO) $(CPPFLAGS)

echo-LDFLAGS: force
	@$(ECHO) $(LDFLAGS)

echo-LIBS: force
	@$(ECHO) $(LIBS)

# might as well include this for non-maintainers too
# again, can't append to file with cat redirection because distclean
# sets permissions of new files as read-only
# NOTE: local.cvsignore may be normal or automatically generated
if AUTO_CVSIGNORE
$(srcdir)/.cvsignore: local.cvsignore
	@$(ECHO) $(AUTO_IGNORE) | $(SPACES_TO_NEWLINE) > $@.temp
	-$(CAT) $< $@.temp > $@
	-$(RM) $@.temp
$(srcdir)/.gitignore: $(srcdir)/.cvsignore
	cp $< $@
endif

# -k option allows continuation past directories with failed tests
check.log: force
	@$(ECHO) "Logging results of \"make -k check\" in $@ ..."
	@$(ECHO) Tests started `$(DATE)` > $@.tmp
	-$(MAKE) -k check >> $@.tmp 2>&1
	@$(ECHO) Tests finished `$(DATE)` >> $@.tmp
	-$(MV) $@.tmp $@
# dump failures
	-$(GREP) -v "^PASS" $@ | $(GREP) -v "ignored"
	-$(GREP) "^Tests" $@
#	@$(ECHO) `$(GREP) "Abort trap" $@ | wc -l` cases crashed.
#	@$(ECHO) Total of `$(GREP) ^FAIL $@ | wc -l` failures encountered.
	$(AWK) -f $(top_srcdir)/scripts/tally_tests.awk $@
	@if $(GREP) "make.* \*\*\* " $@ ; then \
		$(ECHO) "Errors found!  see $@." ; \
		exit 1 ; \
	fi

# filters are specific to this project
# don't depend on check.log which is forced
check.log.filter:
	@test -f check.log && \
	$(CAT) check.log | $(GREP) -v "^Summarizing" | \
		$(GREP) -v "src/hackt" > $@ \
		|| $(ECHO) "\'make check.log\' first"


CHANGE_SUMMARY = \
	$(ECHO) `$(GREP) "^-" $@ | $(GREP) -v "^---" | wc -l` "lines removed" ; \
	$(ECHO) `$(GREP) "^+" $@ | $(GREP) -v "^+++" | wc -l` "lines added"

# assumes 'wc' in PATH
if HAVE_GIT
gitdiffs-staged: force
	{ cd $(srcdir) && git diff . ;} > $@
	@if test -s $@ ; then echo "There are unstaged modifications, check git status and then git add." ; fi
gitdiffs-cached: force
	{ cd $(srcdir) && git diff --cached . ;} > $@
	@$(CHANGE_SUMMARY)
cvsdiffs: gitdiffs-staged gitdiffs-cached
	@echo "Patches in gitdiffs-staged and gitdiffs-cached."
else
if HAVE_CVS
cvsdiffs: force
	-{ cd $(srcdir) && $(CVS) $(DIFF) -uN ;} > $@
	@$(CHANGE_SUMMARY)
else
cvsdiffs: force
	@$(ECHO) "Sorry, no 'cvs' found in path."
endif
endif

# general rule for recursive targets
$(MORE_RECURSIVE_TARGETS):
	+@$(RECURSIVE_TARGET_SCRIPT)

$(MORE_CLEAN_RECURSIVE_TARGETS):
	+@$(CLEAN_RECURSIVE_TARGET_SCRIPT)

# this shouldn't be parallel...
# .NOTPARALLEL: help
# .NOTPARALLEL unfortunately kills everything...
# help: help-global help-local
help: 
# ignore stderr
	-@{ $(CALLMAKE) help-global ; \
	$(CALLMAKE) help-local ;} 2> /dev/null

help-local:

# brief description of targets
help-global:
	@$(ECHO) "Global make targets:" ; \
	$(ECHO) "    help: lists some useful make targets" ; \
	$(ECHO) "    all: builds everything (recursive)" ; \
	$(ECHO) "    clean: removes make targets (recursive)" ; \
	$(ECHO) "    distclean: removes configure targets (recursive)" ; \
	$(ECHO) "    cvsdiffs: creates difference patch from CVS"
if AUTO_CVSIGNORE
	@$(ECHO) "    cvsignore: generates $$(srcdir)/.cvsignore (recursive)" ; \
	$(ECHO) "    clean-cvsignore: cleans $$(srcdir)/.cvsignore (recursive)"
endif
	@$(ECHO) "    check: runs tests (recursive)" ; \
	$(ECHO) "    build-check: create/run tests, without check (recursive)" ; \
	$(ECHO) "    check.log: logs make check -k" ; \
	$(ECHO) "    distdir-subdir: packages subtree of distribution" ; \
	$(ECHO) "    pdf: builds PDFs (recursive)" ; \
	$(ECHO) "    ps: builds PostScripts (recursive)" ; \
	$(ECHO) "    info: builds texinfo files (recursive)" ; \
	$(ECHO) "    html: builds HTML files (recursive)" ; \
	$(ECHO) "    echo-*:" ; \
	$(ECHO) "	config: configure invocation (config.status --version)" ; \
	$(ECHO) "	cleanfiles: list of cleaned files" ; \
	$(ECHO) "	distcleanfiles: list of distcleaned files" ; \
	$(ECHO) "	SUFFIXES: list of Makefile suffixes" ; \
	$(ECHO) "	extra-dist: list of EXTRA_DIST files" ; \
	$(ECHO) "	srcdir-extra-dist: list of source-only distrib. files" ; \
	$(ECHO) "	dist-common: list automatic DIST_COMMON files" ; \
	$(ECHO) "	distfiles: list of all DISTFILES" ; \
	$(ECHO) "	disthook-cleanfiles: list of all DISTHOOK_CLEANFILES" ; \
	$(ECHO) "	auto-ignore: list of automatic cvsignored files" ; \
	$(ECHO) "	srcdir, top-srcdir, top-builddir, subdir, " ; \
	$(ECHO) "	build, host, prefix, exec-prefix" ; \
	$(ECHO) "	subdirs, dist-subdirs" ; \
	$(ECHO) "	programs, scripts, data" ; \
	$(ECHO) "	texinfos, dvis, pdfs, pss, htmls" ; \
	$(ECHO) "	program-transform-name, package{,-version,-bugreport}" ; \
	$(ECHO) "	CFLAGS, CXXFLAGS, CPPFLAGS, LDFLAGS, AM_*FLAGS, LIBS, LEX, YACC"

# http://xkcd.com/149/
sandwich:
	@if test `whoami` = "root" ; then \
	  $(ECHO) "Okay." ; \
	else \
	  $(ECHO) "What? Make it yourself." ; \
	fi

# standard phony target for unconditional targets
force:


.PHONY: force $(PHONY_CVSIGNORE) \
	$(MORE_RECURSIVE_TARGETS) $(MORE_CLEAN_RECURSIVE_TARGETS) \
	help help-local help-global dist-hook dist-hook-autoclean \
	srcdir-distfiles build-check build-check-am build-check-local \
	distclean-depend distclean-depend-am distclean-depend-local

